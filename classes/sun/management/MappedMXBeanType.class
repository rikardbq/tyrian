Compiled from "MappedMXBeanType.java"
public abstract class sun.management.MappedMXBeanType {
  boolean isBasicType;
  javax.management.openmbean.OpenType<?> openType;
  java.lang.Class<?> mappedTypeClass;
  public sun.management.MappedMXBeanType();
  static synchronized sun.management.MappedMXBeanType newMappedType(java.lang.reflect.Type) throws javax.management.openmbean.OpenDataException;
  static synchronized sun.management.MappedMXBeanType newBasicType(java.lang.Class<?>, javax.management.openmbean.OpenType<?>) throws javax.management.openmbean.OpenDataException;
  public static synchronized sun.management.MappedMXBeanType getMappedType(java.lang.reflect.Type) throws javax.management.openmbean.OpenDataException;
  public static synchronized javax.management.openmbean.OpenType<?> toOpenType(java.lang.reflect.Type) throws javax.management.openmbean.OpenDataException;
  public static java.lang.Object toJavaTypeData(java.lang.Object, java.lang.reflect.Type) throws javax.management.openmbean.OpenDataException, java.io.InvalidObjectException;
  public static java.lang.Object toOpenTypeData(java.lang.Object, java.lang.reflect.Type) throws javax.management.openmbean.OpenDataException;
  public javax.management.openmbean.OpenType<?> getOpenType();
  boolean isBasicType();
  java.lang.String getTypeName();
  java.lang.Class<?> getMappedTypeClass();
  abstract java.lang.reflect.Type getJavaType();
  abstract java.lang.String getName();
  public abstract java.lang.Object toOpenTypeData(java.lang.Object) throws javax.management.openmbean.OpenDataException;
  public abstract java.lang.Object toJavaTypeData(java.lang.Object) throws javax.management.openmbean.OpenDataException, java.io.InvalidObjectException;
  static {};
}
