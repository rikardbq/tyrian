Compiled from "Wrapper.java"
public final class sun.invoke.util.Wrapper extends java.lang.Enum<sun.invoke.util.Wrapper> {
  public static final sun.invoke.util.Wrapper BOOLEAN;
  public static final sun.invoke.util.Wrapper BYTE;
  public static final sun.invoke.util.Wrapper SHORT;
  public static final sun.invoke.util.Wrapper CHAR;
  public static final sun.invoke.util.Wrapper INT;
  public static final sun.invoke.util.Wrapper LONG;
  public static final sun.invoke.util.Wrapper FLOAT;
  public static final sun.invoke.util.Wrapper DOUBLE;
  public static final sun.invoke.util.Wrapper OBJECT;
  public static final sun.invoke.util.Wrapper VOID;
  public static final int COUNT;
  static final boolean $assertionsDisabled;
  public static sun.invoke.util.Wrapper[] values();
  public static sun.invoke.util.Wrapper valueOf(java.lang.String);
  public java.lang.String detailString();
  public int bitWidth();
  public int stackSlots();
  public boolean isSingleWord();
  public boolean isDoubleWord();
  public boolean isNumeric();
  public boolean isIntegral();
  public boolean isSubwordOrInt();
  public boolean isSigned();
  public boolean isUnsigned();
  public boolean isFloating();
  public boolean isOther();
  public boolean isConvertibleFrom(sun.invoke.util.Wrapper);
  public java.lang.Object zero();
  public <T> T zero(java.lang.Class<T>);
  public static sun.invoke.util.Wrapper forPrimitiveType(java.lang.Class<?>);
  public static sun.invoke.util.Wrapper forPrimitiveType(char);
  static sun.invoke.util.Wrapper findPrimitiveType(java.lang.Class<?>);
  public static sun.invoke.util.Wrapper forWrapperType(java.lang.Class<?>);
  static sun.invoke.util.Wrapper findWrapperType(java.lang.Class<?>);
  public static sun.invoke.util.Wrapper forBasicType(char);
  public static sun.invoke.util.Wrapper forBasicType(java.lang.Class<?>);
  public java.lang.Class<?> primitiveType();
  public java.lang.Class<?> wrapperType();
  public <T> java.lang.Class<T> wrapperType(java.lang.Class<T>);
  public static <T> java.lang.Class<T> asWrapperType(java.lang.Class<T>);
  public static <T> java.lang.Class<T> asPrimitiveType(java.lang.Class<T>);
  public static boolean isWrapperType(java.lang.Class<?>);
  public static boolean isPrimitiveType(java.lang.Class<?>);
  public static char basicTypeChar(java.lang.Class<?>);
  public char basicTypeChar();
  public java.lang.String wrapperSimpleName();
  public java.lang.String primitiveSimpleName();
  public <T> T cast(java.lang.Object, java.lang.Class<T>);
  public <T> T convert(java.lang.Object, java.lang.Class<T>);
  static <T> java.lang.Class<T> forceType(java.lang.Class<?>, java.lang.Class<T>);
  public java.lang.Object wrap(java.lang.Object);
  public java.lang.Object wrap(int);
  public java.lang.Object makeArray(int);
  public java.lang.Class<?> arrayType();
  public void copyArrayUnboxing(java.lang.Object[], int, java.lang.Object, int, int);
  public void copyArrayBoxing(java.lang.Object, int, java.lang.Object[], int, int);
  static {};
}
