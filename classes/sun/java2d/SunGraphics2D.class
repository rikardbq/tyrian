Compiled from "SunGraphics2D.java"
public final class sun.java2d.SunGraphics2D extends java.awt.Graphics2D implements sun.awt.ConstrainableGraphics,java.lang.Cloneable,sun.java2d.DestSurfaceProvider {
  public static final int PAINT_CUSTOM;
  public static final int PAINT_TEXTURE;
  public static final int PAINT_RAD_GRADIENT;
  public static final int PAINT_LIN_GRADIENT;
  public static final int PAINT_GRADIENT;
  public static final int PAINT_ALPHACOLOR;
  public static final int PAINT_OPAQUECOLOR;
  public static final int COMP_CUSTOM;
  public static final int COMP_XOR;
  public static final int COMP_ALPHA;
  public static final int COMP_ISCOPY;
  public static final int STROKE_CUSTOM;
  public static final int STROKE_WIDE;
  public static final int STROKE_THINDASHED;
  public static final int STROKE_THIN;
  public static final int TRANSFORM_GENERIC;
  public static final int TRANSFORM_TRANSLATESCALE;
  public static final int TRANSFORM_ANY_TRANSLATE;
  public static final int TRANSFORM_INT_TRANSLATE;
  public static final int TRANSFORM_ISIDENT;
  public static final int CLIP_SHAPE;
  public static final int CLIP_RECTANGULAR;
  public static final int CLIP_DEVICE;
  public int eargb;
  public int pixel;
  public sun.java2d.SurfaceData surfaceData;
  public sun.java2d.pipe.PixelDrawPipe drawpipe;
  public sun.java2d.pipe.PixelFillPipe fillpipe;
  public sun.java2d.pipe.DrawImagePipe imagepipe;
  public sun.java2d.pipe.ShapeDrawPipe shapepipe;
  public sun.java2d.pipe.TextPipe textpipe;
  public sun.java2d.loops.MaskFill alphafill;
  public sun.java2d.loops.RenderLoops loops;
  public sun.java2d.loops.CompositeType imageComp;
  public int paintState;
  public int compositeState;
  public int strokeState;
  public int transformState;
  public int clipState;
  public java.awt.Color foregroundColor;
  public java.awt.Color backgroundColor;
  public java.awt.geom.AffineTransform transform;
  public int transX;
  public int transY;
  protected static final java.awt.Stroke defaultStroke;
  protected static final java.awt.Composite defaultComposite;
  public java.awt.Paint paint;
  public java.awt.Stroke stroke;
  public java.awt.Composite composite;
  protected java.awt.Font font;
  protected java.awt.FontMetrics fontMetrics;
  public int renderHint;
  public int antialiasHint;
  public int textAntialiasHint;
  protected int fractionalMetricsHint;
  public int lcdTextContrast;
  public int strokeHint;
  public int interpolationType;
  public java.awt.RenderingHints hints;
  public sun.java2d.pipe.Region constrainClip;
  public int constrainX;
  public int constrainY;
  public sun.java2d.pipe.Region clipRegion;
  public java.awt.Shape usrClip;
  protected sun.java2d.pipe.Region devClip;
  protected static sun.java2d.pipe.ValidatePipe invalidpipe;
  static final int NON_UNIFORM_SCALE_MASK;
  public static final double MinPenSizeAA;
  public static final double MinPenSizeAASquared;
  public static final double MinPenSizeSquared;
  static final int NON_RECTILINEAR_TRANSFORM_MASK;
  sun.java2d.loops.Blit lastCAblit;
  java.awt.Composite lastCAcomp;
  static final boolean $assertionsDisabled;
  public sun.java2d.SunGraphics2D(sun.java2d.SurfaceData, java.awt.Color, java.awt.Color, java.awt.Font);
  protected java.lang.Object clone();
  public java.awt.Graphics create();
  public void setDevClip(int, int, int, int);
  public void setDevClip(java.awt.Rectangle);
  public void constrain(int, int, int, int, sun.java2d.pipe.Region);
  public void constrain(int, int, int, int);
  protected void invalidatePipe();
  public void validatePipe();
  java.awt.Shape intersectShapes(java.awt.Shape, java.awt.Shape, boolean, boolean);
  java.awt.Shape intersectRectShape(java.awt.geom.Rectangle2D, java.awt.Shape, boolean, boolean);
  protected static java.awt.Shape cloneShape(java.awt.Shape);
  java.awt.Shape intersectByArea(java.awt.Shape, java.awt.Shape, boolean, boolean);
  public sun.java2d.pipe.Region getCompClip();
  public java.awt.Font getFont();
  public sun.java2d.loops.FontInfo checkFontInfo(sun.java2d.loops.FontInfo, java.awt.Font, java.awt.font.FontRenderContext);
  public static boolean isRotated(double[]);
  public void setFont(java.awt.Font);
  public sun.java2d.loops.FontInfo getFontInfo();
  public sun.java2d.loops.FontInfo getGVFontInfo(java.awt.Font, java.awt.font.FontRenderContext);
  public java.awt.FontMetrics getFontMetrics();
  public java.awt.FontMetrics getFontMetrics(java.awt.Font);
  public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean);
  public java.awt.image.ColorModel getDeviceColorModel();
  public java.awt.GraphicsConfiguration getDeviceConfiguration();
  public sun.java2d.SurfaceData getSurfaceData();
  public void setComposite(java.awt.Composite);
  public void setPaint(java.awt.Paint);
  public void setStroke(java.awt.Stroke);
  public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object);
  public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key);
  public void setRenderingHints(java.util.Map<?, ?>);
  public void addRenderingHints(java.util.Map<?, ?>);
  public java.awt.RenderingHints getRenderingHints();
  java.awt.RenderingHints makeHints(java.util.Map<?, ?>);
  public void translate(double, double);
  public void rotate(double);
  public void rotate(double, double, double);
  public void scale(double, double);
  public void shear(double, double);
  public void transform(java.awt.geom.AffineTransform);
  public void translate(int, int);
  public void setTransform(java.awt.geom.AffineTransform);
  protected void invalidateTransform();
  public java.awt.geom.AffineTransform getTransform();
  public java.awt.geom.AffineTransform cloneTransform();
  public java.awt.Paint getPaint();
  public java.awt.Composite getComposite();
  public java.awt.Color getColor();
  void validateColor();
  public void setColor(java.awt.Color);
  public void setBackground(java.awt.Color);
  public java.awt.Color getBackground();
  public java.awt.Stroke getStroke();
  public java.awt.Rectangle getClipBounds();
  public java.awt.Rectangle getClipBounds(java.awt.Rectangle);
  public boolean hitClip(int, int, int, int);
  protected void validateCompClip();
  protected java.awt.Shape transformShape(java.awt.Shape);
  public java.awt.Shape untransformShape(java.awt.Shape);
  protected static java.awt.Shape transformShape(int, int, java.awt.Shape);
  protected static java.awt.Shape transformShape(java.awt.geom.AffineTransform, java.awt.Shape);
  public void clipRect(int, int, int, int);
  public void setClip(int, int, int, int);
  public java.awt.Shape getClip();
  public void setClip(java.awt.Shape);
  public void clip(java.awt.Shape);
  public void setPaintMode();
  public void setXORMode(java.awt.Color);
  public void copyArea(int, int, int, int, int, int);
  public void drawLine(int, int, int, int);
  public void drawRoundRect(int, int, int, int, int, int);
  public void fillRoundRect(int, int, int, int, int, int);
  public void drawOval(int, int, int, int);
  public void fillOval(int, int, int, int);
  public void drawArc(int, int, int, int, int, int);
  public void fillArc(int, int, int, int, int, int);
  public void drawPolyline(int[], int[], int);
  public void drawPolygon(int[], int[], int);
  public void fillPolygon(int[], int[], int);
  public void drawRect(int, int, int, int);
  public void fillRect(int, int, int, int);
  public void clearRect(int, int, int, int);
  public void draw(java.awt.Shape);
  public void fill(java.awt.Shape);
  public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform);
  public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform);
  protected java.awt.Rectangle transformBounds(java.awt.Rectangle, java.awt.geom.AffineTransform);
  public void drawString(java.lang.String, int, int);
  public void drawString(java.lang.String, float, float);
  public void drawString(java.text.AttributedCharacterIterator, int, int);
  public void drawString(java.text.AttributedCharacterIterator, float, float);
  public void drawGlyphVector(java.awt.font.GlyphVector, float, float);
  public void drawChars(char[], int, int, int, int);
  public void drawBytes(byte[], int, int, int, int);
  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver);
  public boolean copyImage(java.awt.Image, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver);
  public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int);
  public java.awt.font.FontRenderContext getFontRenderContext();
  public void dispose();
  public void finalize();
  public java.lang.Object getDestination();
  public sun.java2d.Surface getDestSurface();
  static {};
}
