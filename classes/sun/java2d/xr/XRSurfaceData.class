Compiled from "XRSurfaceData.java"
public abstract class sun.java2d.xr.XRSurfaceData extends sun.java2d.x11.XSurfaceData {
  sun.awt.X11ComponentPeer peer;
  sun.java2d.xr.XRGraphicsConfig graphicsConfig;
  sun.java2d.xr.XRBackend renderQueue;
  protected int depth;
  public static final java.lang.String DESC_BYTE_A8_X11;
  public static final java.lang.String DESC_INT_RGB_X11;
  public static final java.lang.String DESC_INT_ARGB_X11;
  public static final sun.java2d.loops.SurfaceType ByteA8X11;
  public static final sun.java2d.loops.SurfaceType IntRgbX11;
  public static final sun.java2d.loops.SurfaceType IntArgbPreX11;
  protected sun.java2d.xr.XRRenderer xrpipe;
  protected sun.java2d.pipe.PixelToShapeConverter xrtxpipe;
  protected sun.java2d.pipe.TextPipe xrtextpipe;
  protected sun.java2d.xr.XRDrawImage xrDrawImage;
  protected sun.java2d.pipe.ShapeDrawPipe aaShapePipe;
  protected sun.java2d.pipe.PixelToShapeConverter aaPixelToShapeConv;
  public int picture;
  public sun.java2d.xr.XRCompositeManager maskBuffer;
  boolean transformInUse;
  java.awt.geom.AffineTransform validatedSourceTransform;
  java.awt.geom.AffineTransform staticSrcTx;
  int validatedRepeat;
  int validatedFilter;
  protected native void XRInitSurface(int, int, int, long, int);
  native void initXRPicture(long, int);
  native void freeXSDOPicture(long);
  public java.awt.image.Raster getRaster(int, int, int, int);
  public static void initXRSurfaceData();
  protected boolean isXRDrawableValid();
  public sun.java2d.SurfaceDataProxy makeProxyFor(sun.java2d.SurfaceData);
  public void validatePipe(sun.java2d.SunGraphics2D);
  protected sun.java2d.pipe.TextPipe getTextPipe(sun.java2d.SunGraphics2D);
  protected sun.java2d.loops.MaskFill getMaskFill(sun.java2d.SunGraphics2D);
  public sun.java2d.loops.RenderLoops getRenderLoops(sun.java2d.SunGraphics2D);
  public java.awt.GraphicsConfiguration getDeviceConfiguration();
  public static sun.java2d.xr.XRSurfaceData$XRWindowSurfaceData createData(sun.awt.X11ComponentPeer);
  public static sun.java2d.xr.XRSurfaceData$XRPixmapSurfaceData createData(sun.java2d.xr.XRGraphicsConfig, int, int, java.awt.image.ColorModel, java.awt.Image, long, int, boolean);
  protected sun.java2d.xr.XRSurfaceData(sun.awt.X11ComponentPeer, sun.java2d.xr.XRGraphicsConfig, sun.java2d.loops.SurfaceType, java.awt.image.ColorModel, int, int);
  protected sun.java2d.xr.XRSurfaceData(sun.java2d.xr.XRBackend);
  public void initXRender(int);
  public static sun.java2d.xr.XRGraphicsConfig getGC(sun.awt.X11ComponentPeer);
  public abstract boolean canSourceSendExposures(int, int, int, int);
  public void validateCopyAreaGC(sun.java2d.pipe.Region, boolean);
  public boolean copyArea(sun.java2d.SunGraphics2D, int, int, int, int, int, int);
  public static sun.java2d.loops.SurfaceType getSurfaceType(sun.java2d.xr.XRGraphicsConfig, int);
  public void invalidate();
  void validateAsSource(java.awt.geom.AffineTransform, int, int);
  public void validateAsDestination(sun.java2d.SunGraphics2D, sun.java2d.pipe.Region);
  public synchronized void makePipes();
  public long getGC();
  public int getPicture();
  public int getXid();
  public sun.java2d.xr.XRGraphicsConfig getGraphicsConfig();
  public void setStaticSrcTx(java.awt.geom.AffineTransform);
  static {};
}
