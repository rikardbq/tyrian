Compiled from "PathGraphics.java"
public abstract class sun.print.PathGraphics extends sun.print.ProxyGraphics2D {
  protected boolean printingGlyphVector;
  protected static java.lang.ref.SoftReference<java.util.Hashtable<sun.font.Font2DHandle, java.lang.Object>> fontMapRef;
  static final boolean $assertionsDisabled;
  protected sun.print.PathGraphics(java.awt.Graphics2D, java.awt.print.PrinterJob, java.awt.print.Printable, java.awt.print.PageFormat, int, boolean);
  protected java.awt.print.Printable getPrintable();
  protected java.awt.print.PageFormat getPageFormat();
  protected int getPageIndex();
  public boolean canDoRedraws();
  public abstract void redrawRegion(java.awt.geom.Rectangle2D, double, double, java.awt.Shape, java.awt.geom.AffineTransform) throws java.awt.print.PrinterException;
  public void drawLine(int, int, int, int);
  public void drawRect(int, int, int, int);
  public void fillRect(int, int, int, int);
  public void clearRect(int, int, int, int);
  public void drawRoundRect(int, int, int, int, int, int);
  public void fillRoundRect(int, int, int, int, int, int);
  public void drawOval(int, int, int, int);
  public void fillOval(int, int, int, int);
  public void drawArc(int, int, int, int, int, int);
  public void fillArc(int, int, int, int, int, int);
  public void drawPolyline(int[], int[], int);
  public void drawPolygon(int[], int[], int);
  public void drawPolygon(java.awt.Polygon);
  public void fillPolygon(int[], int[], int);
  public void fillPolygon(java.awt.Polygon);
  public void drawString(java.lang.String, int, int);
  public void drawString(java.lang.String, float, float);
  protected void drawString(java.lang.String, float, float, java.awt.Font, java.awt.font.FontRenderContext, float);
  public void drawString(java.text.AttributedCharacterIterator, int, int);
  public void drawString(java.text.AttributedCharacterIterator, float, float);
  public void drawGlyphVector(java.awt.font.GlyphVector, float, float);
  protected int platformFontCount(java.awt.Font, java.lang.String);
  protected boolean printGlyphVector(java.awt.font.GlyphVector, float, float);
  boolean printedSimpleGlyphVector(java.awt.font.GlyphVector, float, float);
  protected boolean canDrawStringToWidth();
  public void draw(java.awt.Shape);
  public void fill(java.awt.Shape);
  public void fill(java.awt.Shape, java.awt.Color);
  protected abstract void deviceFill(java.awt.geom.PathIterator, java.awt.Color);
  protected abstract void deviceClip(java.awt.geom.PathIterator);
  protected abstract void deviceFrameRect(int, int, int, int, java.awt.Color);
  protected abstract void deviceDrawLine(int, int, int, int, java.awt.Color);
  protected abstract void deviceFillRect(int, int, int, int, java.awt.Color);
  protected java.awt.image.BufferedImage getBufferedImage(java.awt.Image);
  protected boolean hasTransparentPixels(java.awt.image.BufferedImage);
  protected boolean isBitmaskTransparency(java.awt.image.BufferedImage);
  protected boolean drawBitmaskImage(java.awt.image.BufferedImage, java.awt.geom.AffineTransform, java.awt.Color, int, int, int, int);
  protected abstract boolean drawImageToPlatform(java.awt.Image, java.awt.geom.AffineTransform, java.awt.Color, int, int, int, int, boolean);
  public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver);
  public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver);
  public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int);
  public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform);
  static {};
}
