Compiled from "X11GraphicsConfig.java"
public class sun.awt.X11GraphicsConfig extends java.awt.GraphicsConfiguration implements sun.awt.image.SurfaceManager$ProxiedGraphicsConfig {
  protected sun.awt.X11GraphicsDevice screen;
  protected int visual;
  int depth;
  int colormap;
  java.awt.image.ColorModel colorModel;
  long aData;
  boolean doubleBuffer;
  protected int bitsPerPixel;
  protected sun.java2d.loops.SurfaceType surfaceType;
  public sun.java2d.loops.RenderLoops solidloops;
  public static sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, boolean);
  public static sun.awt.X11GraphicsConfig getConfig(sun.awt.X11GraphicsDevice, int, int, int, int);
  protected sun.awt.X11GraphicsConfig(sun.awt.X11GraphicsDevice, int, int, int, boolean);
  public sun.awt.X11GraphicsDevice getDevice();
  public int getVisual();
  public int getDepth();
  public int getColormap();
  public int getBitsPerPixel();
  public synchronized sun.java2d.loops.SurfaceType getSurfaceType();
  public java.lang.Object getProxyKey();
  public synchronized sun.java2d.loops.RenderLoops getSolidLoops(sun.java2d.loops.SurfaceType);
  public synchronized java.awt.image.ColorModel getColorModel();
  public java.awt.image.ColorModel getColorModel(int);
  public static java.awt.image.DirectColorModel createDCM32(int, int, int, int, boolean);
  public static java.awt.image.ComponentColorModel createABGRCCM();
  public java.awt.geom.AffineTransform getDefaultTransform();
  public int getScale();
  public int scaleUp(int);
  public int scaleDown(int);
  public java.awt.geom.AffineTransform getNormalizingTransform();
  public long getAData();
  public java.lang.String toString();
  public java.awt.Rectangle getBounds();
  public java.awt.BufferCapabilities getBufferCapabilities();
  public java.awt.ImageCapabilities getImageCapabilities();
  public boolean isDoubleBuffered();
  public sun.java2d.SurfaceData createSurfaceData(sun.awt.X11ComponentPeer);
  public java.awt.Image createAcceleratedImage(java.awt.Component, int, int);
  public long createBackBuffer(sun.awt.X11ComponentPeer, int, java.awt.BufferCapabilities) throws java.awt.AWTException;
  public native void destroyBackBuffer(long);
  public java.awt.image.VolatileImage createBackBufferImage(java.awt.Component, long);
  public void flip(sun.awt.X11ComponentPeer, java.awt.Component, java.awt.image.VolatileImage, int, int, int, int, java.awt.BufferCapabilities$FlipContents);
  public boolean isTranslucencyCapable();
  public java.awt.GraphicsDevice getDevice();
  static {};
}
