Compiled from "SunToolkit.java"
public abstract class sun.awt.SunToolkit extends java.awt.Toolkit implements sun.awt.ComponentFactory,sun.awt.InputMethodSupport,sun.awt.KeyboardFocusManagerPeerProvider {
  public static final int GRAB_EVENT_MASK;
  protected static int numberOfButtons;
  public static final int MAX_BUTTONS_SUPPORTED;
  static final sun.awt.SoftCache fileImgCache;
  static final sun.awt.SoftCache urlImgCache;
  public static final int DEFAULT_WAIT_TIME;
  public static final java.lang.String DESKTOPFONTHINTS;
  public sun.awt.SunToolkit();
  public boolean useBufferPerWindow();
  public abstract java.awt.peer.FramePeer createLightweightFrame(sun.awt.LightweightFrame) throws java.awt.HeadlessException;
  public abstract java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon) throws java.awt.HeadlessException, java.awt.AWTException;
  public abstract java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray);
  public abstract boolean isTraySupported();
  public abstract java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer() throws java.awt.HeadlessException;
  public static final void awtLock();
  public static final boolean awtTryLock();
  public static final void awtUnlock();
  public static final void awtLockWait() throws java.lang.InterruptedException;
  public static final void awtLockWait(long) throws java.lang.InterruptedException;
  public static final void awtLockNotify();
  public static final void awtLockNotifyAll();
  public static final boolean isAWTLockHeldByCurrentThread();
  public static sun.awt.AppContext createNewAppContext();
  static final sun.awt.AppContext createNewAppContext(java.lang.ThreadGroup);
  static void wakeupEventQueue(java.awt.EventQueue, boolean);
  protected static java.lang.Object targetToPeer(java.lang.Object);
  protected static void targetCreatedPeer(java.lang.Object, java.lang.Object);
  protected static void targetDisposedPeer(java.lang.Object, java.lang.Object);
  public static sun.awt.AppContext targetToAppContext(java.lang.Object);
  public static void setLWRequestStatus(java.awt.Window, boolean);
  public static void checkAndSetPolicy(java.awt.Container);
  public static void insertTargetMapping(java.lang.Object, sun.awt.AppContext);
  public static void postEvent(sun.awt.AppContext, java.awt.AWTEvent);
  public static void postPriorityEvent(java.awt.AWTEvent);
  public static void flushPendingEvents();
  public static void flushPendingEvents(sun.awt.AppContext);
  public static void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable);
  public static void executeOnEventHandlerThread(java.lang.Object, java.lang.Runnable, long);
  public static void executeOnEventHandlerThread(sun.awt.PeerEvent);
  public static void invokeLaterOnAppContext(sun.awt.AppContext, java.lang.Runnable);
  public static void executeOnEDTAndWait(java.lang.Object, java.lang.Runnable) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException;
  public static boolean isDispatchThreadForAppContext(java.lang.Object);
  public java.awt.Dimension getScreenSize();
  public java.awt.image.ColorModel getColorModel() throws java.awt.HeadlessException;
  public java.awt.FontMetrics getFontMetrics(java.awt.Font);
  public java.lang.String[] getFontList();
  public void disableBackgroundErase(java.awt.Canvas);
  public void disableBackgroundErase(java.awt.Component);
  public static boolean getSunAwtNoerasebackground();
  public static boolean getSunAwtErasebackgroundonresize();
  static java.awt.Image getImageFromHash(java.awt.Toolkit, java.net.URL);
  static java.awt.Image getImageFromHash(java.awt.Toolkit, java.lang.String);
  public java.awt.Image getImage(java.lang.String);
  public java.awt.Image getImage(java.net.URL);
  protected java.awt.Image getImageWithResolutionVariant(java.lang.String, java.lang.String);
  protected java.awt.Image getImageWithResolutionVariant(java.net.URL, java.net.URL);
  public java.awt.Image createImage(java.lang.String);
  public java.awt.Image createImage(java.net.URL);
  public java.awt.Image createImage(byte[], int, int);
  public java.awt.Image createImage(java.awt.image.ImageProducer);
  public static java.awt.Image createImageWithResolutionVariant(java.awt.Image, java.awt.Image);
  public int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  public boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  protected static boolean imageCached(java.lang.String);
  protected static boolean imageCached(java.net.URL);
  protected static boolean imageExists(java.lang.String);
  protected static boolean imageExists(java.net.URL);
  public static java.awt.image.BufferedImage getScaledIconImage(java.util.List<java.awt.Image>, int, int);
  public static java.awt.image.DataBufferInt getScaledIconData(java.util.List<java.awt.Image>, int, int);
  protected java.awt.EventQueue getSystemEventQueueImpl();
  static java.awt.EventQueue getSystemEventQueueImplPP();
  public static java.awt.EventQueue getSystemEventQueueImplPP(sun.awt.AppContext);
  public static java.awt.Container getNativeContainer(java.awt.Component);
  public static java.awt.Component getHeavyweightComponent(java.awt.Component);
  public int getFocusAcceleratorKeyMask();
  public boolean isPrintableCharacterModifiersMask(int);
  public boolean canPopupOverlapTaskBar();
  public java.awt.Window createInputMethodWindow(java.lang.String, sun.awt.im.InputContext);
  public boolean enableInputMethodsForTextComponent();
  public static java.util.Locale getStartupLocale();
  public java.util.Locale getDefaultKeyboardLocale();
  public static boolean needsXEmbed();
  protected boolean needsXEmbedImpl();
  protected final boolean isXEmbedServerRequested();
  public static boolean isModalExcludedSupported();
  protected boolean isModalExcludedSupportedImpl();
  public static void setModalExcluded(java.awt.Window);
  public static boolean isModalExcluded(java.awt.Window);
  public boolean isModalityTypeSupported(java.awt.Dialog$ModalityType);
  public boolean isModalExclusionTypeSupported(java.awt.Dialog$ModalExclusionType);
  public void addModalityListener(sun.awt.ModalityListener);
  public void removeModalityListener(sun.awt.ModalityListener);
  public void notifyModalityPushed(java.awt.Dialog);
  public void notifyModalityPopped(java.awt.Dialog);
  final void notifyModalityChange(int, java.awt.Dialog);
  public static boolean isLightweightOrUnknown(java.awt.Component);
  public void realSync() throws sun.awt.SunToolkit$OperationTimedOut, sun.awt.SunToolkit$InfiniteLoop;
  public void realSync(long) throws sun.awt.SunToolkit$OperationTimedOut, sun.awt.SunToolkit$InfiniteLoop;
  protected abstract boolean syncNativeQueue(long);
  protected final boolean waitForIdle(long);
  public abstract void grab(java.awt.Window);
  public abstract void ungrab(java.awt.Window);
  public void showOrHideTouchKeyboard(java.awt.Component, java.awt.AWTEvent);
  public static boolean isTouchKeyboardAutoShowEnabled();
  public static native void closeSplashScreen();
  public static void setAAFontSettingsCondition(boolean);
  protected java.awt.RenderingHints getDesktopAAHints();
  public static java.awt.RenderingHints getDesktopFontHints();
  public abstract boolean isDesktopSupported();
  public abstract boolean isTaskbarSupported();
  public static synchronized void consumeNextKeyTyped(java.awt.event.KeyEvent);
  protected static void dumpPeers(sun.util.logging.PlatformLogger);
  public static java.awt.Window getContainingWindow(java.awt.Component);
  public static synchronized boolean getSunAwtDisableMixing();
  public boolean isNativeGTKAvailable();
  public synchronized void setWindowDeactivationTime(java.awt.Window, long);
  public synchronized long getWindowDeactivationTime(java.awt.Window);
  public void updateScreenMenuBarUI();
  public boolean isWindowOpacitySupported();
  public boolean isWindowShapingSupported();
  public boolean isWindowTranslucencySupported();
  public boolean isTranslucencyCapable(java.awt.GraphicsConfiguration);
  public boolean isSwingBackbufferTranslucencySupported();
  public static boolean isContainingTopLevelOpaque(java.awt.Component);
  public static boolean isContainingTopLevelTranslucent(java.awt.Component);
  public boolean needUpdateWindow();
  public int getNumberOfButtons();
  public static boolean isInstanceOf(java.lang.Object, java.lang.String);
  protected static sun.awt.LightweightFrame getLightweightFrame(java.awt.Component);
  public static void setSystemGenerated(java.awt.AWTEvent);
  public static boolean isSystemGenerated(java.awt.AWTEvent);
  static {};
}
