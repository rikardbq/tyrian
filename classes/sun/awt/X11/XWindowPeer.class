Compiled from "XWindowPeer.java"
class sun.awt.X11.XWindowPeer extends sun.awt.X11.XPanelPeer implements java.awt.peer.WindowPeer,sun.awt.DisplayChangedListener {
  sun.awt.X11.XWarningWindow warningWindow;
  java.awt.Dialog modalBlocker;
  boolean delayedModalBlocking;
  java.awt.Dimension targetMinimumSize;
  protected sun.awt.X11.XWindowPeer prevTransientFor;
  protected sun.awt.X11.XWindowPeer nextTransientFor;
  protected java.util.Vector<sun.awt.X11.ToplevelStateListener> toplevelStateListeners;
  sun.awt.X11.XAtom XA_NET_WM_STATE;
  sun.awt.X11.XAtomList net_wm_state;
  static final boolean $assertionsDisabled;
  public final java.awt.Window$Type getWindowType();
  sun.awt.X11.XWindowPeer(sun.awt.X11.XCreateWindowParams);
  sun.awt.X11.XWindowPeer(java.awt.Window);
  void preInit(sun.awt.X11.XCreateWindowParams);
  protected java.lang.String getWMName();
  void postInit(sun.awt.X11.XCreateWindowParams);
  public void updateIconImages();
  static java.util.List<sun.awt.IconInfo> normalizeIconImages(java.util.List<sun.awt.IconInfo>);
  static void dumpIcons(java.util.List<sun.awt.IconInfo>);
  public void recursivelySetIcon(java.util.List<sun.awt.IconInfo>);
  java.util.List<sun.awt.IconInfo> getIconInfo();
  void setIconHints(java.util.List<sun.awt.IconInfo>);
  protected static synchronized java.util.List<sun.awt.IconInfo> getDefaultIconInfo();
  public void updateMinimumSize();
  public java.awt.Dimension getTargetMinimumSize();
  public sun.awt.X11.XWindowPeer getOwnerPeer();
  public void setBounds(int, int, int, int, int);
  void updateFocusability();
  public java.awt.Insets getInsets();
  public void handleIconify();
  public void handleDeiconify();
  public void handleStateChange(int, int);
  boolean isAutoRequestFocus();
  static sun.awt.X11.XWindowPeer getNativeFocusedWindowPeer();
  static java.awt.Window getNativeFocusedWindow();
  boolean isFocusableWindow();
  boolean isFocusedWindowModalBlocker();
  long getFocusTargetWindow();
  boolean isNativelyNonFocusableWindow();
  public void handleWindowFocusIn_Dispatch();
  public void handleWindowFocusInSync(long);
  public void handleWindowFocusIn(long);
  public void handleWindowFocusOut(java.awt.Window, long);
  public void handleWindowFocusOutSync(java.awt.Window, long);
  public void checkIfOnNewScreen(java.awt.Rectangle);
  public void displayChanged();
  public void paletteChanged();
  protected java.awt.Point getNewLocation(sun.awt.X11.XConfigureEvent, int, int);
  public void handleConfigureNotifyEvent(sun.awt.X11.XEvent);
  final void requestXFocus(long);
  final void requestXFocus();
  protected void requestXFocus(long, boolean);
  public final boolean focusAllowedFor();
  public void handleFocusEvent(sun.awt.X11.XEvent);
  void setSaveUnder(boolean);
  public void toFront();
  public void toBack();
  public void updateAlwaysOnTopState();
  boolean isLocationByPlatform();
  public void setVisible(boolean);
  protected void suppressWmTakeFocus(boolean);
  final boolean isSimpleWindow();
  boolean hasWarningWindow();
  int getMenuBarHeight();
  void updateChildrenSizes();
  public void repositionSecurityWarning();
  protected void setMouseAbove(boolean);
  public void setFullScreenExclusiveModeState(boolean);
  public void updateSecurityWarningVisibility();
  boolean isOverrideRedirect();
  final boolean isOLWMDecorBug();
  public void dispose();
  boolean isResizable();
  public void handleVisibilityEvent(sun.awt.X11.XEvent);
  void handleRootPropertyNotify(sun.awt.X11.XEvent);
  public void handleMapNotifyEvent(sun.awt.X11.XEvent);
  public void handleUnmapNotifyEvent(sun.awt.X11.XEvent);
  protected boolean isWMStateNetHidden();
  protected void requestInitialFocus();
  public void addToplevelStateListener(sun.awt.X11.ToplevelStateListener);
  public void removeToplevelStateListener(sun.awt.X11.ToplevelStateListener);
  protected void stateChanged(long, int, int);
  boolean isWithdrawn();
  boolean hasDecorations(int);
  void setReparented(boolean);
  static java.util.Vector<sun.awt.X11.XWindowPeer> collectJavaToplevels();
  public void setModalBlocked(java.awt.Dialog, boolean);
  public void setModalBlocked(java.awt.Dialog, boolean, java.util.Vector<sun.awt.X11.XWindowPeer>);
  static void setToplevelTransientFor(sun.awt.X11.XWindowPeer, sun.awt.X11.XWindowPeer, boolean, boolean);
  void updateTransientFor();
  static void restoreTransientFor(sun.awt.X11.XWindowPeer);
  boolean isModalBlocked();
  static java.awt.Window getDecoratedOwner(java.awt.Window);
  public boolean requestWindowFocus(sun.awt.X11.XWindowPeer);
  public boolean requestWindowFocus();
  public boolean requestWindowFocus(long, boolean);
  void setActualFocusedWindow(sun.awt.X11.XWindowPeer);
  public void xSetVisible(boolean);
  public void addDropTarget();
  public void removeDropTarget();
  void addRootPropertyEventDispatcher();
  void removeRootPropertyEventDispatcher();
  public void updateFocusableWindowState();
  public sun.awt.X11.XAtomList getNETWMState();
  public void setNETWMState(sun.awt.X11.XAtomList);
  public sun.awt.X11.PropMwmHints getMWMHints();
  public void setMWMHints(sun.awt.X11.PropMwmHints);
  protected void updateDropTarget();
  public void setGrab(boolean);
  public boolean isGrabbed();
  public void handleXCrossingEvent(sun.awt.X11.XEvent);
  public void handleMotionNotify(sun.awt.X11.XEvent);
  public void handleButtonPressRelease(sun.awt.X11.XEvent);
  public void print(java.awt.Graphics);
  public void setOpacity(float);
  public void setOpaque(boolean);
  public void updateWindow();
  static {};
}
