Compiled from "XToolkit.java"
public final class sun.awt.X11.XToolkit extends sun.awt.UNIXToolkit implements java.lang.Runnable {
  static final boolean PRIMARY_LOOP;
  static final boolean SECONDARY_LOOP;
  sun.awt.X11.XClipboard clipboard;
  sun.awt.X11.XClipboard selection;
  protected static boolean dynamicLayoutSetting;
  static int arrowCursor;
  static java.util.TreeMap<java.lang.Long, sun.awt.X11.XBaseWindow> winMap;
  static java.util.HashMap<java.lang.Object, java.lang.Object> specialPeerMap;
  static java.util.HashMap<java.lang.Long, java.util.Collection<sun.awt.X11.XEventDispatcher>> winToDispatcher;
  static javax.swing.UIDefaults uidefaults;
  static final sun.awt.X11GraphicsEnvironment localEnv;
  static int awt_multiclick_time;
  static boolean securityWarningEnabled;
  static java.lang.Thread toolkitThread;
  static int altMask;
  static int metaMask;
  static int numLockMask;
  static int modeSwitchMask;
  static int modLockIsShiftLock;
  static long reset_time_utc;
  static final long WRAP_TIME_MILLIS;
  static final int XSUN_KP_BEHAVIOR;
  static final int XORG_KP_BEHAVIOR;
  static final int IS_SUN_KEYBOARD;
  static final int IS_NONSUN_KEYBOARD;
  static final int IS_KANA_KEYBOARD;
  static final int IS_NONKANA_KEYBOARD;
  static int awt_IsXsunKPBehavior;
  static boolean awt_UseXKB;
  static boolean awt_UseXKB_Calls;
  static int awt_XKBBaseEventCode;
  static int awt_XKBEffectiveGroup;
  static long awt_XKBDescPtr;
  static int sunOrNotKeyboard;
  static int kanaOrNotKeyboard;
  static native long getTrayIconDisplayTimeout();
  static native void waitForEvents(long);
  static boolean isToolkitThread();
  static void initSecurityWarning();
  static boolean isSecurityWarningEnabled();
  static native void awt_output_flush();
  static void awtFUnlock();
  static javax.swing.UIDefaults getUIDefaults();
  public void loadSystemColors(int[]);
  static void initUIDefaults();
  public static long getDisplay();
  public static long getDefaultRootWindow();
  void init();
  static java.lang.String getCorrectXIDString(java.lang.String);
  static native java.lang.String getEnv(java.lang.String);
  static java.lang.String getAWTAppClassName();
  public sun.awt.X11.XToolkit();
  public java.awt.peer.ButtonPeer createButton(java.awt.Button);
  public java.awt.peer.FramePeer createLightweightFrame(sun.awt.LightweightFrame);
  public java.awt.peer.FramePeer createFrame(java.awt.Frame);
  static void addToWinMap(long, sun.awt.X11.XBaseWindow);
  static void removeFromWinMap(long, sun.awt.X11.XBaseWindow);
  static sun.awt.X11.XBaseWindow windowToXWindow(long);
  static void addEventDispatcher(long, sun.awt.X11.XEventDispatcher);
  static void removeEventDispatcher(long, sun.awt.X11.XEventDispatcher);
  boolean getLastCursorPos(java.awt.Point);
  public void addXEventListener(sun.awt.X11.XToolkit$XEventListener);
  static void processException(java.lang.Throwable);
  static native void awt_toolkit_init();
  public void run();
  public void run(boolean);
  static int getMaxWindowWidthInPixels();
  static int getMaxWindowHeightInPixels();
  public java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration);
  protected static java.lang.Object targetToPeer(java.lang.Object);
  protected static void targetDisposedPeer(java.lang.Object, java.lang.Object);
  public java.awt.peer.RobotPeer createRobot(java.awt.Robot, java.awt.GraphicsDevice);
  public void setDynamicLayout(boolean);
  protected boolean isDynamicLayoutSet();
  protected boolean isDynamicLayoutSupported();
  public boolean isDynamicLayoutActive();
  public java.awt.peer.FontPeer getFontPeer(java.lang.String, int);
  public java.awt.dnd.peer.DragSourceContextPeer createDragSourceContextPeer(java.awt.dnd.DragGestureEvent) throws java.awt.dnd.InvalidDnDOperationException;
  public <T extends java.awt.dnd.DragGestureRecognizer> T createDragGestureRecognizer(java.lang.Class<T>, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener);
  public java.awt.peer.CheckboxMenuItemPeer createCheckboxMenuItem(java.awt.CheckboxMenuItem);
  public java.awt.peer.MenuItemPeer createMenuItem(java.awt.MenuItem);
  public java.awt.peer.TextFieldPeer createTextField(java.awt.TextField);
  public java.awt.peer.LabelPeer createLabel(java.awt.Label);
  public java.awt.peer.ListPeer createList(java.awt.List);
  public java.awt.peer.CheckboxPeer createCheckbox(java.awt.Checkbox);
  public java.awt.peer.ScrollbarPeer createScrollbar(java.awt.Scrollbar);
  public java.awt.peer.ScrollPanePeer createScrollPane(java.awt.ScrollPane);
  public java.awt.peer.TextAreaPeer createTextArea(java.awt.TextArea);
  public java.awt.peer.ChoicePeer createChoice(java.awt.Choice);
  public java.awt.peer.CanvasPeer createCanvas(java.awt.Canvas);
  public java.awt.peer.PanelPeer createPanel(java.awt.Panel);
  public java.awt.peer.WindowPeer createWindow(java.awt.Window);
  public java.awt.peer.DialogPeer createDialog(java.awt.Dialog);
  public static synchronized boolean getSunAwtDisableGtkFileDialogs();
  public java.awt.peer.FileDialogPeer createFileDialog(java.awt.FileDialog);
  public java.awt.peer.MenuBarPeer createMenuBar(java.awt.MenuBar);
  public java.awt.peer.MenuPeer createMenu(java.awt.Menu);
  public java.awt.peer.PopupMenuPeer createPopupMenu(java.awt.PopupMenu);
  public synchronized java.awt.peer.MouseInfoPeer getMouseInfoPeer();
  public sun.awt.X11.XEmbeddedFramePeer createEmbeddedFrame(sun.awt.X11.XEmbeddedFrame);
  sun.awt.X11.XEmbedChildProxyPeer createEmbedProxy(sun.awt.X11.XEmbedChildProxy);
  public java.awt.peer.KeyboardFocusManagerPeer getKeyboardFocusManagerPeer() throws java.awt.HeadlessException;
  public java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) throws java.lang.IndexOutOfBoundsException;
  public java.awt.peer.TrayIconPeer createTrayIcon(java.awt.TrayIcon) throws java.awt.HeadlessException, java.awt.AWTException;
  public java.awt.peer.SystemTrayPeer createSystemTray(java.awt.SystemTray) throws java.awt.HeadlessException;
  public boolean isTraySupported();
  public sun.awt.datatransfer.DataTransferer getDataTransferer();
  public java.awt.Dimension getBestCursorSize(int, int);
  public int getMaximumCursorColors();
  public java.util.Map<java.awt.font.TextAttribute, ?> mapInputMethodHighlight(java.awt.im.InputMethodHighlight);
  public boolean getLockingKeyState(int);
  public java.awt.datatransfer.Clipboard getSystemClipboard();
  public java.awt.datatransfer.Clipboard getSystemSelection();
  public void beep();
  public java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties);
  public java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes);
  static void XSync();
  public int getScreenResolution();
  static native long getDefaultXColormap();
  public java.awt.im.spi.InputMethodDescriptor getInputMethodAdapterDescriptor() throws java.awt.AWTException;
  public boolean enableInputMethodsForTextComponent();
  static int getMultiClickTime();
  static void initializeMultiClickTime();
  public boolean isFrameStateSupported(int) throws java.awt.HeadlessException;
  static void dumpPeers();
  static long getCurrentServerTime();
  protected void initializeDesktopProperties();
  public int getNumberOfButtons();
  static int getNumberOfButtonsForMask();
  protected java.lang.Object lazilyLoadDesktopProperty(java.lang.String);
  public synchronized void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  void parseXSettings(int, java.util.Map<java.lang.String, java.lang.Object>);
  static int keysymToPrimaryKeycode(long);
  static boolean getModifierState(int);
  static void setupModifierMap();
  static void remove(java.lang.Runnable);
  static native void wakeup_poll();
  static void schedule(java.lang.Runnable, long);
  static boolean isLeftMouseButton(java.awt.event.MouseEvent);
  static boolean isRightMouseButton(java.awt.event.MouseEvent);
  static long nowMillisUTC_offset(long);
  protected boolean needsXEmbedImpl();
  public boolean isModalityTypeSupported(java.awt.Dialog$ModalityType);
  public boolean isModalExclusionTypeSupported(java.awt.Dialog$ModalExclusionType);
  static java.awt.EventQueue getEventQueue(java.lang.Object);
  static void removeSourceEvents(java.awt.EventQueue, java.lang.Object, boolean);
  public boolean isAlwaysOnTopSupported();
  public boolean useBufferPerWindow();
  static int getBackingStoreType();
  static boolean isXsunKPBehavior();
  static void resetKeyboardSniffer();
  static boolean isSunKeyboard();
  static boolean isKanaKeyboard();
  static boolean isXKBenabled();
  static boolean tryXKB();
  static boolean canUseXKBCalls();
  static int getXKBEffectiveGroup();
  static int getXKBBaseEventCode();
  static long getXKBKbdDesc();
  void freeXKB();
  public static long getEventNumber();
  protected boolean syncNativeQueue(long);
  public void grab(java.awt.Window);
  public void ungrab(java.awt.Window);
  public boolean isDesktopSupported();
  public java.awt.peer.DesktopPeer createDesktopPeer(java.awt.Desktop);
  public boolean isTaskbarSupported();
  public java.awt.peer.TaskbarPeer createTaskbarPeer(java.awt.Taskbar);
  public boolean areExtraMouseButtonsEnabled() throws java.awt.HeadlessException;
  public boolean isWindowOpacitySupported();
  public boolean isWindowShapingSupported();
  public boolean isWindowTranslucencySupported();
  public boolean isTranslucencyCapable(java.awt.GraphicsConfiguration);
  public static boolean getSunAwtDisableGrab();
  static {};
}
