Compiled from "FontConfiguration.java"
public abstract class sun.awt.FontConfiguration {
  protected static java.lang.String osVersion;
  protected static java.lang.String osName;
  protected static java.lang.String encoding;
  protected static java.util.Locale startupLocale;
  protected static java.util.Hashtable<java.lang.String, java.lang.String> localeMap;
  protected static boolean isProperties;
  protected sun.font.SunFontManager fontManager;
  protected boolean preferLocaleFonts;
  protected boolean preferPropFonts;
  public static boolean verbose;
  protected static final int NUM_FONTS;
  protected static final int NUM_STYLES;
  protected static final java.lang.String[] fontNames;
  protected static final java.lang.String[] publicFontNames;
  protected static final java.lang.String[] styleNames;
  protected static java.lang.String[] installedFallbackFontFiles;
  protected java.util.HashMap<java.lang.String, java.lang.Object> reorderMap;
  java.util.HashMap<java.lang.String, java.lang.Boolean> existsMap;
  java.util.HashMap<java.lang.String, java.lang.String> filenamesMap;
  java.util.HashSet<java.lang.String> coreFontFileNames;
  protected static short[] table_awtfontpaths;
  static final boolean $assertionsDisabled;
  public sun.awt.FontConfiguration(sun.font.SunFontManager);
  public synchronized boolean init();
  public sun.awt.FontConfiguration(sun.font.SunFontManager, boolean, boolean);
  protected void setOsNameAndVersion();
  public boolean foundOsSpecificFile();
  public boolean fontFilesArePresent();
  protected void getInstalledFallbackFonts(java.lang.String);
  public static void loadBinary(java.io.InputStream) throws java.io.IOException;
  public static void saveBinary(java.io.OutputStream) throws java.io.IOException;
  public static void loadProperties(java.io.InputStream) throws java.io.IOException;
  public static boolean hasMonoToPropMap();
  public static boolean isLogicalFontFamilyName(java.lang.String);
  public static boolean isLogicalFontFamilyNameLC(java.lang.String);
  public static boolean isLogicalFontFaceName(java.lang.String);
  public static boolean isLogicalFontFaceNameLC(java.lang.String);
  protected static int getFontIndex(java.lang.String);
  protected static int getStyleIndex(java.lang.String);
  protected static int getStyleIndex(int);
  protected static java.lang.String getFontName(int);
  protected static java.lang.String getStyleName(int);
  public static java.lang.String getLogicalFontFaceName(java.lang.String, int);
  public static java.lang.String getStyleString(int);
  public abstract java.lang.String getFallbackFamilyName(java.lang.String, java.lang.String);
  protected java.lang.String getCompatibilityFamilyName(java.lang.String);
  protected java.lang.String mapFileName(java.lang.String);
  protected abstract void initReorderMap();
  public static boolean willReorderForStartupLocale();
  protected java.lang.String[] split(java.lang.String);
  public sun.awt.FontDescriptor[] getFontDescriptors(java.lang.String, int);
  protected sun.awt.FontDescriptor[] buildFontDescriptors(int, int);
  protected java.lang.String makeAWTFontName(java.lang.String, java.lang.String);
  protected abstract java.lang.String getEncoding(java.lang.String, java.lang.String);
  protected abstract java.nio.charset.Charset getDefaultFontCharset(java.lang.String);
  public java.util.HashSet<java.lang.String> getAWTFontPathSet();
  public sun.font.CompositeFontDescriptor[] get2DCompositeFontInfo();
  protected abstract java.lang.String getFaceNameFromComponentFontName(java.lang.String);
  protected abstract java.lang.String getFileNameFromComponentFontName(java.lang.String);
  public boolean needToSearchForFile(java.lang.String);
  public int getNumberCoreFonts();
  public java.lang.String[] getPlatformFontNames();
  public java.lang.String getFileNameFromPlatformName(java.lang.String);
  public java.lang.String getExtraFontPath();
  public java.lang.String getVersion();
  protected static sun.awt.FontConfiguration getFontConfiguration();
  protected void setFontConfiguration();
  protected static short getComponentFontID(short, int, int);
  protected static short getComponentFontIDMotif(short, int, int);
  protected static java.lang.String getComponentFontName(short);
  protected short[] getCoreScripts(int);
  protected static java.lang.String getString(short);
  static {};
}
