Compiled from "ShellFolder.java"
public abstract class sun.awt.shell.ShellFolder extends java.io.File {
  public static final java.lang.String COLUMN_NAME;
  public static final java.lang.String COLUMN_SIZE;
  public static final java.lang.String COLUMN_DATE;
  protected sun.awt.shell.ShellFolder parent;
  sun.awt.shell.ShellFolder(sun.awt.shell.ShellFolder, java.lang.String);
  public boolean isFileSystem();
  protected abstract java.lang.Object writeReplace() throws java.io.ObjectStreamException;
  public java.lang.String getParent();
  public java.io.File getParentFile();
  public java.io.File[] listFiles();
  public java.io.File[] listFiles(boolean);
  public abstract boolean isLink();
  public abstract sun.awt.shell.ShellFolder getLinkLocation() throws java.io.FileNotFoundException;
  public abstract java.lang.String getDisplayName();
  public abstract java.lang.String getFolderType();
  public abstract java.lang.String getExecutableType();
  public int compareTo(java.io.File);
  public java.awt.Image getIcon(boolean);
  public static sun.awt.shell.ShellFolder getShellFolder(java.io.File) throws java.io.FileNotFoundException;
  public static java.lang.Object get(java.lang.String);
  public static boolean isComputerNode(java.io.File);
  public static boolean isFileSystemRoot(java.io.File);
  public static java.io.File getNormalizedFile(java.io.File) throws java.io.IOException;
  public static void sort(java.util.List<? extends java.io.File>);
  public void sortChildren(java.util.List<? extends java.io.File>);
  public boolean isAbsolute();
  public java.io.File getAbsoluteFile();
  public boolean canRead();
  public boolean canWrite();
  public boolean exists();
  public boolean isDirectory();
  public boolean isFile();
  public long lastModified();
  public long length();
  public boolean createNewFile() throws java.io.IOException;
  public boolean delete();
  public void deleteOnExit();
  public boolean mkdir();
  public boolean mkdirs();
  public boolean renameTo(java.io.File);
  public boolean setLastModified(long);
  public boolean setReadOnly();
  public java.lang.String toString();
  public static sun.awt.shell.ShellFolderColumnInfo[] getFolderColumns(java.io.File);
  public sun.awt.shell.ShellFolderColumnInfo[] getFolderColumns();
  public static java.lang.Object getFolderColumnValue(java.io.File, int);
  public java.lang.Object getFolderColumnValue(int);
  public static <T> T invoke(java.util.concurrent.Callable<T>);
  public static <T, E extends java.lang.Throwable> T invoke(java.util.concurrent.Callable<T>, java.lang.Class<E>) throws java/lang/InterruptedException, E;
  public int compareTo(java.lang.Object);
  static {};
}
