Compiled from "NormalizerImpl.java"
public final class sun.text.normalizer.NormalizerImpl {
  public static final int MIN_YES_YES_WITH_CC;
  public static final int JAMO_VT;
  public static final int MIN_NORMAL_MAYBE_YES;
  public static final int JAMO_L;
  public static final int INERT;
  public static final int HAS_COMP_BOUNDARY_AFTER;
  public static final int OFFSET_SHIFT;
  public static final int DELTA_TCCC_0;
  public static final int DELTA_TCCC_1;
  public static final int DELTA_TCCC_GT_1;
  public static final int DELTA_TCCC_MASK;
  public static final int DELTA_SHIFT;
  public static final int MAX_DELTA;
  public static final int IX_NORM_TRIE_OFFSET;
  public static final int IX_EXTRA_DATA_OFFSET;
  public static final int IX_SMALL_FCD_OFFSET;
  public static final int IX_RESERVED3_OFFSET;
  public static final int IX_TOTAL_SIZE;
  public static final int MIN_CCC_LCCC_CP;
  public static final int IX_MIN_DECOMP_NO_CP;
  public static final int IX_MIN_COMP_NO_MAYBE_CP;
  public static final int IX_MIN_YES_NO;
  public static final int IX_MIN_NO_NO;
  public static final int IX_LIMIT_NO_NO;
  public static final int IX_MIN_MAYBE_YES;
  public static final int IX_MIN_YES_NO_MAPPINGS_ONLY;
  public static final int IX_MIN_NO_NO_COMP_BOUNDARY_BEFORE;
  public static final int IX_MIN_NO_NO_COMP_NO_MAYBE_CC;
  public static final int IX_MIN_NO_NO_EMPTY;
  public static final int IX_MIN_LCCC_CP;
  public static final int IX_COUNT;
  public static final int MAPPING_HAS_CCC_LCCC_WORD;
  public static final int MAPPING_HAS_RAW_MAPPING;
  public static final int MAPPING_LENGTH_MASK;
  public static final int COMP_1_LAST_TUPLE;
  public static final int COMP_1_TRIPLE;
  public static final int COMP_1_TRAIL_LIMIT;
  public static final int COMP_1_TRAIL_MASK;
  public static final int COMP_1_TRAIL_SHIFT;
  public static final int COMP_2_TRAIL_SHIFT;
  public static final int COMP_2_TRAIL_MASK;
  static final boolean $assertionsDisabled;
  public sun.text.normalizer.NormalizerImpl();
  public sun.text.normalizer.NormalizerImpl load(java.nio.ByteBuffer);
  public sun.text.normalizer.NormalizerImpl load(java.lang.String);
  public int getNorm16(int);
  public boolean isAlgorithmicNoNo(int);
  public boolean isCompNo(int);
  public boolean isDecompYes(int);
  public int getCC(int);
  public static int getCCFromNormalYesOrMaybe(int);
  public static int getCCFromYesOrMaybe(int);
  public int getCCFromYesOrMaybeCP(int);
  public int getFCD16(int);
  public boolean singleLeadMightHaveNonZeroFCD16(int);
  public int getFCD16FromNormData(int);
  public java.lang.String getDecomposition(int);
  public void decompose(java.lang.CharSequence, int, int, java.lang.StringBuilder, int);
  public int decompose(java.lang.CharSequence, int, int, sun.text.normalizer.NormalizerImpl$ReorderingBuffer);
  public void decomposeAndAppend(java.lang.CharSequence, boolean, sun.text.normalizer.NormalizerImpl$ReorderingBuffer);
  public boolean compose(java.lang.CharSequence, int, int, boolean, boolean, sun.text.normalizer.NormalizerImpl$ReorderingBuffer);
  public int composeQuickCheck(java.lang.CharSequence, int, int, boolean, boolean);
  public void composeAndAppend(java.lang.CharSequence, boolean, boolean, sun.text.normalizer.NormalizerImpl$ReorderingBuffer);
  public int makeFCD(java.lang.CharSequence, int, int, sun.text.normalizer.NormalizerImpl$ReorderingBuffer);
  public boolean hasDecompBoundaryBefore(int);
  public boolean norm16HasDecompBoundaryBefore(int);
  public boolean hasDecompBoundaryAfter(int);
  public boolean norm16HasDecompBoundaryAfter(int);
  public boolean isDecompInert(int);
  public boolean hasCompBoundaryBefore(int);
  public boolean hasCompBoundaryAfter(int, boolean);
  int getTrailCCFromCompYesAndZeroCC(int);
  public static int getDecompose(int[], java.lang.String[]);
  public static java.lang.String canonicalDecomposeWithSingleQuotation(java.lang.String);
  static {};
}
