Compiled from "BidiBase.java"
public class sun.text.bidi.BidiBase {
  public static final byte LEVEL_DEFAULT_LTR;
  public static final byte LEVEL_DEFAULT_RTL;
  public static final byte MAX_EXPLICIT_LEVEL;
  public static final byte LEVEL_OVERRIDE;
  public static final int MAP_NOWHERE;
  public static final byte LTR;
  public static final byte RTL;
  public static final byte MIXED;
  public static final short KEEP_BASE_COMBINING;
  public static final short DO_MIRRORING;
  public static final short INSERT_LRM_FOR_NUMERIC;
  public static final short REMOVE_BIDI_CONTROLS;
  public static final short OUTPUT_REVERSE;
  static final short REORDER_RUNS_ONLY;
  static final short REORDER_INVERSE_NUMBERS_AS_L;
  static final short REORDER_INVERSE_LIKE_DIRECT;
  static final short REORDER_INVERSE_FOR_NUMBERS_SPECIAL;
  static final int OPTION_INSERT_MARKS;
  static final int OPTION_REMOVE_CONTROLS;
  static final byte L;
  static final byte B;
  public static final int BIDI_PAIRED_BRACKET_TYPE;
  static final int SIMPLE_PARAS_COUNT;
  static final int LRM_BEFORE;
  static final int LRM_AFTER;
  static final int RLM_BEFORE;
  static final int RLM_AFTER;
  static final byte FOUND_L;
  static final byte FOUND_R;
  static final int ISOLATE;
  sun.text.bidi.BidiBase paraBidi;
  final sun.text.normalizer.UBiDiProps bdp;
  char[] text;
  int originalLength;
  public int length;
  int resultLength;
  boolean mayAllocateText;
  boolean mayAllocateRuns;
  byte[] dirPropsMemory;
  byte[] levelsMemory;
  byte[] dirProps;
  byte[] levels;
  boolean isInverse;
  int reorderingMode;
  int reorderingOptions;
  boolean orderParagraphsLTR;
  byte paraLevel;
  byte defaultParaLevel;
  sun.text.bidi.BidiBase$ImpTabPair impTabPair;
  byte direction;
  int flags;
  int lastArabicPos;
  int trailingWSStart;
  int paraCount;
  int[] paras_limit;
  byte[] paras_level;
  int runCount;
  sun.text.bidi.BidiRun[] runsMemory;
  sun.text.bidi.BidiRun[] runs;
  sun.text.bidi.BidiRun[] simpleRuns;
  sun.text.bidi.BidiBase$Isolate[] isolates;
  int isolateCount;
  int[] logicalToVisualRunsMap;
  boolean isGoodLogicalToVisualRunsMap;
  sun.text.bidi.BidiBase$InsertPoints insertPoints;
  int controlCount;
  static final int DirPropFlagMultiRuns;
  static final int[] DirPropFlagLR;
  static final int[] DirPropFlagE;
  static final int[] DirPropFlagO;
  static final int MASK_LTR;
  static final int MASK_RTL;
  static final int MASK_R_AL;
  static final int MASK_WS;
  static final int NOT_SEEKING_STRONG;
  static final int SEEKING_STRONG_FOR_PARA;
  static final int SEEKING_STRONG_FOR_FSI;
  static final int LOOKING_FOR_PDI;
  static final int FIRSTALLOC;
  public static final int DIRECTION_DEFAULT_RIGHT_TO_LEFT;
  static int DirPropFlag(byte);
  boolean testDirPropFlagAt(int, int);
  static final int DirPropFlagLR(byte);
  static final int DirPropFlagE(byte);
  static final int DirPropFlagO(byte);
  static final byte DirFromStrong(byte);
  static final byte NoOverride(byte);
  static boolean IsBidiControlChar(int);
  void verifyValidPara();
  void verifyValidParaOrLine();
  void verifyRange(int, int, int);
  public sun.text.bidi.BidiBase(int, int);
  void getDirPropsMemory(int);
  void getLevelsMemory(int);
  void getRunsMemory(int);
  public boolean isInverse();
  byte GetParaLevelAt(int);
  void setParaRunsOnly(char[], byte);
  void setPara(java.lang.String, byte, byte[]);
  void setPara(char[], byte, byte[]);
  public void setPara(java.text.AttributedCharacterIterator);
  public void orderParagraphsLTR(boolean);
  public byte getDirection();
  public int getLength();
  public byte getParaLevel();
  public int getCustomizedClass(int);
  public java.text.Bidi setLine(java.text.Bidi, sun.text.bidi.BidiBase, java.text.Bidi, sun.text.bidi.BidiBase, int, int);
  public byte getLevelAt(int);
  byte[] getLevels();
  public int countRuns();
  sun.text.bidi.BidiRun getVisualRun(int);
  public sun.text.bidi.BidiBase(char[], int, byte[], int, int, int);
  public boolean isMixed();
  public boolean isLeftToRight();
  public boolean isRightToLeft();
  public boolean baseIsLeftToRight();
  public int getBaseLevel();
  void getLogicalToVisualRunsMap();
  public int getRunLevel(int);
  public int getRunStart(int);
  public int getRunLimit(int);
  public static boolean requiresBidi(char[], int, int);
  public static void reorderVisually(byte[], int, java.lang.Object[], int, int);
  public java.lang.String writeReordered(int);
  public java.lang.String toString();
  static {};
}
