Compiled from "VM.java"
public class sun.jvm.hotspot.runtime.VM {
  public static void initialize(sun.jvm.hotspot.types.TypeDataBase, boolean);
  public static void initialize(sun.jvm.hotspot.types.TypeDataBase, sun.jvm.hotspot.debugger.JVMDebugger);
  public static void shutdown();
  public static void registerVMInitializedObserver(java.util.Observer);
  public static sun.jvm.hotspot.runtime.VM getVM();
  public void registerVMResumedObserver(java.util.Observer);
  public void registerVMSuspendedObserver(java.util.Observer);
  public void fireVMResumed();
  public void fireVMSuspended();
  public java.lang.String getOS();
  public java.lang.String getCPU();
  public sun.jvm.hotspot.types.Type lookupType(java.lang.String);
  public java.lang.Integer lookupIntConstant(java.lang.String);
  public static long getAddressValue(sun.jvm.hotspot.debugger.Address);
  public long getAddressSize();
  public long getOopSize();
  public long getLogAddressSize();
  public long getIntSize();
  public long getStackBias();
  public boolean isLP64();
  public int getBytesPerLong();
  public int getBytesPerWord();
  public int getMinObjAlignmentInBytes();
  public int getLogMinObjAlignmentInBytes();
  public int getHeapWordSize();
  public int getHeapOopSize();
  public int getIndexSetSize();
  public int getKlassPtrSize();
  public long alignUp(long, long);
  public long alignDown(long, long);
  public int buildIntFromShorts(short, short);
  public long buildLongFromIntsPD(int, int);
  public sun.jvm.hotspot.types.TypeDataBase getTypeDataBase();
  public sun.jvm.hotspot.memory.Universe getUniverse();
  public sun.jvm.hotspot.oops.ObjectHeap getObjectHeap();
  public sun.jvm.hotspot.memory.SystemDictionary getSystemDictionary();
  public sun.jvm.hotspot.classfile.ClassLoaderDataGraph getClassLoaderDataGraph();
  public sun.jvm.hotspot.runtime.Threads getThreads();
  public sun.jvm.hotspot.runtime.ObjectSynchronizer getObjectSynchronizer();
  public sun.jvm.hotspot.runtime.JNIHandles getJNIHandles();
  public sun.jvm.hotspot.interpreter.Interpreter getInterpreter();
  public sun.jvm.hotspot.runtime.StubRoutines getStubRoutines();
  public sun.jvm.hotspot.code.VMRegImpl getVMRegImplInfo();
  public sun.jvm.hotspot.memory.FileMapInfo getFileMapInfo();
  public sun.jvm.hotspot.runtime.Bytes getBytes();
  public boolean isBigEndian();
  public boolean isJvmtiSupported();
  public boolean isCore();
  public boolean isClientCompiler();
  public boolean isServerCompiler();
  public boolean useDerivedPointerTable();
  public sun.jvm.hotspot.code.CodeCache getCodeCache();
  public sun.jvm.hotspot.c1.Runtime1 getRuntime1();
  public boolean isDebugging();
  public sun.jvm.hotspot.debugger.JVMDebugger getDebugger();
  public boolean isJavaPCDbg(sun.jvm.hotspot.debugger.Address);
  public int getInvocationEntryBCI();
  public boolean wizardMode();
  public sun.jvm.hotspot.utilities.ReversePtrs getRevPtrs();
  public void setRevPtrs(sun.jvm.hotspot.utilities.ReversePtrs);
  public java.lang.String getVMRelease();
  public java.lang.String getVMInternalInfo();
  public int getReserveForAllocationPrefetch();
  public boolean isSharingEnabled();
  public boolean isCompressedOopsEnabled();
  public boolean isCompressedKlassPointersEnabled();
  public int getObjectAlignmentInBytes();
  public boolean getUseTLAB();
  public boolean getCommandLineBooleanFlag(java.lang.String);
  public sun.jvm.hotspot.runtime.VM$Flag[] getCommandLineFlags();
  public sun.jvm.hotspot.runtime.VM$Flag getCommandLineFlag(java.lang.String);
  public java.lang.String getSystemProperty(java.lang.String);
  public java.util.Properties getSystemProperties();
  static {};
}
