Compiled from "MethodData.java"
public class sun.jvm.hotspot.oops.MethodData extends sun.jvm.hotspot.oops.Metadata implements sun.jvm.hotspot.oops.MethodDataInterface<sun.jvm.hotspot.oops.Klass, sun.jvm.hotspot.oops.Method> {
  static int TypeProfileWidth;
  static int BciProfileWidth;
  static int MethodProfileWidth;
  static int CompileThreshold;
  static int Reason_many;
  static int Reason_none;
  static int Reason_LIMIT;
  static int Reason_RECORDED_LIMIT;
  static final int dsReasonMask;
  static final int dsRecompileBit;
  public static int sizeofMethodDataOopDesc;
  public static int cellSize;
  static java.lang.String trapReasonName(int);
  static int trapStateReason(int);
  static boolean trapStateIsRecompiled(int);
  static boolean reasonIsRecordedPerBytecode(int);
  static int trapStateAddReason(int, int);
  static int trapStateSetRecompiled(int, boolean);
  static java.lang.String formatTrapState(int);
  public sun.jvm.hotspot.oops.MethodData(sun.jvm.hotspot.debugger.Address);
  public sun.jvm.hotspot.oops.Klass getKlassAtAddress(sun.jvm.hotspot.debugger.Address);
  public sun.jvm.hotspot.oops.Method getMethodAtAddress(sun.jvm.hotspot.debugger.Address);
  public void printKlassValueOn(sun.jvm.hotspot.oops.Klass, java.io.PrintStream);
  public void printMethodValueOn(sun.jvm.hotspot.oops.Method, java.io.PrintStream);
  public boolean isMethodData();
  public sun.jvm.hotspot.oops.Method getMethod();
  public void printValueOn(java.io.PrintStream);
  public void iterateFields(sun.jvm.hotspot.oops.MetadataVisitor);
  int dataSize();
  int sizeInBytes();
  int size();
  sun.jvm.hotspot.oops.ParametersTypeData<sun.jvm.hotspot.oops.Klass, sun.jvm.hotspot.oops.Method> parametersTypeData();
  boolean outOfBounds(int);
  sun.jvm.hotspot.oops.ProfileData dataAt(int);
  int dpToDi(int);
  int firstDi();
  public sun.jvm.hotspot.oops.ProfileData firstData();
  public sun.jvm.hotspot.oops.ProfileData nextData(sun.jvm.hotspot.oops.ProfileData);
  boolean isValid(sun.jvm.hotspot.oops.ProfileData);
  sun.jvm.hotspot.oops.DataLayout limitDataPosition();
  sun.jvm.hotspot.oops.DataLayout extraDataBase();
  sun.jvm.hotspot.oops.DataLayout extraDataLimit();
  public static int extraNbCells(sun.jvm.hotspot.oops.DataLayout);
  sun.jvm.hotspot.oops.DataLayout nextExtra(sun.jvm.hotspot.oops.DataLayout);
  public void printDataOn(java.io.PrintStream);
  public byte[] orig();
  public long[] data();
  int mileageOf(sun.jvm.hotspot.oops.Method);
  public int currentMileage();
  int dumpReplayDataTypeHelper(java.io.PrintStream, int, int, int, sun.jvm.hotspot.oops.ProfileData, sun.jvm.hotspot.oops.Klass);
  int dumpReplayDataReceiverTypeHelper(java.io.PrintStream, int, int, sun.jvm.hotspot.oops.ReceiverTypeData<sun.jvm.hotspot.oops.Klass, sun.jvm.hotspot.oops.Method>);
  int dumpReplayDataCallTypeHelper(java.io.PrintStream, int, int, sun.jvm.hotspot.oops.CallTypeDataInterface<sun.jvm.hotspot.oops.Klass>);
  int dumpReplayDataExtraDataHelper(java.io.PrintStream, int, int);
  public void dumpReplayData(java.io.PrintStream);
  public void printMethodValueOn(java.lang.Object, java.io.PrintStream);
  public void printKlassValueOn(java.lang.Object, java.io.PrintStream);
  public java.lang.Object getMethodAtAddress(sun.jvm.hotspot.debugger.Address);
  public java.lang.Object getKlassAtAddress(sun.jvm.hotspot.debugger.Address);
  static {};
}
