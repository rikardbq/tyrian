Compiled from "GenerateOopMap.java"
public class sun.jvm.hotspot.oops.GenerateOopMap {
  static sun.jvm.hotspot.oops.CellTypeState[] epsilonCTS;
  static sun.jvm.hotspot.oops.CellTypeState refCTS;
  static sun.jvm.hotspot.oops.CellTypeState valCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] rCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] rrCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vrCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vvCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] rvrCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vvrCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vvvCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vvvrCTS;
  static sun.jvm.hotspot.oops.CellTypeState[] vvvvCTS;
  protected static final int bad_monitors;
  sun.jvm.hotspot.oops.Method _method;
  sun.jvm.hotspot.oops.GenerateOopMap$RetTable _rt;
  int _max_locals;
  int _max_stack;
  int _max_monitors;
  boolean _has_exceptions;
  boolean _got_error;
  java.lang.String _error_msg;
  boolean _monitor_safe;
  int _state_len;
  sun.jvm.hotspot.oops.CellTypeStateList _state;
  char[] _state_vec_buf;
  int _stack_top;
  int _monitor_top;
  int _report_for_exit_bci;
  int _matching_enter_bci;
  sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock[] _basic_blocks;
  int _gc_points;
  int _bb_count;
  sun.jvm.hotspot.utilities.BitMap _bb_hdr_bits;
  boolean _report_result;
  boolean _report_result_for_send;
  sun.jvm.hotspot.interpreter.BytecodeStream _itr_send;
  java.util.List _init_vars;
  boolean _conflict;
  int _nof_refval_conflicts;
  int[] _new_var_map;
  void initState();
  void makeContextUninitialized();
  int methodsigToEffect(sun.jvm.hotspot.oops.Symbol, boolean, sun.jvm.hotspot.oops.CellTypeStateList);
  boolean mergeStateVectors(sun.jvm.hotspot.oops.CellTypeStateList, sun.jvm.hotspot.oops.CellTypeStateList);
  void copyState(sun.jvm.hotspot.oops.CellTypeStateList, sun.jvm.hotspot.oops.CellTypeStateList);
  void mergeStateIntoBB(sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock);
  void mergeState(int, int[]);
  void setVar(int, sun.jvm.hotspot.oops.CellTypeState);
  sun.jvm.hotspot.oops.CellTypeState getVar(int);
  sun.jvm.hotspot.oops.CellTypeState pop();
  void push(sun.jvm.hotspot.oops.CellTypeState);
  sun.jvm.hotspot.oops.CellTypeState monitorPop();
  void monitorPush(sun.jvm.hotspot.oops.CellTypeState);
  sun.jvm.hotspot.oops.CellTypeStateList vars();
  sun.jvm.hotspot.oops.CellTypeStateList stack();
  sun.jvm.hotspot.oops.CellTypeStateList monitors();
  void replaceAllCTSMatches(sun.jvm.hotspot.oops.CellTypeState, sun.jvm.hotspot.oops.CellTypeState);
  void printStates(java.io.PrintStream, sun.jvm.hotspot.oops.CellTypeStateList, int);
  void printCurrentState(java.io.PrintStream, sun.jvm.hotspot.interpreter.BytecodeStream, boolean);
  void reportMonitorMismatch(java.lang.String);
  void initializeBB();
  void markBBHeadersAndCountGCPoints();
  boolean isBBHeader(int);
  int gcPoints();
  int bbCount();
  void setBBMarkBit(int);
  void clear_bbmark_bit(int);
  sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock getBasicBlockAt(int);
  sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock getBasicBlockContaining(int);
  void interpBB(sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock);
  void restoreState(sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock);
  int nextBBStartPC(sun.jvm.hotspot.oops.GenerateOopMap$BasicBlock);
  void updateBasicBlocks(int, int);
  void markBB(int, int[]);
  void markReachableCode();
  void reachableBasicblock(int, int[]);
  void doInterpretation();
  void initBasicBlocks();
  void setupMethodEntryState();
  void interpAll();
  void interp1(sun.jvm.hotspot.interpreter.BytecodeStream);
  void doExceptionEdge(sun.jvm.hotspot.interpreter.BytecodeStream);
  void checkType(sun.jvm.hotspot.oops.CellTypeState, sun.jvm.hotspot.oops.CellTypeState);
  void ppstore(sun.jvm.hotspot.oops.CellTypeState[], int);
  void ppload(sun.jvm.hotspot.oops.CellTypeState[], int);
  void ppush1(sun.jvm.hotspot.oops.CellTypeState);
  void ppush(sun.jvm.hotspot.oops.CellTypeState[]);
  void ppush(sun.jvm.hotspot.oops.CellTypeStateList);
  void ppop1(sun.jvm.hotspot.oops.CellTypeState);
  void ppop(sun.jvm.hotspot.oops.CellTypeState[]);
  void ppopAny(int);
  void pp(sun.jvm.hotspot.oops.CellTypeState[], sun.jvm.hotspot.oops.CellTypeState[]);
  void ppNewRef(sun.jvm.hotspot.oops.CellTypeState[], int);
  void ppdupswap(int, java.lang.String);
  void doLdc(int);
  void doAstore(int);
  void doJsr(int);
  void doField(boolean, boolean, int, int);
  void doMethod(boolean, boolean, int, int);
  void doMultianewarray(int, int);
  void doMonitorenter(int);
  void doMonitorexit(int);
  void doReturnMonitorCheck();
  void doCheckcast();
  sun.jvm.hotspot.oops.CellTypeState[] sigcharToEffect(char, int, sun.jvm.hotspot.oops.CellTypeState[]);
  int copyCTS(sun.jvm.hotspot.oops.CellTypeState[], sun.jvm.hotspot.oops.CellTypeState[]);
  void reportResult();
  void initializeVars();
  void addToRefInitSet(int);
  void recordRefvalConflict(int);
  void rewriteRefvalConflicts();
  java.lang.String stateVecToString(sun.jvm.hotspot.oops.CellTypeStateList, int);
  void retJumpTargetsDo(sun.jvm.hotspot.interpreter.BytecodeStream, sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure, int, int[]);
  boolean jumpTargetsDo(sun.jvm.hotspot.interpreter.BytecodeStream, sun.jvm.hotspot.oops.GenerateOopMap$JumpClosure, int[]);
  public sun.jvm.hotspot.oops.GenerateOopMap(sun.jvm.hotspot.oops.Method);
  public void computeMap();
  public void resultForBasicblock(int);
  public int maxLocals();
  public sun.jvm.hotspot.oops.Method method();
  public boolean monitorSafe();
  public int getMonitorMatch(int);
  public boolean allowRewrites();
  public boolean reportResults();
  public boolean reportInitVars();
  public boolean possibleGCPoint(sun.jvm.hotspot.interpreter.BytecodeStream);
  public void fillStackmapProlog(int);
  public void fillStackmapEpilog();
  public void fillStackmapForOpcodes(sun.jvm.hotspot.interpreter.BytecodeStream, sun.jvm.hotspot.oops.CellTypeStateList, sun.jvm.hotspot.oops.CellTypeStateList, int);
  public void fillInitVars(java.util.List);
  static {};
}
