Compiled from "ciMethodData.java"
public class sun.jvm.hotspot.ci.ciMethodData extends sun.jvm.hotspot.ci.ciMetadata implements sun.jvm.hotspot.oops.MethodDataInterface<sun.jvm.hotspot.ci.ciKlass, sun.jvm.hotspot.ci.ciMethod> {
  public sun.jvm.hotspot.ci.ciMethodData(sun.jvm.hotspot.debugger.Address);
  public sun.jvm.hotspot.ci.ciKlass getKlassAtAddress(sun.jvm.hotspot.debugger.Address);
  public sun.jvm.hotspot.ci.ciMethod getMethodAtAddress(sun.jvm.hotspot.debugger.Address);
  public void printKlassValueOn(sun.jvm.hotspot.ci.ciKlass, java.io.PrintStream);
  public void printMethodValueOn(sun.jvm.hotspot.ci.ciMethod, java.io.PrintStream);
  public byte[] orig();
  public long[] data();
  int dataSize();
  int extraDataSize();
  int state();
  int currentMileage();
  boolean outOfBounds(int);
  sun.jvm.hotspot.oops.ParametersTypeData<sun.jvm.hotspot.ci.ciKlass, sun.jvm.hotspot.ci.ciMethod> parametersTypeData();
  sun.jvm.hotspot.oops.ProfileData dataAt(int);
  int dpToDi(int);
  int firstDi();
  sun.jvm.hotspot.oops.ProfileData firstData();
  sun.jvm.hotspot.oops.ProfileData nextData(sun.jvm.hotspot.oops.ProfileData);
  boolean isValid(sun.jvm.hotspot.oops.ProfileData);
  sun.jvm.hotspot.oops.DataLayout limitDataPosition();
  sun.jvm.hotspot.oops.DataLayout extraDataBase();
  sun.jvm.hotspot.oops.DataLayout extraDataLimit();
  sun.jvm.hotspot.oops.DataLayout nextExtra(sun.jvm.hotspot.oops.DataLayout);
  public void printDataOn(java.io.PrintStream);
  int dumpReplayDataTypeHelper(java.io.PrintStream, int, int, int, sun.jvm.hotspot.oops.ProfileData, sun.jvm.hotspot.ci.ciKlass);
  int dumpReplayDataReceiverTypeHelper(java.io.PrintStream, int, int, sun.jvm.hotspot.oops.ReceiverTypeData<sun.jvm.hotspot.ci.ciKlass, sun.jvm.hotspot.ci.ciMethod>);
  int dumpReplayDataCallTypeHelper(java.io.PrintStream, int, int, sun.jvm.hotspot.oops.CallTypeDataInterface<sun.jvm.hotspot.ci.ciKlass>);
  int dumpReplayDataExtraDataHelper(java.io.PrintStream, int, int);
  public void dumpReplayData(java.io.PrintStream);
  public void printMethodValueOn(java.lang.Object, java.io.PrintStream);
  public void printKlassValueOn(java.lang.Object, java.io.PrintStream);
  public java.lang.Object getMethodAtAddress(sun.jvm.hotspot.debugger.Address);
  public java.lang.Object getKlassAtAddress(sun.jvm.hotspot.debugger.Address);
  static {};
}
