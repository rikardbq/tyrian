Compiled from "AnnotationParser.java"
public class sun.reflect.annotation.AnnotationParser {
  static final boolean $assertionsDisabled;
  public sun.reflect.annotation.AnnotationParser();
  public static java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.annotation.Annotation> parseAnnotations(byte[], jdk.internal.reflect.ConstantPool, java.lang.Class<?>);
  static java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.annotation.Annotation> parseSelectAnnotations(byte[], jdk.internal.reflect.ConstantPool, java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>...);
  public static java.lang.annotation.Annotation[][] parseParameterAnnotations(byte[], jdk.internal.reflect.ConstantPool, java.lang.Class<?>);
  static java.lang.annotation.Annotation parseAnnotation(java.nio.ByteBuffer, jdk.internal.reflect.ConstantPool, java.lang.Class<?>, boolean);
  public static java.lang.annotation.Annotation annotationForMap(java.lang.Class<? extends java.lang.annotation.Annotation>, java.util.Map<java.lang.String, java.lang.Object>);
  public static java.lang.Object parseMemberValue(java.lang.Class<?>, java.nio.ByteBuffer, jdk.internal.reflect.ConstantPool, java.lang.Class<?>);
  static java.lang.Class<?> toClass(java.lang.reflect.Type);
  public static java.lang.annotation.Annotation[] toArray(java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.annotation.Annotation>);
  static java.lang.annotation.Annotation[] getEmptyAnnotationArray();
  static {};
}
