Compiled from "AttributeValues.java"
public final class sun.font.AttributeValues implements java.lang.Cloneable {
  public static final int MASK_ALL;
  public sun.font.AttributeValues();
  public java.lang.String getFamily();
  public void setFamily(java.lang.String);
  public float getWeight();
  public void setWeight(float);
  public float getWidth();
  public void setWidth(float);
  public float getPosture();
  public void setPosture(float);
  public float getSize();
  public void setSize(float);
  public java.awt.geom.AffineTransform getTransform();
  public void setTransform(java.awt.geom.AffineTransform);
  public void setTransform(java.awt.font.TransformAttribute);
  public int getSuperscript();
  public void setSuperscript(int);
  public java.awt.Font getFont();
  public void setFont(java.awt.Font);
  public java.awt.font.GraphicAttribute getCharReplacement();
  public void setCharReplacement(java.awt.font.GraphicAttribute);
  public java.awt.Paint getForeground();
  public void setForeground(java.awt.Paint);
  public java.awt.Paint getBackground();
  public void setBackground(java.awt.Paint);
  public int getUnderline();
  public void setUnderline(int);
  public boolean getStrikethrough();
  public void setStrikethrough(boolean);
  public int getRunDirection();
  public void setRunDirection(int);
  public int getBidiEmbedding();
  public void setBidiEmbedding(int);
  public float getJustification();
  public void setJustification(float);
  public java.lang.Object getInputMethodHighlight();
  public void setInputMethodHighlight(java.text.Annotation);
  public void setInputMethodHighlight(java.awt.im.InputMethodHighlight);
  public int getInputMethodUnderline();
  public void setInputMethodUnderline(int);
  public boolean getSwapColors();
  public void setSwapColors(boolean);
  public java.awt.font.NumericShaper getNumericShaping();
  public void setNumericShaping(java.awt.font.NumericShaper);
  public int getKerning();
  public void setKerning(int);
  public float getTracking();
  public void setTracking(float);
  public int getLigatures();
  public void setLigatures(int);
  public java.awt.geom.AffineTransform getBaselineTransform();
  public java.awt.geom.AffineTransform getCharTransform();
  public static int getMask(sun.font.EAttribute);
  public static int getMask(sun.font.EAttribute...);
  public void unsetDefault();
  public void defineAll(int);
  public boolean allDefined(int);
  public boolean anyDefined(int);
  public boolean anyNonDefault(int);
  public boolean isDefined(sun.font.EAttribute);
  public boolean isNonDefault(sun.font.EAttribute);
  public void setDefault(sun.font.EAttribute);
  public void unset(sun.font.EAttribute);
  public void set(sun.font.EAttribute, sun.font.AttributeValues);
  public void set(sun.font.EAttribute, java.lang.Object);
  public java.lang.Object get(sun.font.EAttribute);
  public sun.font.AttributeValues merge(java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>);
  public sun.font.AttributeValues merge(java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>, int);
  public sun.font.AttributeValues merge(sun.font.AttributeValues);
  public sun.font.AttributeValues merge(sun.font.AttributeValues, int);
  public static sun.font.AttributeValues fromMap(java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>);
  public static sun.font.AttributeValues fromMap(java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>, int);
  public java.util.Map<java.awt.font.TextAttribute, java.lang.Object> toMap(java.util.Map<java.awt.font.TextAttribute, java.lang.Object>);
  public static boolean is16Hashtable(java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public static sun.font.AttributeValues fromSerializableHashtable(java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public java.util.Hashtable<java.lang.Object, java.lang.Object> toSerializableHashtable();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean equals(sun.font.AttributeValues);
  public sun.font.AttributeValues clone();
  public java.lang.String toString();
  public static float getJustification(java.util.Map<?, ?>);
  public static java.awt.font.NumericShaper getNumericShaping(java.util.Map<?, ?>);
  public sun.font.AttributeValues applyIMHighlight();
  public static java.awt.geom.AffineTransform getBaselineTransform(java.util.Map<?, ?>);
  public static java.awt.geom.AffineTransform getCharTransform(java.util.Map<?, ?>);
  public void updateDerivedTransforms();
  public static java.awt.geom.AffineTransform extractXRotation(java.awt.geom.AffineTransform, boolean);
  public static java.awt.geom.AffineTransform extractYRotation(java.awt.geom.AffineTransform, boolean);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
