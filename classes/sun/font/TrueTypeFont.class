Compiled from "TrueTypeFont.java"
public class sun.font.TrueTypeFont extends sun.font.FileFont {
  public static final int cmapTag;
  public static final int glyfTag;
  public static final int headTag;
  public static final int hheaTag;
  public static final int hmtxTag;
  public static final int locaTag;
  public static final int maxpTag;
  public static final int nameTag;
  public static final int postTag;
  public static final int os_2Tag;
  public static final int GDEFTag;
  public static final int GPOSTag;
  public static final int GSUBTag;
  public static final int mortTag;
  public static final int morxTag;
  public static final int fdscTag;
  public static final int fvarTag;
  public static final int featTag;
  public static final int EBLCTag;
  public static final int gaspTag;
  public static final int ttcfTag;
  public static final int v1ttTag;
  public static final int trueTag;
  public static final int ottoTag;
  public static final int MAC_PLATFORM_ID;
  public static final int MACROMAN_SPECIFIC_ID;
  public static final int MACROMAN_ENGLISH_LANG;
  public static final int MS_PLATFORM_ID;
  public static final short ENGLISH_LOCALE_ID;
  public static final int FAMILY_NAME_ID;
  public static final int FULL_NAME_ID;
  public static final int POSTSCRIPT_NAME_ID;
  sun.font.TrueTypeFont$TTDisposerRecord disposerRecord;
  int fontIndex;
  int directoryCount;
  int directoryOffset;
  int numTables;
  sun.font.TrueTypeFont$DirectoryEntry[] tableDirectory;
  int fontDataSize;
  static final java.lang.String[] encoding_mapping;
  public static final int reserved_bits1;
  public static final int reserved_bits2;
  public sun.font.TrueTypeFont(java.lang.String, java.lang.Object, int, boolean) throws java.awt.FontFormatException;
  public sun.font.TrueTypeFont(java.lang.String, java.lang.Object, int, boolean, boolean) throws java.awt.FontFormatException;
  protected boolean checkUseNatives();
  protected synchronized void close();
  int readBlock(java.nio.ByteBuffer, int, int);
  java.nio.ByteBuffer readBlock(int, int);
  byte[] readBytes(int, int);
  protected void init(int) throws java.awt.FontFormatException;
  static java.lang.String getCodePage();
  boolean supportsEncoding(java.lang.String);
  boolean supportsJA();
  java.nio.ByteBuffer getTableBuffer(int);
  protected byte[] getTableBytes(int);
  int getTableSize(int);
  int getTableOffset(int);
  sun.font.TrueTypeFont$DirectoryEntry getDirectoryEntry(int);
  boolean useEmbeddedBitmapsForSize(int);
  public java.lang.String getFullName();
  protected void setStyle();
  public int getWidth();
  public int getWeight();
  public void getStyleMetrics(float, float[], int);
  protected void initNames();
  protected java.lang.String lookupName(short, int);
  public int getFontCount();
  protected synchronized sun.font.FontScaler getScaler();
  public java.lang.String getPostscriptName();
  public java.lang.String getFontName(java.util.Locale);
  public java.lang.String getFamilyName(java.util.Locale);
  public sun.font.CharToGlyphMapper getMapper();
  protected void initAllNames(int, java.util.HashSet<java.lang.String>);
  java.lang.String[] getAllFamilyNames();
  java.lang.String[] getAllFullNames();
  java.awt.geom.Point2D$Float getGlyphPoint(long, int, int);
  public boolean useAAForPtSize(int);
  public boolean hasSupplementaryChars();
  public java.lang.String toString();
  static {};
}
