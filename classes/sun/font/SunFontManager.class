Compiled from "SunFontManager.java"
public abstract class sun.font.SunFontManager implements sun.java2d.FontSupport,sun.font.FontManagerForSGE {
  public static final int FONTFORMAT_NONE;
  public static final int FONTFORMAT_TRUETYPE;
  public static final int FONTFORMAT_TYPE1;
  public static final int FONTFORMAT_TTC;
  public static final int FONTFORMAT_COMPOSITE;
  public static final int FONTFORMAT_NATIVE;
  protected static final int CHANNELPOOLSIZE;
  protected sun.font.FileFont[] fontFileCache;
  protected java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D> fullNameToFont;
  static boolean longAddresses;
  boolean loadedAllFonts;
  boolean loadedAllFontFiles;
  java.lang.String[] jreOtherFontFiles;
  boolean noOtherJREFontFiles;
  public static java.lang.String jreLibDirName;
  public static java.lang.String jreFontDirName;
  protected java.util.HashSet<java.lang.String> registeredFontFiles;
  protected java.lang.String fontPath;
  public static boolean noType1Font;
  static java.util.HashMap<java.lang.String, sun.font.SunFontManager$FamilyDescription> platformFontMap;
  java.lang.Thread fileCloser;
  java.util.Vector<java.io.File> tmpFontFiles;
  public static sun.font.SunFontManager getInstance();
  public java.io.FilenameFilter getTrueTypeFilter();
  public java.io.FilenameFilter getType1Filter();
  public boolean usingPerAppContextComposites();
  public static final java.lang.String getJDKFontDir();
  public sun.font.TrueTypeFont getEUDCFont();
  protected sun.font.SunFontManager();
  public sun.font.Font2DHandle getNewComposite(java.lang.String, int, sun.font.Font2DHandle);
  protected void registerCompositeFont(java.lang.String, java.lang.String[], java.lang.String[], int, int[], int[], boolean);
  protected static void registerCompositeFont(java.lang.String, java.lang.String[], java.lang.String[], int, int[], int[], boolean, java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D>);
  protected sun.font.PhysicalFont addToFontList(sun.font.PhysicalFont, int);
  public sun.font.Font2D[] getRegisteredFonts();
  protected sun.font.PhysicalFont[] getPhysicalFonts();
  protected synchronized void initialiseDeferredFonts();
  protected synchronized void registerDeferredJREFonts(java.lang.String);
  public boolean isDeferredFont(java.lang.String);
  sun.font.PhysicalFont findJREDeferredFont(java.lang.String, int);
  public void registerDeferredFont(java.lang.String, java.lang.String, java.lang.String[], int, boolean, int);
  public synchronized sun.font.PhysicalFont initialiseDeferredFont(java.lang.String);
  public boolean isRegisteredFontFile(java.lang.String);
  public sun.font.PhysicalFont getRegisteredFontFile(java.lang.String);
  public sun.font.PhysicalFont registerFontFile(java.lang.String, java.lang.String[], int, boolean, int);
  public void registerFonts(java.lang.String[], java.lang.String[][], int, int, boolean, int, boolean);
  public sun.font.PhysicalFont getDefaultPhysicalFont();
  public sun.font.Font2D getDefaultLogicalFont(int);
  protected void populateFontFileNameMap(java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.lang.String>, java.util.HashMap<java.lang.String, java.util.ArrayList<java.lang.String>>, java.util.Locale);
  public java.util.HashMap<java.lang.String, sun.font.SunFontManager$FamilyDescription> populateHardcodedFileNameMap();
  sun.font.Font2D findFontFromPlatformMap(java.lang.String, int);
  protected java.lang.String[] getFontNamesFromPlatform();
  public boolean gotFontsFromPlatform();
  public java.lang.String getFileNameForFontName(java.lang.String);
  protected void registerOtherFontFiles(java.util.HashSet<java.lang.String>);
  public boolean getFamilyNamesFromPlatform(java.util.TreeMap<java.lang.String, java.lang.String>, java.util.Locale);
  public sun.font.Font2D findFont2D(java.lang.String, int, int);
  public boolean usePlatformFontMetrics();
  public int getNumFonts();
  protected abstract java.lang.String getFontPath(boolean);
  public sun.font.Font2D[] createFont2D(java.io.File, int, boolean, boolean, sun.font.CreatedFontTracker) throws java.awt.FontFormatException;
  public synchronized java.lang.String getFullNameByFileName(java.lang.String);
  public synchronized void deRegisterBadFont(sun.font.Font2D);
  public synchronized void replaceFont(sun.font.PhysicalFont, sun.font.PhysicalFont);
  public boolean maybeUsingAlternateCompositeFonts();
  public boolean usingAlternateCompositeFonts();
  public synchronized void useAlternateFontforJALocales();
  public boolean usingAlternateFontforJALocales();
  public synchronized void preferLocaleFonts();
  public synchronized void preferProportionalFonts();
  public boolean registerFont(java.awt.Font);
  public java.util.TreeMap<java.lang.String, java.lang.String> getCreatedFontFamilyNames();
  public java.awt.Font[] getCreatedFonts();
  protected java.lang.String[] getPlatformFontDirs(boolean);
  protected abstract java.lang.String[] getDefaultPlatformFont();
  protected java.lang.String[] getNativeNames(java.lang.String, java.lang.String);
  protected java.lang.String getFileNameFromPlatformName(java.lang.String);
  public sun.awt.FontConfiguration getFontConfiguration();
  public java.lang.String getPlatformFontPath(boolean);
  protected void loadFonts();
  protected void registerFontDirs(java.lang.String);
  public void registerFontsInDir(java.lang.String);
  protected void registerFontsInDir(java.lang.String, boolean, int, boolean, boolean);
  protected void registerFontDir(java.lang.String);
  public synchronized java.lang.String getDefaultFontFile();
  protected boolean useAbsoluteFontFileNames();
  protected abstract sun.awt.FontConfiguration createFontConfiguration();
  public abstract sun.awt.FontConfiguration createFontConfiguration(boolean, boolean);
  public synchronized java.lang.String getDefaultFontFaceName();
  public void loadFontFiles();
  protected void addFontToPlatformFontPath(java.lang.String);
  protected void registerFontFile(java.lang.String, java.lang.String[], int, boolean);
  protected void registerPlatformFontsUsedByFontConfiguration();
  protected void addToMissingFontFileList(java.lang.String);
  public void createCompositeFonts(java.util.concurrent.ConcurrentHashMap<java.lang.String, sun.font.Font2D>, boolean, boolean);
  public java.awt.Font[] getAllInstalledFonts();
  public java.lang.String[] getInstalledFontFamilyNames(java.util.Locale);
  protected void addNativeFontFamilyNames(java.util.TreeMap<java.lang.String, java.lang.String>, java.util.Locale);
  public void register1dot0Fonts();
  protected void getJREFontFamilyNames(java.util.TreeMap<java.lang.String, java.lang.String>, java.util.Locale);
  void addToPool(sun.font.FileFont);
  protected javax.swing.plaf.FontUIResource getFontConfigFUIR(java.lang.String, int, int);
  static {};
}
