Compiled from "StandardGlyphVector.java"
public class sun.font.StandardGlyphVector extends java.awt.font.GlyphVector {
  public static final int FLAG_USES_VERTICAL_BASELINE;
  public static final int FLAG_USES_VERTICAL_METRICS;
  public static final int FLAG_USES_ALTERNATE_ORIENTATION;
  static final boolean $assertionsDisabled;
  public sun.font.StandardGlyphVector(java.awt.Font, java.lang.String, java.awt.font.FontRenderContext);
  public sun.font.StandardGlyphVector(java.awt.Font, char[], java.awt.font.FontRenderContext);
  public sun.font.StandardGlyphVector(java.awt.Font, char[], int, int, java.awt.font.FontRenderContext);
  public sun.font.StandardGlyphVector(java.awt.Font, java.awt.font.FontRenderContext, int[], float[], int[], int);
  public void initGlyphVector(java.awt.Font, java.awt.font.FontRenderContext, int[], float[], int[], int);
  public sun.font.StandardGlyphVector(java.awt.Font, java.text.CharacterIterator, java.awt.font.FontRenderContext);
  public sun.font.StandardGlyphVector(java.awt.Font, int[], java.awt.font.FontRenderContext);
  public static sun.font.StandardGlyphVector getStandardGV(java.awt.font.GlyphVector, sun.java2d.loops.FontInfo);
  public java.awt.Font getFont();
  public java.awt.font.FontRenderContext getFontRenderContext();
  public void performDefaultLayout();
  public int getNumGlyphs();
  public int getGlyphCode(int);
  public int[] getGlyphCodes(int, int, int[]);
  public int getGlyphCharIndex(int);
  public int[] getGlyphCharIndices(int, int, int[]);
  public java.awt.geom.Rectangle2D getLogicalBounds();
  public java.awt.geom.Rectangle2D getVisualBounds();
  public java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float);
  public java.awt.Shape getOutline();
  public java.awt.Shape getOutline(float, float);
  public java.awt.Shape getGlyphOutline(int);
  public java.awt.Shape getGlyphOutline(int, float, float);
  public java.awt.geom.Point2D getGlyphPosition(int);
  public void setGlyphPosition(int, java.awt.geom.Point2D);
  public java.awt.geom.AffineTransform getGlyphTransform(int);
  public void setGlyphTransform(int, java.awt.geom.AffineTransform);
  public int getLayoutFlags();
  public float[] getGlyphPositions(int, int, float[]);
  public java.awt.Shape getGlyphLogicalBounds(int);
  public java.awt.Shape getGlyphVisualBounds(int);
  public java.awt.Rectangle getGlyphPixelBounds(int, java.awt.font.FontRenderContext, float, float);
  public java.awt.font.GlyphMetrics getGlyphMetrics(int);
  public java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int);
  public boolean equals(java.awt.font.GlyphVector);
  public int hashCode();
  public boolean equals(java.lang.Object);
  public sun.font.StandardGlyphVector copy();
  public java.lang.Object clone();
  public void setGlyphPositions(float[], int, int, int);
  public void setGlyphPositions(float[]);
  public float[] getGlyphPositions(float[]);
  public java.awt.geom.AffineTransform[] getGlyphTransforms(int, int, java.awt.geom.AffineTransform[]);
  public java.awt.geom.AffineTransform[] getGlyphTransforms();
  public void setGlyphTransforms(java.awt.geom.AffineTransform[], int, int, int);
  public void setGlyphTransforms(java.awt.geom.AffineTransform[]);
  public float[] getGlyphInfo();
  public void pixellate(java.awt.font.FontRenderContext, java.awt.geom.Point2D, java.awt.Point);
  boolean needsPositions(double[]);
  java.lang.Object setupGlyphImages(long[], float[], double[]);
  int[] getValidatedGlyphs(int[]);
  public java.lang.String toString();
  java.lang.StringBuffer appendString(java.lang.StringBuffer);
  static {};
}
