Compiled from "Krb5Context.java"
class sun.security.jgss.krb5.Krb5Context implements sun.security.jgss.spi.GSSContextSpi {
  public static final int SESSION_KEY;
  public static final int INITIATOR_SUBKEY;
  public static final int ACCEPTOR_SUBKEY;
  sun.security.krb5.internal.Ticket serviceTicket;
  sun.security.jgss.krb5.Krb5Context(sun.security.jgss.GSSCaller, sun.security.jgss.krb5.Krb5NameElement, sun.security.jgss.krb5.Krb5CredElement, int) throws org.ietf.jgss.GSSException;
  sun.security.jgss.krb5.Krb5Context(sun.security.jgss.GSSCaller, sun.security.jgss.krb5.Krb5CredElement) throws org.ietf.jgss.GSSException;
  public sun.security.jgss.krb5.Krb5Context(sun.security.jgss.GSSCaller, byte[]) throws org.ietf.jgss.GSSException;
  public final boolean isTransferable() throws org.ietf.jgss.GSSException;
  public final int getLifetime();
  public void requestLifetime(int) throws org.ietf.jgss.GSSException;
  public final void requestConf(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getConfState();
  public final void requestInteg(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getIntegState();
  public final void requestCredDeleg(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getCredDelegState();
  public final void requestMutualAuth(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getMutualAuthState();
  public final void requestReplayDet(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getReplayDetState();
  public final void requestSequenceDet(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getSequenceDetState();
  public final void requestDelegPolicy(boolean);
  public final boolean getDelegPolicyState();
  public final void requestAnonymity(boolean) throws org.ietf.jgss.GSSException;
  public final boolean getAnonymityState();
  final sun.security.jgss.krb5.CipherHelper getCipherHelper(sun.security.krb5.EncryptionKey) throws org.ietf.jgss.GSSException;
  final int incrementMySequenceNumber();
  final void resetMySequenceNumber(int);
  final void resetPeerSequenceNumber(int);
  final void setKey(int, sun.security.krb5.EncryptionKey) throws org.ietf.jgss.GSSException;
  public final int getKeySrc();
  final void setDelegCred(sun.security.jgss.krb5.Krb5CredElement);
  final void setCredDelegState(boolean);
  final void setMutualAuthState(boolean);
  final void setReplayDetState(boolean);
  final void setSequenceDetState(boolean);
  final void setConfState(boolean);
  final void setIntegState(boolean);
  final void setDelegPolicyState(boolean);
  public final void setChannelBinding(org.ietf.jgss.ChannelBinding) throws org.ietf.jgss.GSSException;
  final org.ietf.jgss.ChannelBinding getChannelBinding();
  public final org.ietf.jgss.Oid getMech();
  public final sun.security.jgss.spi.GSSNameSpi getSrcName() throws org.ietf.jgss.GSSException;
  public final sun.security.jgss.spi.GSSNameSpi getTargName() throws org.ietf.jgss.GSSException;
  public final sun.security.jgss.spi.GSSCredentialSpi getDelegCred() throws org.ietf.jgss.GSSException;
  public final boolean isInitiator();
  public final boolean isProtReady();
  public final byte[] initSecContext(java.io.InputStream, int) throws org.ietf.jgss.GSSException;
  public final boolean isEstablished();
  public final byte[] acceptSecContext(java.io.InputStream, int) throws org.ietf.jgss.GSSException;
  public final int getWrapSizeLimit(int, boolean, int) throws org.ietf.jgss.GSSException;
  public final byte[] wrap(byte[], int, int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final int wrap(byte[], int, int, byte[], int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void wrap(byte[], int, int, java.io.OutputStream, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void wrap(java.io.InputStream, java.io.OutputStream, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final byte[] unwrap(byte[], int, int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final int unwrap(byte[], int, int, byte[], int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final int unwrap(java.io.InputStream, byte[], int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void unwrap(java.io.InputStream, java.io.OutputStream, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final byte[] getMIC(byte[], int, int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void getMIC(java.io.InputStream, java.io.OutputStream, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void verifyMIC(byte[], int, int, byte[], int, int, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final void verifyMIC(java.io.InputStream, java.io.InputStream, org.ietf.jgss.MessageProp) throws org.ietf.jgss.GSSException;
  public final byte[] export() throws org.ietf.jgss.GSSException;
  public final void dispose() throws org.ietf.jgss.GSSException;
  public final java.security.Provider getProvider();
  sun.security.jgss.GSSCaller getCaller();
  public java.lang.Object inquireSecContext(java.lang.String) throws org.ietf.jgss.GSSException;
  public void setTktFlags(boolean[]);
  public void setAuthTime(java.lang.String);
  public void setAuthzData(sun.security.krb5.internal.AuthorizationData);
  static {};
}
