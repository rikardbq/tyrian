Compiled from "X509CertImpl.java"
public class sun.security.x509.X509CertImpl extends java.security.cert.X509Certificate implements sun.security.util.DerEncoder {
  public static final java.lang.String NAME;
  public static final java.lang.String INFO;
  public static final java.lang.String ALG_ID;
  public static final java.lang.String SIGNATURE;
  public static final java.lang.String SIGNED_CERT;
  public static final java.lang.String SUBJECT_DN;
  public static final java.lang.String ISSUER_DN;
  public static final java.lang.String SERIAL_ID;
  public static final java.lang.String PUBLIC_KEY;
  public static final java.lang.String VERSION;
  public static final java.lang.String SIG_ALG;
  public static final java.lang.String SIG;
  protected sun.security.x509.X509CertInfo info;
  protected sun.security.x509.AlgorithmId algId;
  protected byte[] signature;
  public sun.security.x509.X509CertImpl();
  public sun.security.x509.X509CertImpl(byte[]) throws java.security.cert.CertificateException;
  public sun.security.x509.X509CertImpl(java.io.InputStream) throws java.security.cert.CertificateException;
  public sun.security.x509.X509CertImpl(sun.security.x509.X509CertInfo);
  public sun.security.x509.X509CertImpl(sun.security.util.DerValue) throws java.security.cert.CertificateException;
  public void encode(java.io.OutputStream) throws java.security.cert.CertificateEncodingException;
  public void derEncode(java.io.OutputStream) throws java.io.IOException;
  public byte[] getEncoded() throws java.security.cert.CertificateEncodingException;
  public byte[] getEncodedInternal() throws java.security.cert.CertificateEncodingException;
  public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
  public synchronized void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
  public synchronized void verify(java.security.PublicKey, java.security.Provider) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException;
  public void sign(java.security.PrivateKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
  public void sign(java.security.PrivateKey, java.lang.String, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;
  public void sign(java.security.PrivateKey, java.security.spec.AlgorithmParameterSpec, java.lang.String, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, java.security.NoSuchProviderException, java.security.SignatureException;
  public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
  public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;
  public java.lang.Object get(java.lang.String) throws java.security.cert.CertificateParsingException;
  public void set(java.lang.String, java.lang.Object) throws java.security.cert.CertificateException, java.io.IOException;
  public void delete(java.lang.String) throws java.security.cert.CertificateException, java.io.IOException;
  public java.util.Enumeration<java.lang.String> getElements();
  public java.lang.String getName();
  public java.lang.String toString();
  public java.security.PublicKey getPublicKey();
  public int getVersion();
  public java.math.BigInteger getSerialNumber();
  public sun.security.x509.SerialNumber getSerialNumberObject();
  public java.security.Principal getSubjectDN();
  public javax.security.auth.x500.X500Principal getSubjectX500Principal();
  public java.security.Principal getIssuerDN();
  public javax.security.auth.x500.X500Principal getIssuerX500Principal();
  public java.util.Date getNotBefore();
  public java.util.Date getNotAfter();
  public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException;
  public byte[] getSignature();
  public java.lang.String getSigAlgName();
  public java.lang.String getSigAlgOID();
  public byte[] getSigAlgParams();
  public boolean[] getIssuerUniqueID();
  public boolean[] getSubjectUniqueID();
  public sun.security.x509.KeyIdentifier getAuthKeyId();
  public sun.security.x509.KeyIdentifier getSubjectKeyId();
  public sun.security.x509.AuthorityKeyIdentifierExtension getAuthorityKeyIdentifierExtension();
  public sun.security.x509.BasicConstraintsExtension getBasicConstraintsExtension();
  public sun.security.x509.CertificatePoliciesExtension getCertificatePoliciesExtension();
  public sun.security.x509.ExtendedKeyUsageExtension getExtendedKeyUsageExtension();
  public sun.security.x509.IssuerAlternativeNameExtension getIssuerAlternativeNameExtension();
  public sun.security.x509.NameConstraintsExtension getNameConstraintsExtension();
  public sun.security.x509.PolicyConstraintsExtension getPolicyConstraintsExtension();
  public sun.security.x509.PolicyMappingsExtension getPolicyMappingsExtension();
  public sun.security.x509.PrivateKeyUsageExtension getPrivateKeyUsageExtension();
  public sun.security.x509.SubjectAlternativeNameExtension getSubjectAlternativeNameExtension();
  public sun.security.x509.SubjectKeyIdentifierExtension getSubjectKeyIdentifierExtension();
  public sun.security.x509.CRLDistributionPointsExtension getCRLDistributionPointsExtension();
  public boolean hasUnsupportedCriticalExtension();
  public java.util.Set<java.lang.String> getCriticalExtensionOIDs();
  public java.util.Set<java.lang.String> getNonCriticalExtensionOIDs();
  public sun.security.x509.Extension getExtension(sun.security.util.ObjectIdentifier);
  public sun.security.x509.Extension getUnparseableExtension(sun.security.util.ObjectIdentifier);
  public byte[] getExtensionValue(java.lang.String);
  public boolean[] getKeyUsage();
  public synchronized java.util.List<java.lang.String> getExtendedKeyUsage() throws java.security.cert.CertificateParsingException;
  public static java.util.List<java.lang.String> getExtendedKeyUsage(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException;
  public int getBasicConstraints();
  public synchronized java.util.Collection<java.util.List<?>> getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException;
  public static java.util.Collection<java.util.List<?>> getSubjectAlternativeNames(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException;
  public synchronized java.util.Collection<java.util.List<?>> getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException;
  public static java.util.Collection<java.util.List<?>> getIssuerAlternativeNames(java.security.cert.X509Certificate) throws java.security.cert.CertificateParsingException;
  public sun.security.x509.AuthorityInfoAccessExtension getAuthorityInfoAccessExtension();
  public static javax.security.auth.x500.X500Principal getSubjectX500Principal(java.security.cert.X509Certificate);
  public static javax.security.auth.x500.X500Principal getIssuerX500Principal(java.security.cert.X509Certificate);
  public static byte[] getEncodedInternal(java.security.cert.Certificate) throws java.security.cert.CertificateEncodingException;
  public static sun.security.x509.X509CertImpl toImpl(java.security.cert.X509Certificate) throws java.security.cert.CertificateException;
  public static boolean isSelfIssued(java.security.cert.X509Certificate);
  public static boolean isSelfSigned(java.security.cert.X509Certificate, java.lang.String);
  public java.lang.String getFingerprint(java.lang.String);
  public static java.lang.String getFingerprint(java.lang.String, java.security.cert.X509Certificate);
}
