Compiled from "SSLSocketImpl.java"
public final class sun.security.ssl.SSLSocketImpl extends sun.security.ssl.BaseSSLSocketImpl implements sun.security.ssl.SSLTransport {
  final sun.security.ssl.SSLContextImpl sslContext;
  final sun.security.ssl.TransportContext conContext;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl);
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, sun.security.ssl.SSLConfiguration);
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.lang.String, int) throws java.io.IOException, java.net.UnknownHostException;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.net.InetAddress, int) throws java.io.IOException;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException, java.net.UnknownHostException;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.net.Socket, java.io.InputStream, boolean) throws java.io.IOException;
  sun.security.ssl.SSLSocketImpl(sun.security.ssl.SSLContextImpl, java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException;
  public void connect(java.net.SocketAddress, int) throws java.io.IOException;
  public java.lang.String[] getSupportedCipherSuites();
  public java.lang.String[] getEnabledCipherSuites();
  public void setEnabledCipherSuites(java.lang.String[]);
  public java.lang.String[] getSupportedProtocols();
  public java.lang.String[] getEnabledProtocols();
  public void setEnabledProtocols(java.lang.String[]);
  public javax.net.ssl.SSLSession getSession();
  public javax.net.ssl.SSLSession getHandshakeSession();
  public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  public void startHandshake() throws java.io.IOException;
  public void setUseClientMode(boolean);
  public boolean getUseClientMode();
  public void setNeedClientAuth(boolean);
  public boolean getNeedClientAuth();
  public void setWantClientAuth(boolean);
  public boolean getWantClientAuth();
  public void setEnableSessionCreation(boolean);
  public boolean getEnableSessionCreation();
  public boolean isClosed();
  public void close() throws java.io.IOException;
  void closeNotify(boolean) throws java.io.IOException;
  public void shutdownInput() throws java.io.IOException;
  public boolean isInputShutdown();
  public void shutdownOutput() throws java.io.IOException;
  public boolean isOutputShutdown();
  public java.io.InputStream getInputStream() throws java.io.IOException;
  public java.io.OutputStream getOutputStream() throws java.io.IOException;
  public javax.net.ssl.SSLParameters getSSLParameters();
  public void setSSLParameters(javax.net.ssl.SSLParameters);
  public java.lang.String getApplicationProtocol();
  public java.lang.String getHandshakeApplicationProtocol();
  public void setHandshakeApplicationProtocolSelector(java.util.function.BiFunction<javax.net.ssl.SSLSocket, java.util.List<java.lang.String>, java.lang.String>);
  public java.util.function.BiFunction<javax.net.ssl.SSLSocket, java.util.List<java.lang.String>, java.lang.String> getHandshakeApplicationProtocolSelector();
  void doneConnect() throws java.io.IOException;
  public void setHost(java.lang.String);
  public java.lang.String getPeerHost();
  public int getPeerPort();
  public boolean useDelegatedTask();
  public void shutdown() throws java.io.IOException;
  public java.util.Set supportedOptions();
  public java.lang.Object getOption(java.net.SocketOption) throws java.io.IOException;
  public java.net.Socket setOption(java.net.SocketOption, java.lang.Object) throws java.io.IOException;
  public void setSoTimeout(int) throws java.net.SocketException;
  public java.lang.String toString();
  public void setPerformancePreferences(int, int, int);
  public java.net.SocketAddress getRemoteSocketAddress();
  public java.net.SocketAddress getLocalSocketAddress();
  public void bind(java.net.SocketAddress) throws java.io.IOException;
  static {};
}
