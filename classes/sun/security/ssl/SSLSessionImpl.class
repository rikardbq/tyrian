Compiled from "SSLSessionImpl.java"
final class sun.security.ssl.SSLSessionImpl extends javax.net.ssl.ExtendedSSLSession {
  final boolean useExtendedMasterSecret;
  final javax.net.ssl.SNIServerName serverNameIndication;
  sun.security.ssl.SSLSessionImpl();
  sun.security.ssl.SSLSessionImpl(sun.security.ssl.HandshakeContext, sun.security.ssl.CipherSuite);
  sun.security.ssl.SSLSessionImpl(sun.security.ssl.HandshakeContext, sun.security.ssl.CipherSuite, sun.security.ssl.SessionId);
  sun.security.ssl.SSLSessionImpl(sun.security.ssl.HandshakeContext, sun.security.ssl.CipherSuite, sun.security.ssl.SessionId, long);
  sun.security.ssl.SSLSessionImpl(sun.security.ssl.SSLSessionImpl, sun.security.ssl.SessionId);
  void setMasterSecret(javax.crypto.SecretKey);
  void setResumptionMasterSecret(javax.crypto.SecretKey);
  void setPreSharedKey(javax.crypto.SecretKey);
  void addChild(sun.security.ssl.SSLSessionImpl);
  void setTicketAgeAdd(int);
  void setPskIdentity(byte[]);
  java.math.BigInteger incrTicketNonceCounter();
  javax.crypto.SecretKey getMasterSecret();
  javax.crypto.SecretKey getResumptionMasterSecret();
  synchronized javax.crypto.SecretKey getPreSharedKey();
  synchronized javax.crypto.SecretKey consumePreSharedKey();
  int getTicketAgeAdd();
  java.lang.String getIdentificationProtocol();
  synchronized byte[] consumePskIdentity();
  void setPeerCertificates(java.security.cert.X509Certificate[]);
  void setLocalCertificates(java.security.cert.X509Certificate[]);
  void setLocalPrivateKey(java.security.PrivateKey);
  void setPeerSupportedSignatureAlgorithms(java.util.Collection<sun.security.ssl.SignatureScheme>);
  void setUseDefaultPeerSignAlgs();
  sun.security.ssl.SSLSessionImpl finish();
  void setStatusResponses(java.util.List<byte[]>);
  boolean isRejoinable();
  public synchronized boolean isValid();
  public byte[] getId();
  public javax.net.ssl.SSLSessionContext getSessionContext();
  sun.security.ssl.SessionId getSessionId();
  sun.security.ssl.CipherSuite getSuite();
  void setSuite(sun.security.ssl.CipherSuite);
  boolean isSessionResumption();
  void setAsSessionResumption(boolean);
  public java.lang.String getCipherSuite();
  sun.security.ssl.ProtocolVersion getProtocolVersion();
  public java.lang.String getProtocol();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;
  public java.security.cert.Certificate[] getLocalCertificates();
  public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
  public java.security.cert.X509Certificate[] getCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
  public java.util.List<byte[]> getStatusResponses();
  public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException;
  public java.security.Principal getLocalPrincipal();
  public long getTicketCreationTime();
  public long getCreationTime();
  public long getLastAccessedTime();
  void setLastAccessedTime(long);
  public java.net.InetAddress getPeerAddress();
  public java.lang.String getPeerHost();
  public int getPeerPort();
  void setContext(sun.security.ssl.SSLSessionContextImpl);
  public synchronized void invalidate();
  public void putValue(java.lang.String, java.lang.Object);
  public java.lang.Object getValue(java.lang.String);
  public void removeValue(java.lang.String);
  public java.lang.String[] getValueNames();
  protected synchronized void expandBufferSizes();
  public synchronized int getPacketBufferSize();
  public synchronized int getApplicationBufferSize();
  synchronized void setNegotiatedMaxFragSize(int);
  synchronized int getNegotiatedMaxFragSize();
  synchronized void setMaximumPacketSize(int);
  synchronized int getMaximumPacketSize();
  public java.lang.String[] getLocalSupportedSignatureAlgorithms();
  public java.util.Collection<sun.security.ssl.SignatureScheme> getLocalSupportedSignatureSchemes();
  public java.lang.String[] getPeerSupportedSignatureAlgorithms();
  public java.util.List<javax.net.ssl.SNIServerName> getRequestedServerNames();
  public java.lang.String toString();
  static {};
}
