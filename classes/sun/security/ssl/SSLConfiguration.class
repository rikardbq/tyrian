Compiled from "SSLConfiguration.java"
final class sun.security.ssl.SSLConfiguration implements java.lang.Cloneable {
  java.security.AlgorithmConstraints userSpecifiedAlgorithmConstraints;
  java.util.List<sun.security.ssl.ProtocolVersion> enabledProtocols;
  java.util.List<sun.security.ssl.CipherSuite> enabledCipherSuites;
  sun.security.ssl.ClientAuthType clientAuthType;
  java.lang.String identificationProtocol;
  java.util.List<javax.net.ssl.SNIServerName> serverNames;
  java.util.Collection<javax.net.ssl.SNIMatcher> sniMatchers;
  java.lang.String[] applicationProtocols;
  boolean preferLocalCipherSuites;
  boolean enableRetransmissions;
  int maximumPacketSize;
  java.util.List<sun.security.ssl.SignatureScheme> signatureSchemes;
  sun.security.ssl.ProtocolVersion maximumProtocolVersion;
  boolean isClientMode;
  boolean enableSessionCreation;
  java.util.function.BiFunction<javax.net.ssl.SSLSocket, java.util.List<java.lang.String>, java.lang.String> socketAPSelector;
  java.util.function.BiFunction<javax.net.ssl.SSLEngine, java.util.List<java.lang.String>, java.lang.String> engineAPSelector;
  java.util.HashMap<javax.net.ssl.HandshakeCompletedListener, java.security.AccessControlContext> handshakeListeners;
  boolean noSniExtension;
  boolean noSniMatcher;
  static final boolean useExtendedMasterSecret;
  static final boolean allowLegacyResumption;
  static final boolean allowLegacyMasterSecret;
  static final boolean useCompatibilityMode;
  static final boolean acknowledgeCloseNotify;
  static final int maxHandshakeMessageSize;
  static final int maxCertificateChainLength;
  sun.security.ssl.SSLConfiguration(sun.security.ssl.SSLContextImpl, boolean);
  javax.net.ssl.SSLParameters getSSLParameters();
  void setSSLParameters(javax.net.ssl.SSLParameters);
  void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);
  boolean isAvailable(sun.security.ssl.SSLExtension);
  boolean isAvailable(sun.security.ssl.SSLExtension, sun.security.ssl.ProtocolVersion);
  sun.security.ssl.SSLExtension[] getEnabledExtensions(sun.security.ssl.SSLHandshake);
  sun.security.ssl.SSLExtension[] getExclusiveExtensions(sun.security.ssl.SSLHandshake, java.util.List<sun.security.ssl.SSLExtension>);
  sun.security.ssl.SSLExtension[] getEnabledExtensions(sun.security.ssl.SSLHandshake, sun.security.ssl.ProtocolVersion);
  sun.security.ssl.SSLExtension[] getEnabledExtensions(sun.security.ssl.SSLHandshake, java.util.List<sun.security.ssl.ProtocolVersion>);
  void toggleClientMode();
  public java.lang.Object clone();
  static {};
}
