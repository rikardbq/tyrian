Compiled from "UnixNativeDispatcher.java"
class sun.nio.fs.UnixNativeDispatcher {
  protected sun.nio.fs.UnixNativeDispatcher();
  static sun.nio.fs.NativeBuffer copyToNativeBuffer(sun.nio.fs.UnixPath);
  static native byte[] getcwd();
  static native int dup(int) throws sun.nio.fs.UnixException;
  static int open(sun.nio.fs.UnixPath, int, int) throws sun.nio.fs.UnixException;
  static int openat(int, byte[], int, int) throws sun.nio.fs.UnixException;
  static void close(int);
  static long fopen(sun.nio.fs.UnixPath, java.lang.String) throws sun.nio.fs.UnixException;
  static native void fclose(long) throws sun.nio.fs.UnixException;
  static native void rewind(long) throws sun.nio.fs.UnixException;
  static native int getlinelen(long) throws sun.nio.fs.UnixException;
  static void link(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static void unlink(sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static void unlinkat(int, byte[], int) throws sun.nio.fs.UnixException;
  static void mknod(sun.nio.fs.UnixPath, int, long) throws sun.nio.fs.UnixException;
  static void rename(sun.nio.fs.UnixPath, sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static void renameat(int, byte[], int, byte[]) throws sun.nio.fs.UnixException;
  static void mkdir(sun.nio.fs.UnixPath, int) throws sun.nio.fs.UnixException;
  static void rmdir(sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static byte[] readlink(sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static byte[] realpath(sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static void symlink(byte[], sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static void stat(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes) throws sun.nio.fs.UnixException;
  static int stat(sun.nio.fs.UnixPath);
  static void lstat(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileAttributes) throws sun.nio.fs.UnixException;
  static native void fstat(int, sun.nio.fs.UnixFileAttributes) throws sun.nio.fs.UnixException;
  static void fstatat(int, byte[], int, sun.nio.fs.UnixFileAttributes) throws sun.nio.fs.UnixException;
  static void chown(sun.nio.fs.UnixPath, int, int) throws sun.nio.fs.UnixException;
  static void lchown(sun.nio.fs.UnixPath, int, int) throws sun.nio.fs.UnixException;
  static native void fchown(int, int, int) throws sun.nio.fs.UnixException;
  static void chmod(sun.nio.fs.UnixPath, int) throws sun.nio.fs.UnixException;
  static native void fchmod(int, int) throws sun.nio.fs.UnixException;
  static void utimes(sun.nio.fs.UnixPath, long, long) throws sun.nio.fs.UnixException;
  static native void futimes(int, long, long) throws sun.nio.fs.UnixException;
  static long opendir(sun.nio.fs.UnixPath) throws sun.nio.fs.UnixException;
  static native long fdopendir(int) throws sun.nio.fs.UnixException;
  static native void closedir(long) throws sun.nio.fs.UnixException;
  static native byte[] readdir(long) throws sun.nio.fs.UnixException;
  static native int read(int, long, int) throws sun.nio.fs.UnixException;
  static native int write(int, long, int) throws sun.nio.fs.UnixException;
  static void access(sun.nio.fs.UnixPath, int) throws sun.nio.fs.UnixException;
  static boolean exists(sun.nio.fs.UnixPath);
  static native byte[] getpwuid(int) throws sun.nio.fs.UnixException;
  static native byte[] getgrgid(int) throws sun.nio.fs.UnixException;
  static int getpwnam(java.lang.String) throws sun.nio.fs.UnixException;
  static int getgrnam(java.lang.String) throws sun.nio.fs.UnixException;
  static void statvfs(sun.nio.fs.UnixPath, sun.nio.fs.UnixFileStoreAttributes) throws sun.nio.fs.UnixException;
  static long pathconf(sun.nio.fs.UnixPath, int) throws sun.nio.fs.UnixException;
  static native long fpathconf(int, int) throws sun.nio.fs.UnixException;
  static native byte[] strerror(int);
  static boolean openatSupported();
  static boolean futimesSupported();
  static boolean birthtimeSupported();
  static {};
}
