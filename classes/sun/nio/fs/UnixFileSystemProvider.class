Compiled from "UnixFileSystemProvider.java"
public abstract class sun.nio.fs.UnixFileSystemProvider extends sun.nio.fs.AbstractFileSystemProvider {
  public sun.nio.fs.UnixFileSystemProvider();
  sun.nio.fs.UnixFileSystem theFileSystem();
  abstract sun.nio.fs.UnixFileSystem newFileSystem(java.lang.String);
  public final java.lang.String getScheme();
  public final java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map<java.lang.String, ?>);
  public final java.nio.file.FileSystem getFileSystem(java.net.URI);
  public java.nio.file.Path getPath(java.net.URI);
  sun.nio.fs.UnixPath checkPath(java.nio.file.Path);
  public <V extends java.nio.file.attribute.FileAttributeView> V getFileAttributeView(java.nio.file.Path, java.lang.Class<V>, java.nio.file.LinkOption...);
  public <A extends java.nio.file.attribute.BasicFileAttributes> A readAttributes(java.nio.file.Path, java.lang.Class<A>, java.nio.file.LinkOption...) throws java.io.IOException;
  protected sun.nio.fs.DynamicFileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption...);
  public java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  public java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  public java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  boolean implDelete(java.nio.file.Path, boolean) throws java.io.IOException;
  public void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException;
  public void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption...) throws java.io.IOException;
  public void checkAccess(java.nio.file.Path, java.nio.file.AccessMode...) throws java.io.IOException;
  public boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException;
  public boolean isHidden(java.nio.file.Path);
  abstract java.nio.file.FileStore getFileStore(sun.nio.fs.UnixPath) throws java.io.IOException;
  public java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException;
  public void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  public java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException;
  public void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  public void createLink(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException;
  public java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException;
  public final boolean isDirectory(java.nio.file.Path);
  public final boolean isRegularFile(java.nio.file.Path);
  public final boolean exists(java.nio.file.Path);
  java.nio.file.spi.FileTypeDetector getFileTypeDetector();
  final java.nio.file.spi.FileTypeDetector chain(sun.nio.fs.AbstractFileTypeDetector...);
}
