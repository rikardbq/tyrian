Compiled from "CharsetMapping.java"
public class sun.nio.cs.CharsetMapping {
  public static final char UNMAPPABLE_DECODING;
  public static final int UNMAPPABLE_ENCODING;
  char[] b2cSB;
  char[] b2cDB1;
  char[] b2cDB2;
  int b2Min;
  int b2Max;
  int b1MinDB1;
  int b1MaxDB1;
  int b1MinDB2;
  int b1MaxDB2;
  int dbSegSize;
  char[] c2b;
  char[] c2bIndex;
  char[] b2cSupp;
  char[] c2bSupp;
  sun.nio.cs.CharsetMapping$Entry[] b2cComp;
  sun.nio.cs.CharsetMapping$Entry[] c2bComp;
  static java.util.Comparator<sun.nio.cs.CharsetMapping$Entry> comparatorBytes;
  static java.util.Comparator<sun.nio.cs.CharsetMapping$Entry> comparatorCP;
  static java.util.Comparator<sun.nio.cs.CharsetMapping$Entry> comparatorComp;
  int off;
  byte[] bb;
  public sun.nio.cs.CharsetMapping();
  public char decodeSingle(int);
  public char decodeDouble(int, int);
  public char[] decodeSurrogate(int, char[]);
  public char[] decodeComposite(sun.nio.cs.CharsetMapping$Entry, char[]);
  public int encodeChar(char);
  public int encodeSurrogate(char, char);
  public boolean isCompositeBase(sun.nio.cs.CharsetMapping$Entry);
  public int encodeComposite(sun.nio.cs.CharsetMapping$Entry);
  public static sun.nio.cs.CharsetMapping get(java.io.InputStream);
  static int findBytes(sun.nio.cs.CharsetMapping$Entry[], sun.nio.cs.CharsetMapping$Entry);
  static int findCP(sun.nio.cs.CharsetMapping$Entry[], sun.nio.cs.CharsetMapping$Entry);
  static int findComp(sun.nio.cs.CharsetMapping$Entry[], sun.nio.cs.CharsetMapping$Entry);
  void readSINGLEBYTE();
  void readINDEXC2B();
  char[] readDB(int, int, int);
  void readDOUBLEBYTE1();
  void readDOUBLEBYTE2();
  void readCOMPOSITE();
  sun.nio.cs.CharsetMapping load(java.io.InputStream);
  static {};
}
