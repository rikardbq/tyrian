Compiled from "FileChannelImpl.java"
public class sun.nio.ch.FileChannelImpl extends java.nio.channels.FileChannel {
  static final boolean $assertionsDisabled;
  public static java.nio.channels.FileChannel open(java.io.FileDescriptor, java.lang.String, boolean, boolean, boolean, java.lang.Object);
  public void setUninterruptible();
  protected void implCloseChannel() throws java.io.IOException;
  public int read(java.nio.ByteBuffer) throws java.io.IOException;
  public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
  public int write(java.nio.ByteBuffer) throws java.io.IOException;
  public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException;
  public long position() throws java.io.IOException;
  public java.nio.channels.FileChannel position(long) throws java.io.IOException;
  public long size() throws java.io.IOException;
  public java.nio.channels.FileChannel truncate(long) throws java.io.IOException;
  public void force(boolean) throws java.io.IOException;
  public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException;
  public long transferFrom(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException;
  public int read(java.nio.ByteBuffer, long) throws java.io.IOException;
  public int write(java.nio.ByteBuffer, long) throws java.io.IOException;
  public java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException;
  public static jdk.internal.misc.JavaNioAccess$BufferPool getMappedBufferPool();
  public java.nio.channels.FileLock lock(long, long, boolean) throws java.io.IOException;
  public java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;
  void release(sun.nio.ch.FileLockImpl) throws java.io.IOException;
  public java.nio.channels.SeekableByteChannel truncate(long) throws java.io.IOException;
  public java.nio.channels.SeekableByteChannel position(long) throws java.io.IOException;
  static {};
}
