Compiled from "SimpleAsynchronousFileChannelImpl.java"
public class sun.nio.ch.SimpleAsynchronousFileChannelImpl extends sun.nio.ch.AsynchronousFileChannelImpl {
  sun.nio.ch.SimpleAsynchronousFileChannelImpl(java.io.FileDescriptor, boolean, boolean, java.util.concurrent.ExecutorService);
  public static java.nio.channels.AsynchronousFileChannel open(java.io.FileDescriptor, boolean, boolean, sun.nio.ch.ThreadPool);
  public void close() throws java.io.IOException;
  public long size() throws java.io.IOException;
  public java.nio.channels.AsynchronousFileChannel truncate(long) throws java.io.IOException;
  public void force(boolean) throws java.io.IOException;
  <A> java.util.concurrent.Future<java.nio.channels.FileLock> implLock(long, long, boolean, A, java.nio.channels.CompletionHandler<java.nio.channels.FileLock, ? super A>);
  public java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException;
  protected void implRelease(sun.nio.ch.FileLockImpl) throws java.io.IOException;
  <A> java.util.concurrent.Future<java.lang.Integer> implRead(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
  <A> java.util.concurrent.Future<java.lang.Integer> implWrite(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
  static {};
}
