Compiled from "Invoker.java"
class sun.nio.ch.Invoker {
  static final boolean $assertionsDisabled;
  static void bindToGroup(sun.nio.ch.AsynchronousChannelGroupImpl);
  static sun.nio.ch.Invoker$GroupAndInvokeCount getGroupAndInvokeCount();
  static boolean isBoundToAnyGroup();
  static boolean mayInvokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount, sun.nio.ch.AsynchronousChannelGroupImpl);
  static <V, A> void invokeUnchecked(java.nio.channels.CompletionHandler<V, ? super A>, A, V, java.lang.Throwable);
  static <V, A> void invokeDirect(sun.nio.ch.Invoker$GroupAndInvokeCount, java.nio.channels.CompletionHandler<V, ? super A>, A, V, java.lang.Throwable);
  static <V, A> void invoke(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler<V, ? super A>, A, V, java.lang.Throwable);
  static <V, A> void invokeIndirectly(java.nio.channels.AsynchronousChannel, java.nio.channels.CompletionHandler<V, ? super A>, A, V, java.lang.Throwable);
  static <V, A> void invokeIndirectly(java.nio.channels.CompletionHandler<V, ? super A>, A, V, java.lang.Throwable, java.util.concurrent.Executor);
  static void invokeOnThreadInThreadPool(sun.nio.ch.Groupable, java.lang.Runnable);
  static <V, A> void invokeUnchecked(sun.nio.ch.PendingFuture<V, A>);
  static <V, A> void invoke(sun.nio.ch.PendingFuture<V, A>);
  static <V, A> void invokeIndirectly(sun.nio.ch.PendingFuture<V, A>);
  static {};
}
