Compiled from "AsynchronousFileChannelImpl.java"
abstract class sun.nio.ch.AsynchronousFileChannelImpl extends java.nio.channels.AsynchronousFileChannel {
  protected final java.util.concurrent.locks.ReadWriteLock closeLock;
  protected volatile boolean closed;
  protected final java.io.FileDescriptor fdObj;
  protected final boolean reading;
  protected final boolean writing;
  protected final java.util.concurrent.ExecutorService executor;
  protected sun.nio.ch.AsynchronousFileChannelImpl(java.io.FileDescriptor, boolean, boolean, java.util.concurrent.ExecutorService);
  final java.util.concurrent.ExecutorService executor();
  public final boolean isOpen();
  protected final void begin() throws java.io.IOException;
  protected final void end();
  protected final void end(boolean) throws java.io.IOException;
  abstract <A> java.util.concurrent.Future<java.nio.channels.FileLock> implLock(long, long, boolean, A, java.nio.channels.CompletionHandler<java.nio.channels.FileLock, ? super A>);
  public final java.util.concurrent.Future<java.nio.channels.FileLock> lock(long, long, boolean);
  public final <A> void lock(long, long, boolean, A, java.nio.channels.CompletionHandler<java.nio.channels.FileLock, ? super A>);
  final void ensureFileLockTableInitialized() throws java.io.IOException;
  final void invalidateAllLocks() throws java.io.IOException;
  protected final sun.nio.ch.FileLockImpl addToFileLockTable(long, long, boolean);
  protected final void removeFromFileLockTable(sun.nio.ch.FileLockImpl);
  protected abstract void implRelease(sun.nio.ch.FileLockImpl) throws java.io.IOException;
  final void release(sun.nio.ch.FileLockImpl) throws java.io.IOException;
  abstract <A> java.util.concurrent.Future<java.lang.Integer> implRead(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
  public final java.util.concurrent.Future<java.lang.Integer> read(java.nio.ByteBuffer, long);
  public final <A> void read(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
  abstract <A> java.util.concurrent.Future<java.lang.Integer> implWrite(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
  public final java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer, long);
  public final <A> void write(java.nio.ByteBuffer, long, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>);
}
