Compiled from "BinaryExpression.java"
public class sun.tools.tree.BinaryExpression extends sun.tools.tree.UnaryExpression {
  sun.tools.tree.Expression left;
  sun.tools.tree.BinaryExpression(int, long, sun.tools.java.Type, sun.tools.tree.Expression, sun.tools.tree.Expression);
  public sun.tools.tree.Expression order();
  public sun.tools.tree.Vset checkValue(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public boolean isConstant();
  sun.tools.tree.Expression eval(int, int);
  sun.tools.tree.Expression eval(long, long);
  sun.tools.tree.Expression eval(float, float);
  sun.tools.tree.Expression eval(double, double);
  sun.tools.tree.Expression eval(boolean, boolean);
  sun.tools.tree.Expression eval(java.lang.String, java.lang.String);
  sun.tools.tree.Expression eval();
  public sun.tools.tree.Expression inline(sun.tools.java.Environment, sun.tools.tree.Context);
  public sun.tools.tree.Expression inlineValue(sun.tools.java.Environment, sun.tools.tree.Context);
  public sun.tools.tree.Expression copyInline(sun.tools.tree.Context);
  public int costInline(int, sun.tools.java.Environment, sun.tools.tree.Context);
  void codeOperation(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  public void codeValue(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  public void print(java.io.PrintStream);
}
