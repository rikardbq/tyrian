Compiled from "Expression.java"
public class sun.tools.tree.Expression extends sun.tools.tree.Node {
  sun.tools.java.Type type;
  sun.tools.tree.Expression(int, long, sun.tools.java.Type);
  public sun.tools.tree.Expression getImplementation();
  public sun.tools.java.Type getType();
  int precedence();
  public sun.tools.tree.Expression order();
  public boolean isConstant();
  public java.lang.Object getValue();
  public boolean equals(int);
  public boolean equals(boolean);
  public boolean equals(sun.tools.java.Identifier);
  public boolean equals(java.lang.String);
  public boolean isNull();
  public boolean isNonNull();
  public boolean equalsDefault();
  sun.tools.java.Type toType(sun.tools.java.Environment, sun.tools.tree.Context);
  public boolean fitsType(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.java.Type);
  public boolean fitsType(sun.tools.java.Environment, sun.tools.java.Type);
  public sun.tools.tree.Vset checkValue(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public sun.tools.tree.Vset checkInitializer(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, sun.tools.java.Type, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public sun.tools.tree.Vset check(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public sun.tools.tree.Vset checkLHS(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public sun.tools.tree.FieldUpdater getAssigner(sun.tools.java.Environment, sun.tools.tree.Context);
  public sun.tools.tree.FieldUpdater getUpdater(sun.tools.java.Environment, sun.tools.tree.Context);
  public sun.tools.tree.Vset checkAssignOp(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>, sun.tools.tree.Expression);
  public sun.tools.tree.Vset checkAmbigName(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>, sun.tools.tree.UnaryExpression);
  public sun.tools.tree.ConditionVars checkCondition(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>);
  public void checkCondition(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.tree.Vset, java.util.Hashtable<java.lang.Object, java.lang.Object>, sun.tools.tree.ConditionVars);
  sun.tools.tree.Expression eval();
  sun.tools.tree.Expression simplify();
  public sun.tools.tree.Expression inline(sun.tools.java.Environment, sun.tools.tree.Context);
  public sun.tools.tree.Expression inlineValue(sun.tools.java.Environment, sun.tools.tree.Context);
  protected java.lang.StringBuffer inlineValueSB(sun.tools.java.Environment, sun.tools.tree.Context, java.lang.StringBuffer);
  public sun.tools.tree.Expression inlineLHS(sun.tools.java.Environment, sun.tools.tree.Context);
  public int costInline(int, sun.tools.java.Environment, sun.tools.tree.Context);
  void codeBranch(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler, sun.tools.asm.Label, boolean);
  public void codeValue(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  public void code(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  int codeLValue(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  void codeLoad(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  void codeStore(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler);
  void ensureString(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler) throws sun.tools.java.ClassNotFound, sun.tools.java.AmbiguousMember;
  void codeAppend(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler, sun.tools.java.ClassDeclaration, boolean) throws sun.tools.java.ClassNotFound, sun.tools.java.AmbiguousMember;
  void codeDup(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler, int, int);
  void codeConversion(sun.tools.java.Environment, sun.tools.tree.Context, sun.tools.asm.Assembler, sun.tools.java.Type, sun.tools.java.Type);
  public sun.tools.tree.Expression firstConstructor();
  public sun.tools.tree.Expression copyInline(sun.tools.tree.Context);
  public void print(java.io.PrintStream);
}
