Compiled from "Main.java"
public class sun.tools.jar.Main {
  java.lang.String program;
  java.io.PrintWriter out;
  java.io.PrintWriter err;
  java.lang.String fname;
  java.lang.String mname;
  java.lang.String ename;
  java.lang.String zname;
  java.lang.String rootjar;
  java.util.Map<java.lang.String, sun.tools.jar.Main$Entry> entryMap;
  java.util.Set<sun.tools.jar.Main$Entry> entries;
  java.util.Map<java.lang.String, byte[]> moduleInfos;
  java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>> pathsMap;
  java.util.Map<java.lang.Integer, java.lang.String[]> filesMap;
  boolean isMultiRelease;
  int releaseValue;
  boolean cflag;
  boolean uflag;
  boolean xflag;
  boolean tflag;
  boolean vflag;
  boolean flag0;
  boolean Mflag;
  boolean iflag;
  boolean nflag;
  boolean pflag;
  boolean dflag;
  boolean suppressDeprecateMsg;
  java.util.function.Consumer<java.io.PrintWriter> info;
  java.lang.module.ModuleDescriptor$Version moduleVersion;
  java.util.regex.Pattern modulesToHash;
  jdk.internal.module.ModuleResolution moduleResolution;
  java.lang.module.ModuleFinder moduleFinder;
  static final java.lang.String MODULE_INFO;
  static final java.lang.String MANIFEST_DIR;
  static final java.lang.String VERSIONS_DIR;
  static final java.lang.String VERSION;
  static final int VERSIONS_DIR_LENGTH;
  static java.util.Comparator<java.lang.String> ENTRYNAME_COMPARATOR;
  static java.util.Comparator<java.util.zip.ZipEntry> ENTRY_COMPARATOR;
  static final boolean $assertionsDisabled;
  static java.lang.String getMsg(java.lang.String);
  static java.lang.String formatMsg(java.lang.String, java.lang.String);
  static java.lang.String formatMsg2(java.lang.String, java.lang.String, java.lang.String);
  public sun.tools.jar.Main(java.io.PrintStream, java.io.PrintStream, java.lang.String);
  public sun.tools.jar.Main(java.io.PrintWriter, java.io.PrintWriter, java.lang.String);
  public synchronized boolean run(java.lang.String[]);
  java.util.stream.Stream<java.lang.String> filesToEntryNames(java.util.Map$Entry<java.lang.Integer, java.lang.String[]>);
  boolean parseArgs(java.lang.String[]);
  void addPackageIfNamed(java.util.Set<java.lang.String>, java.lang.String);
  void create(java.io.OutputStream, java.util.jar.Manifest) throws java.io.IOException;
  boolean update(java.io.InputStream, java.io.OutputStream, java.io.InputStream, java.util.Map<java.lang.String, byte[]>, jdk.internal.util.jar.JarIndex) throws java.io.IOException;
  void addFile(java.util.zip.ZipOutputStream, sun.tools.jar.Main$Entry) throws java.io.IOException;
  void replaceFSC(java.util.Map<java.lang.Integer, java.lang.String[]>);
  java.util.Set<java.util.zip.ZipEntry> newDirSet();
  void updateLastModifiedTime(java.util.Set<java.util.zip.ZipEntry>) throws java.io.IOException;
  boolean extract(java.io.InputStream, java.lang.String[]) throws java.io.IOException;
  void extract(java.lang.String, java.lang.String[]) throws java.io.IOException;
  java.util.zip.ZipEntry extractFile(java.io.InputStream, java.util.zip.ZipEntry) throws java.io.IOException;
  void list(java.io.InputStream, java.lang.String[]) throws java.io.IOException;
  void list(java.lang.String, java.lang.String[]) throws java.io.IOException;
  void dumpIndex(java.lang.String, jdk.internal.util.jar.JarIndex) throws java.io.IOException;
  java.util.List<java.lang.String> getJarPath(java.lang.String) throws java.io.IOException;
  void genIndex(java.lang.String, java.lang.String[]) throws java.io.IOException;
  void printEntry(java.util.zip.ZipEntry, java.lang.String[]) throws java.io.IOException;
  void printEntry(java.util.zip.ZipEntry) throws java.io.IOException;
  void usageError(java.lang.String);
  void fatalError(java.lang.Exception);
  void fatalError(java.lang.String);
  protected void output(java.lang.String);
  void error(java.lang.String);
  void warn(java.lang.String);
  public static void main(java.lang.String[]);
  static <T> java.lang.String toLowerCaseString(java.util.Collection<T>);
  static <T> java.lang.String toString(java.util.Collection<T>);
  static java.lang.String toBinaryName(java.lang.String);
  static boolean isModuleInfoEntry(java.lang.String);
  static {};
}
