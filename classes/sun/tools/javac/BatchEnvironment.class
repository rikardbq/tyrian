Compiled from "BatchEnvironment.java"
public class sun.tools.javac.BatchEnvironment extends sun.tools.java.Environment implements sun.tools.javac.ErrorConsumer {
  java.io.OutputStream out;
  protected sun.tools.java.ClassPath sourcePath;
  protected sun.tools.java.ClassPath binaryPath;
  java.util.Hashtable<sun.tools.java.Identifier, sun.tools.java.Package> packages;
  java.util.Vector<sun.tools.java.ClassDeclaration> classesOrdered;
  java.util.Hashtable<sun.tools.java.Type, sun.tools.java.ClassDeclaration> classes;
  public int flags;
  public short majorVersion;
  public short minorVersion;
  public java.io.File covFile;
  public int nerrors;
  public int nwarnings;
  public int ndeprecations;
  java.util.Vector<java.lang.Object> deprecationFiles;
  sun.tools.javac.ErrorConsumer errorConsumer;
  java.lang.String errorFileName;
  sun.tools.javac.ErrorMessage errors;
  public int errorLimit;
  public sun.tools.javac.BatchEnvironment(sun.tools.java.ClassPath);
  public sun.tools.javac.BatchEnvironment(java.io.OutputStream, sun.tools.java.ClassPath);
  public sun.tools.javac.BatchEnvironment(java.io.OutputStream, sun.tools.java.ClassPath, sun.tools.javac.ErrorConsumer);
  public sun.tools.javac.BatchEnvironment(sun.tools.java.ClassPath, sun.tools.java.ClassPath);
  public sun.tools.javac.BatchEnvironment(java.io.OutputStream, sun.tools.java.ClassPath, sun.tools.java.ClassPath);
  public sun.tools.javac.BatchEnvironment(java.io.OutputStream, sun.tools.java.ClassPath, sun.tools.java.ClassPath, sun.tools.javac.ErrorConsumer);
  static sun.tools.javac.BatchEnvironment create(java.io.OutputStream, java.lang.String, java.lang.String, java.lang.String);
  protected static sun.tools.java.ClassPath[] classPaths(java.lang.String, java.lang.String, java.lang.String);
  public int getFlags();
  public short getMajorVersion();
  public short getMinorVersion();
  public java.io.File getcovFile();
  public java.util.Enumeration<sun.tools.java.ClassDeclaration> getClasses();
  public boolean isExemptPackage(sun.tools.java.Identifier);
  public sun.tools.java.ClassDeclaration getClassDeclaration(sun.tools.java.Identifier);
  public sun.tools.java.ClassDeclaration getClassDeclaration(sun.tools.java.Type);
  public boolean classExists(sun.tools.java.Identifier);
  public sun.tools.java.Package getPackage(sun.tools.java.Identifier) throws java.io.IOException;
  public void parseFile(sun.tools.java.ClassFile) throws java.io.FileNotFoundException;
  sun.tools.java.BinaryClass loadFile(sun.tools.java.ClassFile) throws java.io.IOException;
  int loadFileFlags();
  boolean needsCompilation(java.util.Hashtable<sun.tools.java.ClassDeclaration, sun.tools.java.ClassDeclaration>, sun.tools.java.ClassDeclaration);
  public void loadDefinition(sun.tools.java.ClassDeclaration);
  public sun.tools.java.ClassDefinition makeClassDefinition(sun.tools.java.Environment, long, sun.tools.java.IdentifierToken, java.lang.String, int, sun.tools.java.IdentifierToken, sun.tools.java.IdentifierToken[], sun.tools.java.ClassDefinition);
  public sun.tools.java.MemberDefinition makeMemberDefinition(sun.tools.java.Environment, long, sun.tools.java.ClassDefinition, java.lang.String, int, sun.tools.java.Type, sun.tools.java.Identifier, sun.tools.java.IdentifierToken[], sun.tools.java.IdentifierToken[], java.lang.Object);
  public void shutdown();
  public java.lang.String errorString(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object);
  protected boolean insertError(long, java.lang.String);
  public void pushError(java.lang.String, int, java.lang.String, java.lang.String, java.lang.String);
  public void flushErrors();
  public void reportError(java.lang.Object, long, java.lang.String, java.lang.String);
  public void error(java.lang.Object, long, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object);
  public void output(java.lang.String);
}
