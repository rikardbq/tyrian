Compiled from "HtmlDocletWriter.java"
public class jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter {
  public final jdk.javadoc.internal.doclets.toolkit.util.DocPath pathToRoot;
  public final jdk.javadoc.internal.doclets.toolkit.util.DocPath path;
  public final jdk.javadoc.internal.doclets.toolkit.util.DocPath filename;
  public final jdk.javadoc.internal.doclets.formats.html.HtmlConfiguration configuration;
  protected final jdk.javadoc.internal.doclets.toolkit.util.Utils utils;
  protected final jdk.javadoc.internal.doclets.formats.html.Contents contents;
  protected final jdk.javadoc.internal.doclets.toolkit.Messages messages;
  protected final jdk.javadoc.internal.doclets.toolkit.Resources resources;
  protected final jdk.javadoc.internal.doclets.formats.html.markup.Links links;
  protected final jdk.javadoc.internal.doclets.toolkit.util.DocPaths docPaths;
  protected boolean printedAnnotationHeading;
  protected boolean printedAnnotationFieldHeading;
  jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree fixedNavDiv;
  protected java.lang.String winTitle;
  protected jdk.javadoc.internal.doclets.formats.html.markup.Script mainBodyScript;
  public jdk.javadoc.internal.doclets.formats.html.HtmlDocletWriter(jdk.javadoc.internal.doclets.formats.html.HtmlConfiguration, jdk.javadoc.internal.doclets.toolkit.util.DocPath);
  public java.lang.String replaceDocRootDir(java.lang.String);
  public jdk.javadoc.internal.doclets.toolkit.Content getAllClassesLinkScript(java.lang.String);
  protected void addTagsInfo(javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content);
  protected boolean hasSerializationOverviewTags(javax.lang.model.element.VariableElement);
  public jdk.javadoc.internal.doclets.toolkit.taglets.TagletWriter getTagletWriterInstance(boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getTargetPackageLink(javax.lang.model.element.PackageElement, java.lang.String, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getTargetModulePackageLink(javax.lang.model.element.PackageElement, java.lang.String, jdk.javadoc.internal.doclets.toolkit.Content, javax.lang.model.element.ModuleElement);
  public jdk.javadoc.internal.doclets.toolkit.Content getTargetModuleLink(java.lang.String, jdk.javadoc.internal.doclets.toolkit.Content, javax.lang.model.element.ModuleElement);
  public void printHtmlDocument(java.util.List<java.lang.String>, boolean, jdk.javadoc.internal.doclets.toolkit.Content) throws jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
  public java.lang.String getWindowTitle(java.lang.String);
  public jdk.javadoc.internal.doclets.toolkit.Content getUserHeaderFooter(boolean);
  public void addTop(jdk.javadoc.internal.doclets.toolkit.Content);
  public void addBottom(jdk.javadoc.internal.doclets.toolkit.Content);
  protected jdk.javadoc.internal.doclets.toolkit.Content getNavLinkMainTree(java.lang.String);
  public jdk.javadoc.internal.doclets.toolkit.Content getTableCaption(jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getPackageName(javax.lang.model.element.PackageElement);
  public jdk.javadoc.internal.doclets.toolkit.Content getPackageLabel(java.lang.CharSequence);
  protected jdk.javadoc.internal.doclets.toolkit.util.DocPath pathString(javax.lang.model.element.TypeElement, jdk.javadoc.internal.doclets.toolkit.util.DocPath);
  protected jdk.javadoc.internal.doclets.toolkit.util.DocPath pathString(javax.lang.model.element.PackageElement, jdk.javadoc.internal.doclets.toolkit.util.DocPath);
  public java.lang.String getPackageAnchorName(javax.lang.model.element.PackageElement);
  public jdk.javadoc.internal.doclets.toolkit.Content getPackageLink(javax.lang.model.element.PackageElement, java.lang.CharSequence);
  public jdk.javadoc.internal.doclets.toolkit.Content getPackageLink(javax.lang.model.element.PackageElement);
  public jdk.javadoc.internal.doclets.toolkit.Content getPackageLink(javax.lang.model.element.PackageElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getModuleLink(javax.lang.model.element.ModuleElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content interfaceName(javax.lang.model.element.TypeElement, boolean);
  public void addSrcLink(javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl);
  public jdk.javadoc.internal.doclets.toolkit.Content getTypeParameterLinks(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl);
  public jdk.javadoc.internal.doclets.toolkit.Content getCrossClassLink(javax.lang.model.element.TypeElement, java.lang.String, jdk.javadoc.internal.doclets.toolkit.Content, boolean, boolean);
  public boolean isClassLinkable(javax.lang.model.element.TypeElement);
  public jdk.javadoc.internal.doclets.toolkit.util.DocLink getCrossPackageLink(javax.lang.model.element.PackageElement);
  public jdk.javadoc.internal.doclets.toolkit.util.DocLink getCrossModuleLink(javax.lang.model.element.ModuleElement);
  public jdk.javadoc.internal.doclets.toolkit.Content getQualifiedClassLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.Element);
  public void addPreQualifiedClassLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getPreQualifiedClassLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, boolean);
  public void addPreQualifiedClassLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, boolean, jdk.javadoc.internal.doclets.toolkit.Content);
  public java.lang.String getEnclosingPackageName(javax.lang.model.element.TypeElement);
  public void addPreQualifiedStrongClassLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.Element, java.lang.CharSequence);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.Element, java.lang.CharSequence, boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, javax.lang.model.element.Element, java.lang.CharSequence, boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content, boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, javax.lang.model.element.Element, java.lang.CharSequence, boolean, boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content, boolean, boolean);
  public jdk.javadoc.internal.doclets.toolkit.Content getDocLink(jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl$Kind, javax.lang.model.element.TypeElement, javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content);
  public java.lang.String getAnchor(javax.lang.model.element.ExecutableElement);
  public java.lang.String getAnchor(javax.lang.model.element.ExecutableElement, boolean);
  public java.lang.String anchorName(javax.lang.model.element.Element);
  public jdk.javadoc.internal.doclets.toolkit.Content seeTagToContent(javax.lang.model.element.Element, com.sun.source.doctree.DocTree);
  public void addInlineComment(javax.lang.model.element.Element, com.sun.source.doctree.DocTree, jdk.javadoc.internal.doclets.toolkit.Content);
  public jdk.javadoc.internal.doclets.toolkit.Content getDeprecatedPhrase(javax.lang.model.element.Element);
  public void addInlineDeprecatedComment(javax.lang.model.element.Element, com.sun.source.doctree.DocTree, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addSummaryComment(javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addSummaryComment(javax.lang.model.element.Element, java.util.List<? extends com.sun.source.doctree.DocTree>, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addSummaryDeprecatedComment(javax.lang.model.element.Element, com.sun.source.doctree.DocTree, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addInlineComment(javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content);
  boolean ignoreNonInlineTag(com.sun.source.doctree.DocTree);
  boolean isAllWhiteSpace(java.lang.String);
  public jdk.javadoc.internal.doclets.toolkit.Content commentTagsToContent(com.sun.source.doctree.DocTree, javax.lang.model.element.Element, java.util.List<? extends com.sun.source.doctree.DocTree>, boolean);
  public boolean isCoreClass(javax.lang.model.element.TypeElement);
  public void addAnnotationInfo(javax.lang.model.element.PackageElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addReceiverAnnotationInfo(javax.lang.model.element.ExecutableElement, java.util.List<javax.lang.model.element.AnnotationMirror>, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addReceiverAnnotationInfo(javax.lang.model.element.ExecutableElement, javax.lang.model.type.TypeMirror, java.util.List<? extends javax.lang.model.element.AnnotationMirror>, jdk.javadoc.internal.doclets.toolkit.Content);
  public void addAnnotationInfo(javax.lang.model.element.Element, jdk.javadoc.internal.doclets.toolkit.Content);
  public boolean addAnnotationInfo(int, javax.lang.model.element.Element, javax.lang.model.element.VariableElement, jdk.javadoc.internal.doclets.toolkit.Content);
  public java.util.List<jdk.javadoc.internal.doclets.toolkit.Content> getAnnotations(int, java.util.List<? extends javax.lang.model.element.AnnotationMirror>, boolean, boolean);
  protected jdk.javadoc.internal.doclets.formats.html.markup.TableHeader getPackageTableHeader();
  protected jdk.javadoc.internal.doclets.formats.html.markup.Script getWinTitleScript();
  public jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree getBody(boolean, java.lang.String);
  jdk.javadoc.internal.doclets.formats.html.markup.Script getMainBodyScript();
  static {};
}
