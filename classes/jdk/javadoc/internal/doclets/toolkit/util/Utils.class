Compiled from "Utils.java"
public class jdk.javadoc.internal.doclets.toolkit.util.Utils {
  public final jdk.javadoc.internal.doclets.toolkit.BaseConfiguration configuration;
  public final jdk.javadoc.internal.doclets.toolkit.Messages messages;
  public final com.sun.source.util.DocTrees docTrees;
  public final javax.lang.model.util.Elements elementUtils;
  public final javax.lang.model.util.Types typeUtils;
  public final jdk.javadoc.internal.doclets.toolkit.util.JavaScriptScanner javaScriptScanner;
  java.util.EnumSet<javax.lang.model.element.ElementKind> nestedKinds;
  public jdk.javadoc.internal.doclets.toolkit.util.Utils(jdk.javadoc.internal.doclets.toolkit.BaseConfiguration);
  public javax.lang.model.type.TypeMirror getSymbol(java.lang.String);
  public javax.lang.model.type.TypeMirror getObjectType();
  public javax.lang.model.type.TypeMirror getExceptionType();
  public javax.lang.model.type.TypeMirror getErrorType();
  public javax.lang.model.type.TypeMirror getSerializableType();
  public javax.lang.model.type.TypeMirror getExternalizableType();
  public javax.lang.model.type.TypeMirror getIllegalArgumentExceptionType();
  public javax.lang.model.type.TypeMirror getNullPointerExceptionType();
  public javax.lang.model.type.TypeMirror getDeprecatedType();
  public javax.lang.model.type.TypeMirror getFunctionalInterface();
  public java.util.List<javax.lang.model.element.Element> excludeDeprecatedMembers(java.util.List<? extends javax.lang.model.element.Element>);
  public javax.lang.model.element.ExecutableElement findMethod(javax.lang.model.element.TypeElement, javax.lang.model.element.ExecutableElement);
  public boolean isSubclassOf(javax.lang.model.element.TypeElement, javax.lang.model.element.TypeElement);
  public boolean executableMembersEqual(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement);
  public boolean isCoreClass(javax.lang.model.element.TypeElement);
  public javax.tools.JavaFileManager$Location getLocationForPackage(javax.lang.model.element.PackageElement);
  public javax.tools.JavaFileManager$Location getLocationForModule(javax.lang.model.element.ModuleElement);
  public boolean isAnnotated(javax.lang.model.type.TypeMirror);
  public boolean isAnnotated(javax.lang.model.element.Element);
  public boolean isAnnotationType(javax.lang.model.element.Element);
  public boolean isClass(javax.lang.model.element.Element);
  public boolean isConstructor(javax.lang.model.element.Element);
  public boolean isEnum(javax.lang.model.element.Element);
  boolean isEnumConstant(javax.lang.model.element.Element);
  public boolean isField(javax.lang.model.element.Element);
  public boolean isInterface(javax.lang.model.element.Element);
  public boolean isMethod(javax.lang.model.element.Element);
  public boolean isModule(javax.lang.model.element.Element);
  public boolean isPackage(javax.lang.model.element.Element);
  public boolean isAbstract(javax.lang.model.element.Element);
  public boolean isDefault(javax.lang.model.element.Element);
  public boolean isPackagePrivate(javax.lang.model.element.Element);
  public boolean isPrivate(javax.lang.model.element.Element);
  public boolean isProtected(javax.lang.model.element.Element);
  public boolean isPublic(javax.lang.model.element.Element);
  public boolean isProperty(java.lang.String);
  public java.lang.String getPropertyName(java.lang.String);
  public java.lang.String getPropertyLabel(java.lang.String);
  public boolean isOverviewElement(javax.lang.model.element.Element);
  public boolean isStatic(javax.lang.model.element.Element);
  public boolean isSerializable(javax.lang.model.element.TypeElement);
  public boolean isExternalizable(javax.lang.model.element.TypeElement);
  public java.util.SortedSet<javax.lang.model.element.VariableElement> serializableFields(javax.lang.model.element.TypeElement);
  public java.util.SortedSet<javax.lang.model.element.ExecutableElement> serializationMethods(javax.lang.model.element.TypeElement);
  public boolean definesSerializableFields(javax.lang.model.element.TypeElement);
  public java.lang.String modifiersToString(javax.lang.model.element.Element, boolean);
  public boolean isFunctionalInterface(javax.lang.model.element.AnnotationMirror);
  public boolean isNoType(javax.lang.model.type.TypeMirror);
  public boolean isOrdinaryClass(javax.lang.model.element.TypeElement);
  public boolean isError(javax.lang.model.element.TypeElement);
  public boolean isException(javax.lang.model.element.TypeElement);
  public boolean isPrimitive(javax.lang.model.type.TypeMirror);
  public boolean isExecutableElement(javax.lang.model.element.Element);
  public boolean isVariableElement(javax.lang.model.element.Element);
  public boolean isTypeElement(javax.lang.model.element.Element);
  public java.lang.String signature(javax.lang.model.element.ExecutableElement);
  public java.lang.String flatSignature(javax.lang.model.element.ExecutableElement);
  public java.lang.String makeSignature(javax.lang.model.element.ExecutableElement, boolean);
  public java.lang.String makeSignature(javax.lang.model.element.ExecutableElement, boolean, boolean);
  public java.lang.String getTypeSignature(javax.lang.model.type.TypeMirror, boolean, boolean);
  public boolean isArrayType(javax.lang.model.type.TypeMirror);
  public boolean isDeclaredType(javax.lang.model.type.TypeMirror);
  public boolean isErrorType(javax.lang.model.type.TypeMirror);
  public boolean isIntersectionType(javax.lang.model.type.TypeMirror);
  public boolean isTypeParameterElement(javax.lang.model.element.Element);
  public boolean isTypeVariable(javax.lang.model.type.TypeMirror);
  public boolean isVoid(javax.lang.model.type.TypeMirror);
  public boolean isWildCard(javax.lang.model.type.TypeMirror);
  public boolean ignoreBounds(javax.lang.model.type.TypeMirror);
  public java.util.List<? extends javax.lang.model.type.TypeMirror> getBounds(javax.lang.model.element.TypeParameterElement);
  public javax.lang.model.type.TypeMirror getReturnType(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.type.TypeMirror overriddenType(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.type.TypeMirror getSuperType(javax.lang.model.element.TypeElement);
  public javax.lang.model.element.TypeElement overriddenClass(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.element.ExecutableElement overriddenMethod(javax.lang.model.element.ExecutableElement);
  public java.util.SortedSet<javax.lang.model.element.TypeElement> getTypeElementsAsSortedSet(java.lang.Iterable<javax.lang.model.element.TypeElement>);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getSerialDataTrees(javax.lang.model.element.ExecutableElement);
  public javax.tools.FileObject getFileObject(javax.lang.model.element.TypeElement);
  public javax.lang.model.type.TypeMirror getDeclaredType(javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror);
  public javax.lang.model.type.TypeMirror getDeclaredType(java.util.Collection<javax.lang.model.type.TypeMirror>, javax.lang.model.element.TypeElement, javax.lang.model.type.TypeMirror);
  public java.util.Set<javax.lang.model.type.TypeMirror> getAllInterfaces(javax.lang.model.element.TypeElement);
  public javax.lang.model.element.TypeElement findClassInPackageElement(javax.lang.model.element.PackageElement, java.lang.String);
  public javax.lang.model.element.TypeElement findClass(javax.lang.model.element.Element, java.lang.String);
  public java.lang.String quote(java.lang.String);
  public java.lang.String parsePackageName(javax.lang.model.element.PackageElement);
  public java.lang.String replaceText(java.lang.String, java.lang.String, java.lang.String);
  public boolean isDocumentedAnnotation(javax.lang.model.element.TypeElement);
  public boolean isLinkable(javax.lang.model.element.TypeElement);
  public javax.lang.model.element.TypeElement asTypeElement(javax.lang.model.type.TypeMirror);
  public javax.lang.model.type.TypeMirror getComponentType(javax.lang.model.type.TypeMirror);
  public java.lang.String getDimension(javax.lang.model.type.TypeMirror);
  public javax.lang.model.element.TypeElement getSuperClass(javax.lang.model.element.TypeElement);
  public javax.lang.model.element.TypeElement getFirstVisibleSuperClassAsTypeElement(javax.lang.model.element.TypeElement);
  public javax.lang.model.type.TypeMirror getFirstVisibleSuperClass(javax.lang.model.type.TypeMirror);
  public javax.lang.model.type.TypeMirror getFirstVisibleSuperClass(javax.lang.model.element.TypeElement);
  public java.lang.String getTypeElementName(javax.lang.model.element.TypeElement, boolean);
  public java.lang.String getTypeName(javax.lang.model.type.TypeMirror, boolean);
  public java.lang.String replaceTabs(java.lang.String);
  public java.lang.CharSequence normalizeNewlines(java.lang.CharSequence);
  public void setEnumDocumentation(javax.lang.model.element.TypeElement);
  public static java.lang.String toUpperCase(java.lang.String);
  public static java.lang.String toLowerCase(java.lang.String);
  public boolean isDeprecated(javax.lang.model.element.Element);
  public boolean isDeprecatedForRemoval(javax.lang.model.element.Element);
  public java.lang.String propertyName(javax.lang.model.element.ExecutableElement);
  public boolean hasHiddenTag(javax.lang.model.element.Element);
  public boolean isSimpleOverride(javax.lang.model.element.ExecutableElement);
  public java.util.SortedSet<javax.lang.model.element.TypeElement> filterOutPrivateClasses(java.lang.Iterable<javax.lang.model.element.TypeElement>, boolean);
  public boolean elementsEqual(javax.lang.model.element.Element, javax.lang.model.element.Element);
  public int compareStrings(java.lang.String, java.lang.String);
  public int compareCaseCompare(java.lang.String, java.lang.String);
  public java.util.Comparator<javax.lang.model.element.Element> makeModuleComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makeAllClassesComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makePackageComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makeDeprecatedComparator();
  public java.util.Comparator<com.sun.source.doctree.SerialFieldTree> makeSerialFieldTreeComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makeGeneralPurposeComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makeOverrideUseComparator();
  public java.util.Comparator<javax.lang.model.element.Element> makeIndexUseComparator();
  public java.util.Comparator<javax.lang.model.type.TypeMirror> makeTypeMirrorClassUseComparator();
  public java.util.Comparator<javax.lang.model.type.TypeMirror> makeTypeMirrorIndexUseComparator();
  public java.lang.String getQualifiedTypeName(javax.lang.model.type.TypeMirror);
  public java.lang.String getFullyQualifiedName(javax.lang.model.element.Element);
  public java.lang.String getFullyQualifiedName(javax.lang.model.element.Element, boolean);
  public java.util.Comparator<javax.lang.model.element.Element> makeClassUseComparator();
  public java.util.Comparator<jdk.javadoc.internal.doclets.formats.html.SearchIndexItem> makeTypeSearchIndexComparator();
  public java.util.Comparator<jdk.javadoc.internal.doclets.formats.html.SearchIndexItem> makeGenericSearchIndexComparator();
  public java.lang.Iterable<javax.lang.model.element.TypeElement> getEnclosedTypeElements(javax.lang.model.element.PackageElement);
  public java.util.List<javax.lang.model.element.Element> getAnnotationMembers(javax.lang.model.element.TypeElement);
  public java.util.List<javax.lang.model.element.Element> getAnnotationFields(javax.lang.model.element.TypeElement);
  java.util.List<javax.lang.model.element.Element> getAnnotationFieldsUnfiltered(javax.lang.model.element.TypeElement);
  public java.util.List<javax.lang.model.element.Element> getAnnotationMethods(javax.lang.model.element.TypeElement);
  public java.util.List<javax.lang.model.element.TypeElement> getAnnotationTypes(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getAnnotationTypesUnfiltered(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.VariableElement> getFields(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.VariableElement> getFieldsUnfiltered(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getClasses(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getClassesUnfiltered(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.ExecutableElement> getConstructors(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.ExecutableElement> getMethods(javax.lang.model.element.Element);
  java.util.List<javax.lang.model.element.ExecutableElement> getMethodsUnfiltered(javax.lang.model.element.Element);
  public int getOrdinalValue(javax.lang.model.element.VariableElement);
  public java.util.Map<javax.lang.model.element.ModuleElement, java.util.Set<javax.lang.model.element.PackageElement>> getModulePackageMap();
  public java.util.Map<javax.lang.model.element.ModuleElement, java.lang.String> getDependentModules(javax.lang.model.element.ModuleElement);
  public java.lang.String getModifiers(javax.lang.model.element.ModuleElement$RequiresDirective);
  public long getLineNumber(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.ExecutableElement> convertToExecutableElement(java.util.List<javax.lang.model.element.Element>);
  public java.util.List<javax.lang.model.element.TypeElement> convertToTypeElement(java.util.List<javax.lang.model.element.Element>);
  public java.util.List<javax.lang.model.element.VariableElement> convertToVariableElement(java.util.List<javax.lang.model.element.Element>);
  public java.util.List<javax.lang.model.element.TypeElement> getInterfaces(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getInterfacesUnfiltered(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.Element> getEnumConstants(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getEnums(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getEnumsUnfiltered(javax.lang.model.element.Element);
  public java.util.SortedSet<javax.lang.model.element.TypeElement> getAllClassesUnfiltered(javax.lang.model.element.Element);
  public java.util.SortedSet<javax.lang.model.element.TypeElement> getAllClasses(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getInnerClasses(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getInnerClassesUnfiltered(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getOrdinaryClasses(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getErrors(javax.lang.model.element.Element);
  public java.util.List<javax.lang.model.element.TypeElement> getExceptions(javax.lang.model.element.Element);
  java.util.List<javax.lang.model.element.Element> getItems(javax.lang.model.element.Element, boolean, javax.lang.model.element.ElementKind);
  void recursiveGetItems(java.util.Collection<javax.lang.model.element.Element>, javax.lang.model.element.Element, boolean, javax.lang.model.element.ElementKind...);
  protected boolean shouldDocument(javax.lang.model.element.Element);
  public java.lang.String getSimpleName(javax.lang.model.element.Element);
  public javax.lang.model.element.TypeElement getEnclosingTypeElement(javax.lang.model.element.Element);
  public java.lang.String constantValueExpresion(javax.lang.model.element.VariableElement);
  public boolean isEnclosingPackageIncluded(javax.lang.model.element.TypeElement);
  public boolean isIncluded(javax.lang.model.element.Element);
  public boolean isSpecified(javax.lang.model.element.Element);
  public java.lang.String getPackageName(javax.lang.model.element.PackageElement);
  public java.lang.String getModuleName(javax.lang.model.element.ModuleElement);
  public boolean isAttribute(com.sun.source.doctree.DocTree);
  public boolean isAuthor(com.sun.source.doctree.DocTree);
  public boolean isComment(com.sun.source.doctree.DocTree);
  public boolean isDeprecated(com.sun.source.doctree.DocTree);
  public boolean isDocComment(com.sun.source.doctree.DocTree);
  public boolean isDocRoot(com.sun.source.doctree.DocTree);
  public boolean isEndElement(com.sun.source.doctree.DocTree);
  public boolean isEntity(com.sun.source.doctree.DocTree);
  public boolean isErroneous(com.sun.source.doctree.DocTree);
  public boolean isException(com.sun.source.doctree.DocTree);
  public boolean isIdentifier(com.sun.source.doctree.DocTree);
  public boolean isInheritDoc(com.sun.source.doctree.DocTree);
  public boolean isLink(com.sun.source.doctree.DocTree);
  public boolean isLinkPlain(com.sun.source.doctree.DocTree);
  public boolean isLiteral(com.sun.source.doctree.DocTree);
  public boolean isOther(com.sun.source.doctree.DocTree);
  public boolean isParam(com.sun.source.doctree.DocTree);
  public boolean isReference(com.sun.source.doctree.DocTree);
  public boolean isReturn(com.sun.source.doctree.DocTree);
  public boolean isSee(com.sun.source.doctree.DocTree);
  public boolean isSerial(com.sun.source.doctree.DocTree);
  public boolean isSerialData(com.sun.source.doctree.DocTree);
  public boolean isSerialField(com.sun.source.doctree.DocTree);
  public boolean isSince(com.sun.source.doctree.DocTree);
  public boolean isStartElement(com.sun.source.doctree.DocTree);
  public boolean isText(com.sun.source.doctree.DocTree);
  public boolean isThrows(com.sun.source.doctree.DocTree);
  public boolean isUnknownBlockTag(com.sun.source.doctree.DocTree);
  public boolean isUnknownInlineTag(com.sun.source.doctree.DocTree);
  public boolean isValue(com.sun.source.doctree.DocTree);
  public boolean isVersion(com.sun.source.doctree.DocTree);
  public jdk.javadoc.internal.doclets.toolkit.util.CommentHelper getCommentHelper(javax.lang.model.element.Element);
  public void removeCommentHelper(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> filteredList(java.util.List<? extends com.sun.source.doctree.DocTree>, com.sun.source.doctree.DocTree$Kind...);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getBlockTags(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getBlockTags(javax.lang.model.element.Element, com.sun.source.doctree.DocTree$Kind...);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getBlockTags(javax.lang.model.element.Element, java.lang.String);
  public boolean hasBlockTag(javax.lang.model.element.Element, com.sun.source.doctree.DocTree$Kind);
  public boolean hasBlockTag(javax.lang.model.element.Element, com.sun.source.doctree.DocTree$Kind, java.lang.String);
  public com.sun.source.util.TreePath getTreePath(javax.lang.model.element.Element);
  public com.sun.source.doctree.DocCommentTree getDocCommentTree0(javax.lang.model.element.Element);
  public void checkJavaScriptInOption(java.lang.String, java.lang.String);
  boolean isValidDuo(jdk.javadoc.internal.doclets.toolkit.CommentUtils$DocCommentDuo);
  public com.sun.source.doctree.DocCommentTree getDocCommentTree(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getPreamble(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getFullBody(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getBody(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getDeprecatedTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getProvidesTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getSeeTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getSerialTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getSerialFieldTrees(javax.lang.model.element.VariableElement);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getThrowsTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getTypeParamTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getParamTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getReturnTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getUsesTrees(javax.lang.model.element.Element);
  public java.util.List<? extends com.sun.source.doctree.DocTree> getFirstSentenceTrees(javax.lang.model.element.Element);
  public javax.lang.model.element.ModuleElement containingModule(javax.lang.model.element.Element);
  public javax.lang.model.element.PackageElement containingPackage(javax.lang.model.element.Element);
  public javax.lang.model.element.TypeElement getTopMostContainingTypeElement(javax.lang.model.element.Element);
}
