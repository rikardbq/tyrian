Compiled from "VisibleMemberTable.java"
public class jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable {
  final javax.lang.model.element.TypeElement te;
  final javax.lang.model.element.TypeElement parent;
  final jdk.javadoc.internal.doclets.toolkit.BaseConfiguration config;
  final jdk.javadoc.internal.doclets.toolkit.util.Utils utils;
  final jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberCache mcache;
  java.util.Map<javax.lang.model.element.ExecutableElement, jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$OverridingMethodInfo> overriddenMethodTable;
  java.util.Map<javax.lang.model.element.ExecutableElement, java.lang.ref.SoftReference<jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$ImplementedMethods>> implementMethodsFinders;
  protected jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable(javax.lang.model.element.TypeElement, jdk.javadoc.internal.doclets.toolkit.BaseConfiguration, jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberCache);
  java.util.List<? extends javax.lang.model.element.Element> getExtraMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  java.util.List<jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable> getAllSuperclasses();
  java.util.List<jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable> getAllSuperinterfaces();
  public java.util.List<? extends javax.lang.model.element.Element> getAllVisibleMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  public java.util.List<? extends javax.lang.model.element.Element> getVisibleMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind, java.util.function.Predicate<javax.lang.model.element.Element>);
  public java.util.List<? extends javax.lang.model.element.Element> getVisibleMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  public java.util.List<? extends javax.lang.model.element.Element> getMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  public javax.lang.model.element.ExecutableElement getOverriddenMethod(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.element.ExecutableElement getsimplyOverriddenMethod(javax.lang.model.element.ExecutableElement);
  public java.util.Set<javax.lang.model.element.TypeElement> getVisibleTypeElements();
  public boolean hasVisibleMembers();
  public boolean hasVisibleMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  public javax.lang.model.element.VariableElement getPropertyField(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.element.ExecutableElement getPropertyGetter(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.element.ExecutableElement getPropertySetter(javax.lang.model.element.ExecutableElement);
  boolean isUndocumentedEnclosure(javax.lang.model.element.TypeElement);
  void computeVisibleMembers(jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$LocalMemberTable, jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$Kind);
  boolean isEnclosureInterface(javax.lang.model.element.Element);
  boolean allowInheritedMethods(javax.lang.model.element.ExecutableElement, java.util.Map<javax.lang.model.element.ExecutableElement, java.util.List<javax.lang.model.element.ExecutableElement>>, jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable$LocalMemberTable);
  public java.util.List<javax.lang.model.element.ExecutableElement> getImplementedMethods(javax.lang.model.element.ExecutableElement);
  public javax.lang.model.type.TypeMirror getImplementedMethodHolder(javax.lang.model.element.ExecutableElement, javax.lang.model.element.ExecutableElement);
}
