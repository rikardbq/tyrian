Compiled from "ArgumentAcceptingOptionSpec.java"
public abstract class jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> extends jdk.internal.joptsimple.AbstractOptionSpec<V> {
  jdk.internal.joptsimple.ArgumentAcceptingOptionSpec(java.lang.String, boolean);
  jdk.internal.joptsimple.ArgumentAcceptingOptionSpec(java.util.List<java.lang.String>, boolean, java.lang.String);
  public final <T> jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<T> ofType(java.lang.Class<T>);
  public final <T> jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<T> withValuesConvertedBy(jdk.internal.joptsimple.ValueConverter<T>);
  public final jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> describedAs(java.lang.String);
  public final jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> withValuesSeparatedBy(char);
  public final jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> withValuesSeparatedBy(java.lang.String);
  public final jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> defaultsTo(V, V...);
  public jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> defaultsTo(V[]);
  public jdk.internal.joptsimple.ArgumentAcceptingOptionSpec<V> required();
  public boolean isRequired();
  final void handleOption(jdk.internal.joptsimple.OptionParser, jdk.internal.joptsimple.ArgumentList, jdk.internal.joptsimple.OptionSet, java.lang.String);
  protected void addArguments(jdk.internal.joptsimple.OptionSet, java.lang.String);
  protected abstract void detectOptionArgument(jdk.internal.joptsimple.OptionParser, jdk.internal.joptsimple.ArgumentList, jdk.internal.joptsimple.OptionSet);
  protected final V convert(java.lang.String);
  protected boolean canConvertArgument(java.lang.String);
  protected boolean isArgumentOfNumberType();
  public boolean acceptsArguments();
  public boolean requiresArgument();
  public java.lang.String argumentDescription();
  public java.lang.String argumentTypeIndicator();
  public java.util.List<V> defaultValues();
  public boolean equals(java.lang.Object);
  public int hashCode();
}
