Compiled from "Utils.java"
public final class jdk.internal.net.http.common.Utils {
  public static final boolean ASSERTIONSENABLED;
  public static final boolean DEBUG;
  public static final boolean DEBUG_WS;
  public static final boolean DEBUG_HPACK;
  public static final boolean TESTING;
  public static final boolean isHostnameVerificationDisabled;
  public static final int BUFSIZE;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> ACCEPT_ALL;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> ALLOWED_HEADERS;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> VALIDATE_USER_HEADER;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> PROXY_TUNNEL_FILTER;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> PROXY_FILTER;
  public static final java.util.function.BiPredicate<java.lang.String, java.lang.String> NO_PROXY_HEADERS_FILTER;
  public static final java.nio.ByteBuffer EMPTY_BYTEBUFFER;
  public static final java.nio.ByteBuffer[] EMPTY_BB_ARRAY;
  public static final java.util.List<java.nio.ByteBuffer> EMPTY_BB_LIST;
  static final boolean $assertionsDisabled;
  public static <T> java.util.concurrent.CompletableFuture<T> wrapForDebug(jdk.internal.net.http.common.Logger, java.lang.String, java.util.concurrent.CompletableFuture<T>);
  public static boolean proxyHasDisabledSchemes(boolean);
  public static java.lang.IllegalArgumentException newIAE(java.lang.String, java.lang.Object...);
  public static java.nio.ByteBuffer getBuffer();
  public static java.lang.Throwable getCompletionCause(java.lang.Throwable);
  public static java.io.IOException getIOException(java.lang.Throwable);
  public static java.lang.Throwable wrapWithExtraDetail(java.lang.Throwable, java.util.function.Supplier<java.lang.String>);
  public static java.net.URLPermission permissionForProxy(java.net.InetSocketAddress);
  public static java.net.URLPermission permissionForServer(java.net.URI, java.lang.String, java.util.stream.Stream<java.lang.String>);
  public static boolean isValidName(java.lang.String);
  public static jdk.internal.net.http.common.Utils$ServerName getServerName(java.net.InetSocketAddress);
  public static boolean isValidValue(java.lang.String);
  public static int getIntegerNetProperty(java.lang.String, int);
  public static java.lang.String getNetProperty(java.lang.String);
  public static boolean getBooleanProperty(java.lang.String, boolean);
  public static java.lang.String getProperty(java.lang.String);
  public static int getIntegerProperty(java.lang.String, int);
  public static javax.net.ssl.SSLParameters copySSLParameters(javax.net.ssl.SSLParameters);
  public static void flipToMark(java.nio.ByteBuffer, int);
  public static java.lang.String stackTrace(java.lang.Throwable);
  public static int copy(java.nio.ByteBuffer, java.nio.ByteBuffer);
  public static long accumulateBuffers(java.util.List<java.nio.ByteBuffer>, java.util.List<java.nio.ByteBuffer>);
  public static java.nio.ByteBuffer copy(java.nio.ByteBuffer);
  public static java.nio.ByteBuffer copyAligned(java.nio.ByteBuffer);
  public static java.lang.String dump(java.lang.Object...);
  public static java.lang.String stringOf(java.util.Collection<?>);
  public static long remaining(java.nio.ByteBuffer[]);
  public static boolean hasRemaining(java.util.List<java.nio.ByteBuffer>);
  public static long remaining(java.util.List<java.nio.ByteBuffer>);
  public static int remaining(java.util.List<java.nio.ByteBuffer>, int);
  public static int remaining(java.nio.ByteBuffer[], int);
  public static void close(java.io.Closeable...);
  public static java.nio.ByteBuffer sliceWithLimitedCapacity(java.nio.ByteBuffer, int);
  public static java.nio.charset.Charset charsetFrom(java.net.http.HttpHeaders);
  public static java.io.UncheckedIOException unchecked(java.io.IOException);
  public static jdk.internal.net.http.common.Logger getDebugLogger(java.util.function.Supplier<java.lang.String>);
  static jdk.internal.net.http.common.Logger getDebugLogger(java.util.function.Supplier<java.lang.String>, java.lang.System$Logger$Level);
  public static jdk.internal.net.http.common.Logger getDebugLogger(java.util.function.Supplier<java.lang.String>, boolean);
  public static jdk.internal.net.http.common.Logger getHpackLogger(java.util.function.Supplier<java.lang.String>, java.lang.System$Logger$Level);
  public static jdk.internal.net.http.common.Logger getHpackLogger(java.util.function.Supplier<java.lang.String>, boolean);
  public static jdk.internal.net.http.common.Logger getWebSocketLogger(java.util.function.Supplier<java.lang.String>, java.lang.System$Logger$Level);
  public static jdk.internal.net.http.common.Logger getWebSocketLogger(java.util.function.Supplier<java.lang.String>, boolean);
  public static javax.net.ssl.SSLSession immutableSession(javax.net.ssl.SSLSession);
  public static boolean isHostnameVerificationDisabled();
  public static java.net.InetSocketAddress resolveAddress(java.net.InetSocketAddress);
  public static java.lang.Throwable toConnectException(java.lang.Throwable);
  public static int pow2Size(int);
  public static java.lang.String encode(java.lang.String);
  static {};
}
