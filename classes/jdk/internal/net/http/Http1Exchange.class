Compiled from "Http1Exchange.java"
class jdk.internal.net.http.Http1Exchange<T> extends jdk.internal.net.http.ExchangeImpl<T> {
  final jdk.internal.net.http.common.Logger debug;
  final jdk.internal.net.http.HttpRequestImpl request;
  final jdk.internal.net.http.Http1Request requestAction;
  final jdk.internal.net.http.HttpConnection connection;
  final jdk.internal.net.http.HttpClientImpl client;
  final java.util.concurrent.Executor executor;
  final java.util.concurrent.ConcurrentLinkedDeque<jdk.internal.net.http.Http1Exchange$DataPair> outgoing;
  static final boolean $assertionsDisabled;
  public java.lang.String toString();
  jdk.internal.net.http.HttpRequestImpl request();
  jdk.internal.net.http.Http1Exchange(jdk.internal.net.http.Exchange<T>, jdk.internal.net.http.HttpConnection) throws java.io.IOException;
  jdk.internal.net.http.HttpConnection connection();
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.ExchangeImpl<T>> sendHeadersAsync();
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.ExchangeImpl<T>> sendBodyAsync();
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.Response> getResponseAsync(java.util.concurrent.Executor);
  java.util.concurrent.CompletableFuture<T> readBodyAsync(java.net.http.HttpResponse$BodyHandler<T>, boolean, java.util.concurrent.Executor);
  java.util.concurrent.CompletableFuture<java.lang.Void> ignoreBody();
  public void nullBody(java.net.http.HttpResponse<T>, java.lang.Throwable);
  java.nio.ByteBuffer drainLeftOverBytes();
  void released();
  void completed();
  void cancel();
  void cancel(java.io.IOException);
  boolean isCanceled();
  java.lang.Throwable getCancelCause();
  void appendToOutgoing(java.lang.Throwable);
  void appendToOutgoing(java.util.List<java.nio.ByteBuffer>);
  java.lang.String dbgString();
  static {};
}
