Compiled from "Http2Connection.java"
class jdk.internal.net.http.Http2Connection {
  final jdk.internal.net.http.common.Logger debug;
  static final jdk.internal.net.http.common.Logger DEBUG_LOGGER;
  static final java.nio.ByteBuffer EMPTY_TRIGGER;
  volatile boolean closed;
  final jdk.internal.net.http.HttpConnection connection;
  final jdk.internal.net.http.frame.SettingsFrame clientSettings;
  final jdk.internal.net.http.Http2Connection$ConnectionWindowUpdateSender windowUpdater;
  static final int DEFAULT_FRAME_SIZE;
  long count;
  static final boolean $assertionsDisabled;
  static java.util.concurrent.CompletableFuture<jdk.internal.net.http.Http2Connection> createAsync(jdk.internal.net.http.HttpConnection, jdk.internal.net.http.Http2ClientImpl, jdk.internal.net.http.Exchange<?>, java.util.function.Supplier<java.nio.ByteBuffer>);
  static java.util.concurrent.CompletableFuture<jdk.internal.net.http.Http2Connection> createAsync(jdk.internal.net.http.HttpRequestImpl, jdk.internal.net.http.Http2ClientImpl, jdk.internal.net.http.Exchange<?>);
  final jdk.internal.net.http.HttpClientImpl client();
  synchronized boolean reserveStream(boolean) throws java.io.IOException;
  synchronized boolean finalStream();
  synchronized void setFinalStream();
  static java.lang.String keyFor(jdk.internal.net.http.HttpConnection);
  static java.lang.String keyFor(java.net.URI, java.net.InetSocketAddress);
  static java.lang.String keyString(boolean, boolean, java.lang.String, int);
  java.lang.String key();
  boolean offerConnection();
  final int getInitialSendWindowSize();
  final int maxConcurrentClientInitiatedStreams();
  final int maxConcurrentServerInitiatedStreams();
  void close();
  final void asyncReceive(java.nio.ByteBuffer);
  java.lang.Throwable getRecordedCause();
  void shutdown(java.lang.Throwable);
  void processFrame(jdk.internal.net.http.frame.Http2Frame) throws java.io.IOException;
  final void dropDataFrame(jdk.internal.net.http.frame.DataFrame);
  final void ensureWindowUpdated(jdk.internal.net.http.frame.DataFrame);
  void resetStream(int, int) throws java.io.IOException;
  synchronized void decrementStreamsCount(int);
  void closeStream(int);
  public int getMaxSendFrameSize();
  public int getMaxReceiveFrameSize();
  <T> jdk.internal.net.http.Stream<T> getStream(int);
  final <T> jdk.internal.net.http.Stream<T> createStream(jdk.internal.net.http.Exchange<T>);
  <T> jdk.internal.net.http.Stream$PushedStream<T> createPushStream(jdk.internal.net.http.Stream<T>, jdk.internal.net.http.Exchange<T>);
  <T> void putStream(jdk.internal.net.http.Stream<T>, int);
  void sendFrame(jdk.internal.net.http.frame.Http2Frame);
  void sendDataFrame(jdk.internal.net.http.frame.DataFrame);
  void sendUnorderedFrame(jdk.internal.net.http.frame.Http2Frame);
  synchronized boolean isActive();
  public final java.lang.String toString();
  final java.lang.String dbgString();
  static {};
}
