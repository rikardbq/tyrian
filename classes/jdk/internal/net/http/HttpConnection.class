Compiled from "HttpConnection.java"
abstract class jdk.internal.net.http.HttpConnection implements java.io.Closeable {
  final jdk.internal.net.http.common.Logger debug;
  static final jdk.internal.net.http.common.Logger DEBUG_LOGGER;
  final java.net.InetSocketAddress address;
  java.lang.String dbgTag;
  static final boolean $assertionsDisabled;
  jdk.internal.net.http.HttpConnection(java.net.InetSocketAddress, jdk.internal.net.http.HttpClientImpl);
  final void addTrailingOperation(java.util.concurrent.CompletionStage<?>);
  final jdk.internal.net.http.HttpClientImpl client();
  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> connectAsync(jdk.internal.net.http.Exchange<?>);
  public abstract java.util.concurrent.CompletableFuture<java.lang.Void> finishConnect();
  abstract boolean connected();
  abstract boolean isSecure();
  abstract boolean isProxied();
  final boolean isOpen();
  abstract jdk.internal.net.http.HttpConnection$HttpPublisher publisher();
  public static jdk.internal.net.http.HttpConnection getConnection(java.net.InetSocketAddress, jdk.internal.net.http.HttpClientImpl, jdk.internal.net.http.HttpRequestImpl, java.net.http.HttpClient$Version);
  java.util.function.BiPredicate<java.lang.String, java.lang.String> headerFilter(jdk.internal.net.http.HttpRequestImpl);
  void closeOrReturnToCache(java.net.http.HttpHeaders);
  boolean isTunnel();
  abstract java.nio.channels.SocketChannel channel();
  final java.net.InetSocketAddress address();
  abstract jdk.internal.net.http.ConnectionPool$CacheKey cacheKey();
  public abstract void close();
  abstract jdk.internal.net.http.common.FlowTube getConnectionFlow();
  final java.lang.String dbgString();
  public java.lang.String toString();
  static {};
}
