Compiled from "Stream.java"
class jdk.internal.net.http.Stream<T> extends jdk.internal.net.http.ExchangeImpl<T> {
  final jdk.internal.net.http.common.Logger debug;
  final java.util.concurrent.ConcurrentLinkedQueue<jdk.internal.net.http.frame.Http2Frame> inputQ;
  final jdk.internal.net.http.common.SequentialScheduler sched;
  final jdk.internal.net.http.common.SubscriptionBase userSubscription;
  protected volatile int streamid;
  long requestContentLen;
  final jdk.internal.net.http.Http2Connection connection;
  final jdk.internal.net.http.HttpRequestImpl request;
  final jdk.internal.net.http.Stream<T>.HeadersConsumer rspHeadersConsumer;
  final jdk.internal.net.http.common.HttpHeadersBuilder responseHeadersBuilder;
  final java.net.http.HttpHeaders requestPseudoHeaders;
  volatile java.net.http.HttpResponse$BodySubscriber<T> responseSubscriber;
  final java.net.http.HttpRequest$BodyPublisher requestPublisher;
  volatile jdk.internal.net.http.Stream<T>.RequestSubscriber requestSubscriber;
  volatile int responseCode;
  volatile jdk.internal.net.http.Response response;
  final java.util.concurrent.CompletableFuture<java.lang.Void> requestBodyCF;
  volatile java.util.concurrent.CompletableFuture<T> responseBodyCF;
  volatile java.net.http.HttpResponse$BodySubscriber<T> pendingResponseSubscriber;
  volatile boolean stopRequested;
  final java.util.concurrent.atomic.AtomicBoolean deRegistered;
  static final java.nio.ByteBuffer COMPLETED;
  final java.util.List<java.util.concurrent.CompletableFuture<jdk.internal.net.http.Response>> response_cfs;
  static final boolean $assertionsDisabled;
  jdk.internal.net.http.HttpConnection connection();
  void nullBody(java.net.http.HttpResponse<T>, java.lang.Throwable);
  boolean deRegister();
  java.util.concurrent.CompletableFuture<T> readBodyAsync(java.net.http.HttpResponse$BodyHandler<T>, boolean, java.util.concurrent.Executor);
  public java.lang.String toString();
  java.util.concurrent.CompletableFuture<T> receiveData(java.net.http.HttpResponse$BodySubscriber<T>, java.util.concurrent.Executor);
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.ExchangeImpl<T>> sendBodyAsync();
  jdk.internal.net.http.Stream(jdk.internal.net.http.Http2Connection, jdk.internal.net.http.Exchange<T>, jdk.internal.net.http.WindowController);
  void incoming(jdk.internal.net.http.frame.Http2Frame) throws java.io.IOException;
  void otherFrame(jdk.internal.net.http.frame.Http2Frame) throws java.io.IOException;
  jdk.internal.net.http.hpack.DecodingCallback rspHeadersConsumer();
  protected void handleResponse() throws java.io.IOException;
  void incoming_reset(jdk.internal.net.http.frame.ResetFrame);
  void handleReset(jdk.internal.net.http.frame.ResetFrame, java.util.concurrent.Flow$Subscriber<?>);
  void incoming_priority(jdk.internal.net.http.frame.PriorityFrame);
  void incoming_pushPromise(jdk.internal.net.http.HttpRequestImpl, jdk.internal.net.http.Stream$PushedStream<T>) throws java.io.IOException;
  java.net.http.HttpHeaders getRequestPseudoHeaders();
  void setEndStreamReceived();
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.ExchangeImpl<T>> sendHeadersAsync();
  void released();
  void completed();
  void registerStream(int);
  void signalWindowUpdate();
  public java.util.concurrent.CompletableFuture<java.lang.Void> ignoreBody();
  jdk.internal.net.http.frame.DataFrame getDataFrame(java.nio.ByteBuffer);
  java.util.concurrent.CompletableFuture<jdk.internal.net.http.Response> getResponseAsync(java.util.concurrent.Executor);
  void completeResponse(jdk.internal.net.http.Response);
  synchronized void requestSent();
  synchronized void responseReceived();
  void completeResponseExceptionally(java.lang.Throwable);
  java.util.concurrent.CompletableFuture<java.lang.Void> sendBodyImpl();
  void cancel();
  void onSubscriptionError(java.lang.Throwable);
  void cancel(java.io.IOException);
  void connectionClosing(java.lang.Throwable);
  void cancelImpl(java.lang.Throwable);
  void close();
  synchronized boolean isCanceled();
  synchronized java.lang.Throwable getCancelCause();
  final java.lang.String dbgString();
  static {};
}
