Compiled from "JShellTool.java"
public class jdk.internal.jshell.tool.JShellTool implements jdk.internal.jshell.tool.MessageHandler {
  static final java.lang.String RECORD_SEPARATOR;
  final java.io.InputStream cmdin;
  final java.io.PrintStream cmdout;
  final java.io.PrintStream cmderr;
  final java.io.PrintStream console;
  final java.io.InputStream userin;
  final java.io.PrintStream userout;
  final java.io.PrintStream usererr;
  final jdk.internal.jshell.tool.PersistentStorage prefs;
  final java.util.Map<java.lang.String, java.lang.String> envvars;
  final java.util.Locale locale;
  final jdk.internal.jshell.tool.Feedback feedback;
  jdk.jshell.SourceCodeAnalysis analysis;
  jdk.jshell.JShell$Subscription shutdownSubscription;
  static final jdk.internal.jshell.tool.JShellTool$EditorSetting BUILT_IN_EDITOR;
  public boolean testPrompt;
  static final java.lang.String STARTUP_KEY;
  static final java.lang.String EDITOR_KEY;
  static final java.lang.String FEEDBACK_KEY;
  static final java.lang.String MODE_KEY;
  static final java.lang.String REPLAY_RESTORE_KEY;
  static final java.util.regex.Pattern BUILTIN_FILE_PATTERN;
  static final java.lang.String BUILTIN_FILE_PATH_FORMAT;
  static final java.lang.String INT_PREFIX;
  static final int OUTPUT_WIDTH;
  jdk.internal.jshell.tool.JShellTool$NameSpace mainNamespace;
  jdk.internal.jshell.tool.JShellTool$NameSpace startNamespace;
  jdk.internal.jshell.tool.JShellTool$NameSpace errorNamespace;
  jdk.internal.jshell.tool.JShellTool$NameSpace currentNameSpace;
  java.util.Map<jdk.jshell.Snippet, jdk.internal.jshell.tool.JShellTool$SnippetInfo> mapSnippet;
  static final jdk.internal.jshell.tool.JShellTool$CompletionProvider EMPTY_COMPLETION_PROVIDER;
  static final boolean $assertionsDisabled;
  jdk.internal.jshell.tool.JShellTool(java.io.InputStream, java.io.PrintStream, java.io.PrintStream, java.io.PrintStream, java.io.InputStream, java.io.PrintStream, java.io.PrintStream, jdk.internal.jshell.tool.PersistentStorage, java.util.Map<java.lang.String, java.lang.String>, java.util.Locale);
  boolean interactive();
  void debug(java.lang.String, java.lang.Object...);
  public void hard(java.lang.String, java.lang.Object...);
  void error(java.lang.String, java.lang.Object...);
  public boolean showFluff();
  public void fluff(java.lang.String, java.lang.Object...);
  java.lang.String getResourceString(java.lang.String);
  java.lang.String prefix(java.lang.String);
  java.lang.String prefixError(java.lang.String);
  java.lang.String prefix(java.lang.String, java.lang.String, java.lang.String);
  void hardrb(java.lang.String);
  java.lang.String messageFormat(java.lang.String, java.lang.Object...);
  public void hardmsg(java.lang.String, java.lang.Object...);
  public void errormsg(java.lang.String, java.lang.Object...);
  public void fluffmsg(java.lang.String, java.lang.Object...);
  <T> void hardPairs(java.util.stream.Stream<T>, java.util.function.Function<T, java.lang.String>, java.util.function.Function<T, java.lang.String>);
  static java.lang.String trimEnd(java.lang.String);
  public int start(java.lang.String[]) throws java.lang.Exception;
  public boolean isComplete(java.lang.String);
  static java.nio.file.Path toPathResolvingUserHome(java.lang.String);
  java.util.stream.Stream<jdk.jshell.Snippet> allSnippets();
  java.util.stream.Stream<jdk.jshell.Snippet> dropableSnippets();
  java.util.stream.Stream<jdk.jshell.VarSnippet> allVarSnippets();
  java.util.stream.Stream<jdk.jshell.MethodSnippet> allMethodSnippets();
  java.util.stream.Stream<jdk.jshell.TypeDeclSnippet> allTypeSnippets();
  public java.util.List<jdk.jshell.SourceCodeAnalysis$Suggestion> commandCompletionSuggestions(java.lang.String, int, int[]);
  public java.util.List<java.lang.String> commandDocumentation(java.lang.String, int, boolean);
  void stop();
  final boolean cmdSet(java.lang.String);
  boolean setFeedback(jdk.internal.jshell.tool.MessageHandler, jdk.internal.jshell.tool.ArgTokenizer);
  java.lang.String subCommand(java.lang.String, jdk.internal.jshell.tool.ArgTokenizer, java.lang.String[]);
  boolean setStart(jdk.internal.jshell.tool.ArgTokenizer);
  void showSetStart();
  boolean cmdDebug(java.lang.String);
  boolean cmdHelp(java.lang.String);
  static java.lang.String getResource(java.lang.String);
  static java.lang.String readResource(java.lang.String) throws java.lang.Exception;
  boolean checkOptionsAndRemainingInput(jdk.internal.jshell.tool.ArgTokenizer);
  java.util.List<jdk.jshell.Diag> errorsOnly(java.util.List<jdk.jshell.Diag>);
  boolean processSource(java.lang.String);
  void printStackTrace(java.lang.StackTraceElement[], java.lang.StackTraceElement[]);
  void printSnippetStatus(jdk.jshell.DeclarationSnippet, boolean);
  java.lang.String version();
  java.lang.String fullVersion();
  static {};
}
