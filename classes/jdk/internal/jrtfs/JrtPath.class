Compiled from "JrtPath.java"
final class jdk.internal.jrtfs.JrtPath implements java.nio.file.Path {
  final jdk.internal.jrtfs.JrtFileSystem jrtfs;
  jdk.internal.jrtfs.JrtPath(jdk.internal.jrtfs.JrtFileSystem, java.lang.String);
  jdk.internal.jrtfs.JrtPath(jdk.internal.jrtfs.JrtFileSystem, java.lang.String, boolean);
  final java.lang.String getName();
  public final jdk.internal.jrtfs.JrtPath getRoot();
  public final jdk.internal.jrtfs.JrtPath getFileName();
  public final jdk.internal.jrtfs.JrtPath getParent();
  public final int getNameCount();
  public final jdk.internal.jrtfs.JrtPath getName(int);
  public final jdk.internal.jrtfs.JrtPath subpath(int, int);
  public final jdk.internal.jrtfs.JrtPath toRealPath(java.nio.file.LinkOption...) throws java.io.IOException;
  public final jdk.internal.jrtfs.JrtPath toAbsolutePath();
  public final java.net.URI toUri();
  public final jdk.internal.jrtfs.JrtPath relativize(java.nio.file.Path);
  public jdk.internal.jrtfs.JrtFileSystem getFileSystem();
  public final boolean isAbsolute();
  public final jdk.internal.jrtfs.JrtPath resolve(java.nio.file.Path);
  public final java.nio.file.Path resolveSibling(java.nio.file.Path);
  public final boolean startsWith(java.nio.file.Path);
  public final boolean endsWith(java.nio.file.Path);
  public final jdk.internal.jrtfs.JrtPath resolve(java.lang.String);
  public final java.nio.file.Path resolveSibling(java.lang.String);
  public final boolean startsWith(java.lang.String);
  public final boolean endsWith(java.lang.String);
  public final jdk.internal.jrtfs.JrtPath normalize();
  final java.lang.String getResolvedPath();
  public final java.lang.String toString();
  public final int hashCode();
  public final boolean equals(java.lang.Object);
  public final int compareTo(java.nio.file.Path);
  public final java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...);
  public final java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...);
  public final java.io.File toFile();
  public final java.util.Iterator<java.nio.file.Path> iterator();
  final jdk.internal.jrtfs.JrtPath readSymbolicLink() throws java.io.IOException;
  final boolean isHidden();
  final void createDirectory(java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  final java.io.InputStream newInputStream(java.nio.file.OpenOption...) throws java.io.IOException;
  final java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException;
  final void delete() throws java.io.IOException;
  final void deleteIfExists() throws java.io.IOException;
  final jdk.internal.jrtfs.JrtFileAttributes getAttributes(java.nio.file.LinkOption...) throws java.io.IOException;
  final void setAttribute(java.lang.String, java.lang.Object, java.nio.file.LinkOption...) throws java.io.IOException;
  final java.util.Map<java.lang.String, java.lang.Object> readAttributes(java.lang.String, java.nio.file.LinkOption...) throws java.io.IOException;
  final void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) throws java.io.IOException;
  final java.nio.file.FileStore getFileStore() throws java.io.IOException;
  final boolean isSameFile(java.nio.file.Path) throws java.io.IOException;
  final java.nio.channels.SeekableByteChannel newByteChannel(java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  final java.nio.channels.FileChannel newFileChannel(java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  final void checkAccess(java.nio.file.AccessMode...) throws java.io.IOException;
  final boolean exists();
  final java.io.OutputStream newOutputStream(java.nio.file.OpenOption...) throws java.io.IOException;
  final void move(jdk.internal.jrtfs.JrtPath, java.nio.file.CopyOption...) throws java.io.IOException;
  final void copy(jdk.internal.jrtfs.JrtPath, java.nio.file.CopyOption...) throws java.io.IOException;
  public java.nio.file.Path toRealPath(java.nio.file.LinkOption[]) throws java.io.IOException;
  public java.nio.file.Path toAbsolutePath();
  public java.nio.file.Path relativize(java.nio.file.Path);
  public java.nio.file.Path resolve(java.lang.String);
  public java.nio.file.Path resolve(java.nio.file.Path);
  public java.nio.file.Path normalize();
  public java.nio.file.Path subpath(int, int);
  public java.nio.file.Path getName(int);
  public java.nio.file.Path getParent();
  public java.nio.file.Path getFileName();
  public java.nio.file.Path getRoot();
  public java.nio.file.FileSystem getFileSystem();
  public int compareTo(java.lang.Object);
}
