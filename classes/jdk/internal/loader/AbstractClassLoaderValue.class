Compiled from "AbstractClassLoaderValue.java"
public abstract class jdk.internal.loader.AbstractClassLoaderValue<CLV extends jdk.internal.loader.AbstractClassLoaderValue<CLV, V>, V> {
  jdk.internal.loader.AbstractClassLoaderValue();
  public abstract java.lang.Object key();
  public <K> jdk.internal.loader.AbstractClassLoaderValue<CLV, V>.Sub<K> sub(K);
  public abstract boolean isEqualOrDescendantOf(jdk.internal.loader.AbstractClassLoaderValue<?, V>);
  public V get(java.lang.ClassLoader);
  public V putIfAbsent(java.lang.ClassLoader, V);
  public boolean remove(java.lang.ClassLoader, java.lang.Object);
  public V computeIfAbsent(java.lang.ClassLoader, java.util.function.BiFunction<? super java.lang.ClassLoader, ? super CLV, ? extends V>) throws java.lang.IllegalStateException;
  public void removeAll(java.lang.ClassLoader);
  static {};
}
