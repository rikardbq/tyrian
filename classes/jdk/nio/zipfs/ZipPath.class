Compiled from "ZipPath.java"
final class jdk.nio.zipfs.ZipPath implements java.nio.file.Path {
  static final boolean $assertionsDisabled;
  jdk.nio.zipfs.ZipPath(jdk.nio.zipfs.ZipFileSystem, byte[]);
  jdk.nio.zipfs.ZipPath(jdk.nio.zipfs.ZipFileSystem, byte[], boolean);
  jdk.nio.zipfs.ZipPath(jdk.nio.zipfs.ZipFileSystem, java.lang.String);
  public jdk.nio.zipfs.ZipPath getRoot();
  public jdk.nio.zipfs.ZipPath getFileName();
  public jdk.nio.zipfs.ZipPath getParent();
  public int getNameCount();
  public jdk.nio.zipfs.ZipPath getName(int);
  public jdk.nio.zipfs.ZipPath subpath(int, int);
  public jdk.nio.zipfs.ZipPath toRealPath(java.nio.file.LinkOption...) throws java.io.IOException;
  boolean isHidden();
  public jdk.nio.zipfs.ZipPath toAbsolutePath();
  public java.net.URI toUri();
  public java.nio.file.Path relativize(java.nio.file.Path);
  public jdk.nio.zipfs.ZipFileSystem getFileSystem();
  public boolean isAbsolute();
  public jdk.nio.zipfs.ZipPath resolve(java.nio.file.Path);
  public java.nio.file.Path resolveSibling(java.nio.file.Path);
  public boolean startsWith(java.nio.file.Path);
  public boolean endsWith(java.nio.file.Path);
  public jdk.nio.zipfs.ZipPath resolve(java.lang.String);
  public final java.nio.file.Path resolveSibling(java.lang.String);
  public final boolean startsWith(java.lang.String);
  public final boolean endsWith(java.lang.String);
  public java.nio.file.Path normalize();
  byte[] getResolvedPath();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public int compareTo(java.nio.file.Path);
  public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>[], java.nio.file.WatchEvent$Modifier...);
  public java.nio.file.WatchKey register(java.nio.file.WatchService, java.nio.file.WatchEvent$Kind<?>...);
  public final java.io.File toFile();
  public java.util.Iterator<java.nio.file.Path> iterator();
  void createDirectory(java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  java.io.InputStream newInputStream(java.nio.file.OpenOption...) throws java.io.IOException;
  java.nio.file.DirectoryStream<java.nio.file.Path> newDirectoryStream(java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException;
  void delete() throws java.io.IOException;
  void deleteIfExists() throws java.io.IOException;
  jdk.nio.zipfs.ZipFileAttributes getAttributes() throws java.io.IOException;
  void setAttribute(java.lang.String, java.lang.Object, java.nio.file.LinkOption...) throws java.io.IOException;
  void setTimes(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) throws java.io.IOException;
  java.util.Map<java.lang.String, java.lang.Object> readAttributes(java.lang.String, java.nio.file.LinkOption...) throws java.io.IOException;
  java.nio.file.FileStore getFileStore() throws java.io.IOException;
  boolean isSameFile(java.nio.file.Path) throws java.io.IOException;
  java.nio.channels.SeekableByteChannel newByteChannel(java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  java.nio.channels.FileChannel newFileChannel(java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  void checkAccess(java.nio.file.AccessMode...) throws java.io.IOException;
  boolean exists();
  java.io.OutputStream newOutputStream(java.nio.file.OpenOption...) throws java.io.IOException;
  void move(jdk.nio.zipfs.ZipPath, java.nio.file.CopyOption...) throws java.io.IOException;
  void copy(jdk.nio.zipfs.ZipPath, java.nio.file.CopyOption...) throws java.io.IOException;
  static java.lang.String decodeUri(java.lang.String);
  public java.nio.file.Path toRealPath(java.nio.file.LinkOption[]) throws java.io.IOException;
  public java.nio.file.Path toAbsolutePath();
  public java.nio.file.Path resolve(java.lang.String);
  public java.nio.file.Path resolve(java.nio.file.Path);
  public java.nio.file.Path subpath(int, int);
  public java.nio.file.Path getName(int);
  public java.nio.file.Path getParent();
  public java.nio.file.Path getFileName();
  public java.nio.file.Path getRoot();
  public java.nio.file.FileSystem getFileSystem();
  public int compareTo(java.lang.Object);
  static {};
}
