Compiled from "ZipFileSystem.java"
class jdk.nio.zipfs.ZipFileSystem extends java.nio.file.FileSystem {
  final jdk.nio.zipfs.ZipCoder zc;
  final byte[] cen;
  java.util.LinkedHashMap<jdk.nio.zipfs.ZipFileSystem$IndexNode, jdk.nio.zipfs.ZipFileSystem$IndexNode> inodes;
  jdk.nio.zipfs.ZipFileSystem(jdk.nio.zipfs.ZipFileSystemProvider, java.nio.file.Path, java.util.Map<java.lang.String, ?>) throws java.io.IOException;
  public java.nio.file.spi.FileSystemProvider provider();
  public java.lang.String getSeparator();
  public boolean isOpen();
  public boolean isReadOnly();
  void setReadOnly();
  public java.lang.Iterable<java.nio.file.Path> getRootDirectories();
  jdk.nio.zipfs.ZipPath getRootDir();
  public jdk.nio.zipfs.ZipPath getPath(java.lang.String, java.lang.String...);
  public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService();
  public java.nio.file.WatchService newWatchService();
  java.nio.file.FileStore getFileStore(jdk.nio.zipfs.ZipPath);
  public java.lang.Iterable<java.nio.file.FileStore> getFileStores();
  public java.util.Set<java.lang.String> supportedFileAttributeViews();
  public java.lang.String toString();
  java.nio.file.Path getZipFile();
  public java.nio.file.PathMatcher getPathMatcher(java.lang.String);
  public void close() throws java.io.IOException;
  jdk.nio.zipfs.ZipFileAttributes getFileAttributes(byte[]) throws java.io.IOException;
  void checkAccess(byte[]) throws java.io.IOException;
  void setTimes(byte[], java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) throws java.io.IOException;
  boolean exists(byte[]) throws java.io.IOException;
  boolean isDirectory(byte[]) throws java.io.IOException;
  java.util.Iterator<java.nio.file.Path> iteratorOf(jdk.nio.zipfs.ZipPath, java.nio.file.DirectoryStream$Filter<? super java.nio.file.Path>) throws java.io.IOException;
  void createDirectory(byte[], java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  void copyFile(boolean, byte[], byte[], java.nio.file.CopyOption...) throws java.io.IOException;
  java.io.OutputStream newOutputStream(byte[], java.nio.file.OpenOption...) throws java.io.IOException;
  java.io.InputStream newInputStream(byte[]) throws java.io.IOException;
  java.nio.channels.SeekableByteChannel newByteChannel(byte[], java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  java.nio.channels.FileChannel newFileChannel(byte[], java.util.Set<? extends java.nio.file.OpenOption>, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
  static byte[] getParent(byte[]);
  final void beginWrite();
  final void endWrite();
  final byte[] getBytes(java.lang.String);
  final java.lang.String getString(byte[]);
  protected void finalize() throws java.io.IOException;
  final long readFullyAt(byte[], int, long, long) throws java.io.IOException;
  jdk.nio.zipfs.ZipFileSystem$IndexNode getInode(byte[]);
  jdk.nio.zipfs.ZipFileSystem$Entry getEntry(byte[]) throws java.io.IOException;
  public void deleteFile(byte[], boolean) throws java.io.IOException;
  static void zerror(java.lang.String) throws java.util.zip.ZipException;
  public java.nio.file.Path getPath(java.lang.String, java.lang.String[]);
  static {};
}
