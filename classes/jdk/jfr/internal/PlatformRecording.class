Compiled from "PlatformRecording.java"
public final class jdk.jfr.internal.PlatformRecording implements java.lang.AutoCloseable {
  jdk.jfr.internal.PlatformRecording(jdk.jfr.internal.PlatformRecorder, long);
  public void start();
  public boolean stop(java.lang.String);
  public void scheduleStart(java.time.Duration);
  void scheduleStart(java.time.Instant);
  public java.util.Map<java.lang.String, java.lang.String> getSettings();
  public long getSize();
  public java.time.Instant getStopTime();
  public java.time.Instant getStartTime();
  public java.lang.Long getMaxSize();
  public java.time.Duration getMaxAge();
  public java.lang.String getName();
  public jdk.jfr.RecordingState getState();
  public void close();
  public jdk.jfr.internal.PlatformRecording newSnapshotClone(java.lang.String, java.lang.Boolean) throws java.io.IOException;
  public boolean isToDisk();
  public void setMaxSize(long);
  public void setDestination(jdk.jfr.internal.WriteableUserPath) throws java.io.IOException;
  public void checkSetDestination(jdk.jfr.internal.WriteableUserPath) throws java.io.IOException;
  public jdk.jfr.internal.WriteableUserPath getDestination();
  void setState(jdk.jfr.RecordingState);
  void setStartTime(java.time.Instant);
  void setStopTime(java.time.Instant);
  public long getId();
  public void setName(java.lang.String);
  public void setDumpOnExit(boolean);
  public boolean getDumpOnExit();
  public void setToDisk(boolean);
  public void setSetting(java.lang.String, java.lang.String);
  public void setSettings(java.util.Map<java.lang.String, java.lang.String>);
  public void setRecording(jdk.jfr.Recording);
  public jdk.jfr.Recording getRecording();
  public java.lang.String toString();
  public void setConfiguration(jdk.jfr.Configuration);
  public void setMaxAge(java.time.Duration);
  void appendChunk(jdk.jfr.internal.RepositoryChunk);
  void add(jdk.jfr.internal.RepositoryChunk);
  public java.util.List<jdk.jfr.internal.RepositoryChunk> getChunks();
  public java.io.InputStream open(java.time.Instant, java.time.Instant) throws java.io.IOException;
  public java.time.Duration getDuration();
  void setInternalDuration(java.time.Duration);
  public void setDuration(java.time.Duration);
  void updateTimer();
  java.util.TimerTask createStopTask();
  public jdk.jfr.Recording newCopy(boolean);
  void setStopTask(java.util.TimerTask);
  void clearDestination();
  public java.security.AccessControlContext getNoDestinationDumpOnExitAccessControlContext();
  void setShouldWriteActiveRecordingEvent(boolean);
  boolean shouldWriteMetadataEvent();
  public void dump(jdk.jfr.internal.WriteableUserPath) throws java.io.IOException;
  public void dumpStopped(jdk.jfr.internal.WriteableUserPath) throws java.io.IOException;
  public void filter(java.time.Instant, java.time.Instant, java.lang.Long);
  public void setDumpOnExitDirectory(jdk.jfr.internal.SecuritySupport$SafePath);
  public jdk.jfr.internal.SecuritySupport$SafePath getDumpOnExitDirectory();
}
