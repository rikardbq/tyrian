Compiled from "Global.java"
public final class jdk.nashorn.internal.objects.Global extends jdk.nashorn.internal.runtime.Scope {
  public java.lang.Object arguments;
  public java.lang.Object parseInt;
  public java.lang.Object parseFloat;
  public java.lang.Object isNaN;
  public java.lang.Object isFinite;
  public java.lang.Object encodeURI;
  public java.lang.Object encodeURIComponent;
  public java.lang.Object decodeURI;
  public java.lang.Object decodeURIComponent;
  public java.lang.Object escape;
  public java.lang.Object unescape;
  public java.lang.Object print;
  public java.lang.Object load;
  public java.lang.Object loadWithNewGlobal;
  public java.lang.Object exit;
  public java.lang.Object quit;
  public static final double NaN;
  public static final double Infinity;
  public static final java.lang.Object undefined;
  public java.lang.Object eval;
  public volatile java.lang.Object object;
  public volatile java.lang.Object function;
  public volatile java.lang.Object array;
  public volatile java.lang.Object string;
  public volatile java.lang.Object _boolean;
  public volatile java.lang.Object number;
  public volatile java.lang.Object math;
  public volatile java.lang.Object error;
  public volatile java.lang.Object referenceError;
  public volatile java.lang.Object syntaxError;
  public volatile java.lang.Object typeError;
  public volatile java.lang.Object packages;
  public volatile java.lang.Object com;
  public volatile java.lang.Object edu;
  public volatile java.lang.Object java;
  public volatile java.lang.Object javafx;
  public volatile java.lang.Object javax;
  public volatile java.lang.Object org;
  public static final java.lang.Object __FILE__;
  public static final java.lang.Object __DIR__;
  public static final java.lang.Object __LINE__;
  static final boolean $assertionsDisabled;
  public static java.lang.Object getDate(java.lang.Object);
  public static void setDate(java.lang.Object, java.lang.Object);
  public static java.lang.Object getRegExp(java.lang.Object);
  public static void setRegExp(java.lang.Object, java.lang.Object);
  public static java.lang.Object getJSON(java.lang.Object);
  public static void setJSON(java.lang.Object, java.lang.Object);
  public static java.lang.Object getJSAdapter(java.lang.Object);
  public static void setJSAdapter(java.lang.Object, java.lang.Object);
  public static java.lang.Object getEvalError(java.lang.Object);
  public static void setEvalError(java.lang.Object, java.lang.Object);
  public static java.lang.Object getRangeError(java.lang.Object);
  public static void setRangeError(java.lang.Object, java.lang.Object);
  public static java.lang.Object getURIError(java.lang.Object);
  public static void setURIError(java.lang.Object, java.lang.Object);
  public static java.lang.Object getArrayBuffer(java.lang.Object);
  public static void setArrayBuffer(java.lang.Object, java.lang.Object);
  public static java.lang.Object getDataView(java.lang.Object);
  public static void setDataView(java.lang.Object, java.lang.Object);
  public static java.lang.Object getInt8Array(java.lang.Object);
  public static void setInt8Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getUint8Array(java.lang.Object);
  public static void setUint8Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getUint8ClampedArray(java.lang.Object);
  public static void setUint8ClampedArray(java.lang.Object, java.lang.Object);
  public static java.lang.Object getInt16Array(java.lang.Object);
  public static void setInt16Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getUint16Array(java.lang.Object);
  public static void setUint16Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getInt32Array(java.lang.Object);
  public static void setInt32Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getUint32Array(java.lang.Object);
  public static void setUint32Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getFloat32Array(java.lang.Object);
  public static void setFloat32Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getFloat64Array(java.lang.Object);
  public static void setFloat64Array(java.lang.Object, java.lang.Object);
  public static java.lang.Object getSymbol(java.lang.Object);
  public static void setSymbol(java.lang.Object, java.lang.Object);
  public static java.lang.Object getMap(java.lang.Object);
  public static void setMap(java.lang.Object, java.lang.Object);
  public static java.lang.Object getWeakMap(java.lang.Object);
  public static void setWeakMap(java.lang.Object, java.lang.Object);
  public static java.lang.Object getSet(java.lang.Object);
  public static void setSet(java.lang.Object, java.lang.Object);
  public static java.lang.Object getWeakSet(java.lang.Object);
  public static void setWeakSet(java.lang.Object, java.lang.Object);
  public static java.lang.Object getJavaImporter(java.lang.Object);
  public static void setJavaImporter(java.lang.Object, java.lang.Object);
  public static java.lang.Object getJavaApi(java.lang.Object);
  public static void setJavaApi(java.lang.Object, java.lang.Object);
  jdk.nashorn.internal.objects.NativeDate getDefaultDate();
  jdk.nashorn.internal.objects.NativeRegExp getDefaultRegExp();
  public void setScriptContext(javax.script.ScriptContext);
  public javax.script.ScriptContext getScriptContext();
  public void setInitScriptContext(javax.script.ScriptContext);
  protected jdk.nashorn.internal.runtime.Context getContext();
  protected boolean useDualFields();
  public jdk.nashorn.internal.objects.Global(jdk.nashorn.internal.runtime.Context);
  public static jdk.nashorn.internal.objects.Global instance();
  public static boolean hasInstance();
  static jdk.nashorn.internal.runtime.ScriptEnvironment getEnv();
  static jdk.nashorn.internal.runtime.Context getThisContext();
  public jdk.nashorn.api.scripting.ClassFilter getClassFilter();
  public boolean isOfContext(jdk.nashorn.internal.runtime.Context);
  public boolean isStrictContext();
  public void initBuiltinObjects(javax.script.ScriptEngine);
  public java.lang.Object wrapAsObject(java.lang.Object);
  public static jdk.dynalink.linker.GuardedInvocation primitiveLookup(jdk.dynalink.linker.LinkRequest, java.lang.Object);
  public static java.lang.invoke.MethodHandle getPrimitiveWrapFilter(java.lang.Object);
  public jdk.nashorn.internal.runtime.ScriptObject newObject();
  public java.lang.Object getDefaultValue(jdk.nashorn.internal.runtime.ScriptObject, java.lang.Class<?>);
  public boolean isError(jdk.nashorn.internal.runtime.ScriptObject);
  public jdk.nashorn.internal.runtime.ScriptObject newError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newEvalError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newRangeError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newReferenceError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newSyntaxError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newTypeError(java.lang.String);
  public jdk.nashorn.internal.runtime.ScriptObject newURIError(java.lang.String);
  public jdk.nashorn.internal.runtime.PropertyDescriptor newGenericDescriptor(boolean, boolean);
  public jdk.nashorn.internal.runtime.PropertyDescriptor newDataDescriptor(java.lang.Object, boolean, boolean, boolean);
  public jdk.nashorn.internal.runtime.PropertyDescriptor newAccessorDescriptor(java.lang.Object, java.lang.Object, boolean, boolean);
  public jdk.nashorn.internal.runtime.linker.InvokeByName getInvokeByName(java.lang.Object, java.util.concurrent.Callable<jdk.nashorn.internal.runtime.linker.InvokeByName>);
  public java.lang.invoke.MethodHandle getDynamicInvoker(java.lang.Object, java.util.concurrent.Callable<java.lang.invoke.MethodHandle>);
  public static java.lang.Object __noSuchProperty__(java.lang.Object, java.lang.Object);
  public static java.lang.Object eval(java.lang.Object, java.lang.Object);
  public static java.lang.Object directEval(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, boolean);
  public static java.lang.Object print(java.lang.Object, java.lang.Object...);
  public static java.lang.Object println(java.lang.Object, java.lang.Object...);
  public static java.lang.Object load(java.lang.Object, java.lang.Object) throws java.io.IOException;
  public static java.lang.Object loadWithNewGlobal(java.lang.Object, java.lang.Object...) throws java.io.IOException;
  public static java.lang.Object exit(java.lang.Object, java.lang.Object);
  public jdk.nashorn.internal.runtime.ScriptObject getObjectPrototype();
  public jdk.nashorn.internal.runtime.ScriptObject getFunctionPrototype();
  public jdk.nashorn.internal.runtime.ScriptObject getArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getBooleanPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getNumberPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getDatePrototype();
  jdk.nashorn.internal.runtime.ScriptObject getRegExpPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getStringPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getEvalErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getRangeErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getReferenceErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getSyntaxErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getTypeErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getURIErrorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getJavaImporterPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getJSAdapterPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getSymbolPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getMapPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getWeakMapPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getSetPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getWeakSetPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getIteratorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getMapIteratorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getSetIteratorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getArrayIteratorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getStringIteratorPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getArrayBufferPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getDataViewPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getInt8ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getUint8ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getUint8ClampedArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getInt16ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getUint16ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getInt32ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getUint32ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getFloat32ArrayPrototype();
  jdk.nashorn.internal.runtime.ScriptObject getFloat64ArrayPrototype();
  public jdk.nashorn.internal.runtime.ScriptFunction getTypeErrorThrower();
  public static java.lang.invoke.SwitchPoint getBuiltinFunctionApplySwitchPoint();
  public static boolean isBuiltinFunctionPrototypeApply();
  public static boolean isBuiltinFunctionPrototypeCall();
  public static boolean isBuiltInJavaExtend(jdk.nashorn.internal.runtime.ScriptFunction);
  public static boolean isBuiltInJavaTo(jdk.nashorn.internal.runtime.ScriptFunction);
  public java.lang.String getClassName();
  public static java.lang.Object regExpCopy(java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeRegExp toRegExp(java.lang.Object);
  public static java.lang.Object toObject(java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeArray allocate(java.lang.Object[]);
  public static jdk.nashorn.internal.objects.NativeArray allocate(double[]);
  public static jdk.nashorn.internal.objects.NativeArray allocate(int[]);
  public static jdk.nashorn.internal.runtime.ScriptObject allocateArguments(java.lang.Object[], java.lang.Object, int);
  public static boolean isEval(java.lang.Object);
  public static java.lang.Object replaceLocationPropertyPlaceholder(java.lang.Object, java.lang.Object);
  public static boolean isLocationPropertyPlaceholder(java.lang.Object);
  public static java.lang.Object newRegExp(java.lang.String, java.lang.String);
  public static jdk.nashorn.internal.runtime.ScriptObject objectPrototype();
  public static jdk.nashorn.internal.runtime.ScriptObject newEmptyInstance();
  public static jdk.nashorn.internal.runtime.ScriptObject checkObject(java.lang.Object);
  public static void checkObjectCoercible(java.lang.Object);
  public final jdk.nashorn.internal.runtime.ScriptObject getLexicalScope();
  public void addBoundProperties(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.Property[]);
  public jdk.dynalink.linker.GuardedInvocation findGetMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.nashorn.internal.runtime.FindProperty findProperty(java.lang.Object, boolean, boolean, jdk.nashorn.internal.runtime.ScriptObject);
  public jdk.dynalink.linker.GuardedInvocation findSetMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  public void addShellBuiltins();
  jdk.nashorn.internal.runtime.regexp.RegExpResult getLastRegExpResult();
  void setLastRegExpResult(jdk.nashorn.internal.runtime.regexp.RegExpResult);
  protected boolean isGlobal();
  static {};
  public static void $clinit$();
  public java.lang.Object G$arguments();
  public void S$arguments(java.lang.Object);
  public java.lang.Object G$parseInt();
  public void S$parseInt(java.lang.Object);
  public java.lang.Object G$parseFloat();
  public void S$parseFloat(java.lang.Object);
  public java.lang.Object G$isNaN();
  public void S$isNaN(java.lang.Object);
  public java.lang.Object G$isFinite();
  public void S$isFinite(java.lang.Object);
  public java.lang.Object G$encodeURI();
  public void S$encodeURI(java.lang.Object);
  public java.lang.Object G$encodeURIComponent();
  public void S$encodeURIComponent(java.lang.Object);
  public java.lang.Object G$decodeURI();
  public void S$decodeURI(java.lang.Object);
  public java.lang.Object G$decodeURIComponent();
  public void S$decodeURIComponent(java.lang.Object);
  public java.lang.Object G$escape();
  public void S$escape(java.lang.Object);
  public java.lang.Object G$unescape();
  public void S$unescape(java.lang.Object);
  public java.lang.Object G$print();
  public void S$print(java.lang.Object);
  public java.lang.Object G$load();
  public void S$load(java.lang.Object);
  public java.lang.Object G$loadWithNewGlobal();
  public void S$loadWithNewGlobal(java.lang.Object);
  public java.lang.Object G$exit();
  public void S$exit(java.lang.Object);
  public java.lang.Object G$quit();
  public void S$quit(java.lang.Object);
  public double G$NaN();
  public double G$Infinity();
  public java.lang.Object G$undefined();
  public java.lang.Object G$eval();
  public void S$eval(java.lang.Object);
  public java.lang.Object G$object();
  public void S$object(java.lang.Object);
  public java.lang.Object G$function();
  public void S$function(java.lang.Object);
  public java.lang.Object G$array();
  public void S$array(java.lang.Object);
  public java.lang.Object G$string();
  public void S$string(java.lang.Object);
  public java.lang.Object G$_boolean();
  public void S$_boolean(java.lang.Object);
  public java.lang.Object G$number();
  public void S$number(java.lang.Object);
  public java.lang.Object G$math();
  public void S$math(java.lang.Object);
  public java.lang.Object G$error();
  public void S$error(java.lang.Object);
  public java.lang.Object G$referenceError();
  public void S$referenceError(java.lang.Object);
  public java.lang.Object G$syntaxError();
  public void S$syntaxError(java.lang.Object);
  public java.lang.Object G$typeError();
  public void S$typeError(java.lang.Object);
  public java.lang.Object G$packages();
  public void S$packages(java.lang.Object);
  public java.lang.Object G$com();
  public void S$com(java.lang.Object);
  public java.lang.Object G$edu();
  public void S$edu(java.lang.Object);
  public java.lang.Object G$java();
  public void S$java(java.lang.Object);
  public java.lang.Object G$javafx();
  public void S$javafx(java.lang.Object);
  public java.lang.Object G$javax();
  public void S$javax(java.lang.Object);
  public java.lang.Object G$org();
  public void S$org(java.lang.Object);
  public java.lang.Object G$__FILE__();
  public java.lang.Object G$__DIR__();
  public java.lang.Object G$__LINE__();
}
