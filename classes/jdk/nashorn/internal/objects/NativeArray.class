Compiled from "NativeArray.java"
public final class jdk.nashorn.internal.objects.NativeArray extends jdk.nashorn.internal.runtime.ScriptObject implements jdk.nashorn.internal.runtime.OptimisticBuiltins {
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.objects.NativeArray();
  jdk.nashorn.internal.objects.NativeArray(long);
  jdk.nashorn.internal.objects.NativeArray(int[]);
  jdk.nashorn.internal.objects.NativeArray(double[]);
  jdk.nashorn.internal.objects.NativeArray(long[]);
  jdk.nashorn.internal.objects.NativeArray(java.lang.Object[]);
  jdk.nashorn.internal.objects.NativeArray(jdk.nashorn.internal.runtime.arrays.ArrayData);
  jdk.nashorn.internal.objects.NativeArray(jdk.nashorn.internal.runtime.arrays.ArrayData, jdk.nashorn.internal.objects.Global);
  protected jdk.dynalink.linker.GuardedInvocation findGetIndexMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findSetIndexMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  public java.lang.String getClassName();
  public java.lang.Object getLength();
  public boolean defineOwnProperty(java.lang.Object, java.lang.Object, boolean);
  public final void defineOwnProperty(int, java.lang.Object);
  public java.lang.Object[] asObjectArray();
  public void setIsLengthNotWritable();
  public static boolean isArray(java.lang.Object, java.lang.Object);
  public static java.lang.Object length(java.lang.Object);
  public static void length(java.lang.Object, java.lang.Object);
  public static java.lang.Object getProtoLength(java.lang.Object);
  public static void setProtoLength(java.lang.Object, java.lang.Object);
  static long validLength(java.lang.Object);
  public static java.lang.Object toString(java.lang.Object);
  public static java.lang.Object assertNumeric(java.lang.Object);
  public static java.lang.String toLocaleString(java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeArray construct(boolean, java.lang.Object, java.lang.Object...);
  public static jdk.nashorn.internal.objects.NativeArray construct(boolean, java.lang.Object);
  public static java.lang.Object construct(boolean, java.lang.Object, boolean);
  public static jdk.nashorn.internal.objects.NativeArray construct(boolean, java.lang.Object, int);
  public static jdk.nashorn.internal.objects.NativeArray construct(boolean, java.lang.Object, long);
  public static jdk.nashorn.internal.objects.NativeArray construct(boolean, java.lang.Object, double);
  public static jdk.nashorn.internal.objects.NativeArray concat(java.lang.Object, int);
  public static jdk.nashorn.internal.objects.NativeArray concat(java.lang.Object, double);
  public static jdk.nashorn.internal.objects.NativeArray concat(java.lang.Object, java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeArray concat(java.lang.Object, java.lang.Object...);
  public static java.lang.String join(java.lang.Object, java.lang.Object);
  public static int popInt(java.lang.Object);
  public static double popDouble(java.lang.Object);
  public static java.lang.Object popObject(java.lang.Object);
  public static java.lang.Object pop(java.lang.Object);
  public static double push(java.lang.Object, int);
  public static double push(java.lang.Object, double);
  public static double pushObject(java.lang.Object, java.lang.Object);
  public static java.lang.Object push(java.lang.Object, java.lang.Object...);
  public static double push(java.lang.Object, java.lang.Object);
  public static java.lang.Object reverse(java.lang.Object);
  public static java.lang.Object shift(java.lang.Object);
  public static java.lang.Object slice(java.lang.Object, java.lang.Object, java.lang.Object);
  public static jdk.nashorn.internal.runtime.ScriptObject sort(java.lang.Object, java.lang.Object);
  public static java.lang.Object splice(java.lang.Object, java.lang.Object...);
  public static java.lang.Object unshift(java.lang.Object, java.lang.Object...);
  public static double indexOf(java.lang.Object, java.lang.Object, java.lang.Object);
  public static double lastIndexOf(java.lang.Object, java.lang.Object...);
  public static boolean every(java.lang.Object, java.lang.Object, java.lang.Object);
  public static boolean some(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object forEach(java.lang.Object, java.lang.Object, java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeArray map(java.lang.Object, java.lang.Object, java.lang.Object);
  public static jdk.nashorn.internal.objects.NativeArray filter(java.lang.Object, java.lang.Object, java.lang.Object);
  public static java.lang.Object reduce(java.lang.Object, java.lang.Object...);
  public static java.lang.Object reduceRight(java.lang.Object, java.lang.Object...);
  public static java.lang.Object entries(java.lang.Object);
  public static java.lang.Object keys(java.lang.Object);
  public static java.lang.Object values(java.lang.Object);
  public static java.lang.Object getIterator(java.lang.Object);
  public java.lang.String toString();
  public jdk.nashorn.internal.objects.annotations.SpecializedFunction$LinkLogic getLinkLogic(java.lang.Class<? extends jdk.nashorn.internal.objects.annotations.SpecializedFunction$LinkLogic>);
  public boolean hasPerInstanceAssumptions();
  static {};
  public static void $clinit$();
}
