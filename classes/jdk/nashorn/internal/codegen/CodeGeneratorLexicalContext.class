Compiled from "CodeGeneratorLexicalContext.java"
final class jdk.nashorn.internal.codegen.CodeGeneratorLexicalContext extends jdk.nashorn.internal.ir.LexicalContext {
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.codegen.CodeGeneratorLexicalContext();
  public <T extends jdk.nashorn.internal.ir.LexicalContextNode> T push(T);
  void enterSplitLiteral();
  void exitSplitLiteral();
  public <T extends jdk.nashorn.internal.ir.Node> T pop(T);
  boolean inDynamicScope();
  boolean inSplitLiteral();
  jdk.nashorn.internal.codegen.MethodEmitter pushMethodEmitter(jdk.nashorn.internal.codegen.MethodEmitter);
  jdk.nashorn.internal.codegen.MethodEmitter popMethodEmitter(jdk.nashorn.internal.codegen.MethodEmitter);
  void pushUnwarrantedOptimismHandlers();
  java.util.Map<java.lang.String, java.util.Collection<jdk.nashorn.internal.codegen.Label>> getUnwarrantedOptimismHandlers();
  java.util.Map<java.lang.String, java.util.Collection<jdk.nashorn.internal.codegen.Label>> popUnwarrantedOptimismHandlers();
  jdk.nashorn.internal.codegen.CompileUnit pushCompileUnit(jdk.nashorn.internal.codegen.CompileUnit);
  jdk.nashorn.internal.codegen.CompileUnit popCompileUnit(jdk.nashorn.internal.codegen.CompileUnit);
  boolean hasCompileUnits();
  java.util.Collection<jdk.nashorn.internal.codegen.SharedScopeCall> getScopeCalls();
  jdk.nashorn.internal.codegen.SharedScopeCall getScopeCall(jdk.nashorn.internal.codegen.CompileUnit, jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type, jdk.nashorn.internal.codegen.types.Type, jdk.nashorn.internal.codegen.types.Type[], int, boolean);
  jdk.nashorn.internal.codegen.SharedScopeCall getScopeGet(jdk.nashorn.internal.codegen.CompileUnit, jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type, int, boolean);
  void onEnterBlock(jdk.nashorn.internal.ir.Block);
  int getUsedSlotCount();
  void releaseSlots();
  static jdk.nashorn.internal.codegen.types.Type getTypeForSlotDescriptor(char);
  void pushDiscard(jdk.nashorn.internal.ir.Expression);
  boolean popDiscardIfCurrent(jdk.nashorn.internal.ir.Expression);
  boolean isCurrentDiscard(jdk.nashorn.internal.ir.Expression);
  int quickSlot(jdk.nashorn.internal.codegen.types.Type);
  static {};
}
