Compiled from "Lower.java"
final class jdk.nashorn.internal.codegen.Lower extends jdk.nashorn.internal.ir.visitor.NodeOperatorVisitor<jdk.nashorn.internal.ir.BlockLexicalContext> implements jdk.nashorn.internal.runtime.logging.Loggable {
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.codegen.Lower(jdk.nashorn.internal.codegen.Compiler);
  public jdk.nashorn.internal.runtime.logging.DebugLogger getLogger();
  public jdk.nashorn.internal.runtime.logging.DebugLogger initLogger(jdk.nashorn.internal.runtime.Context);
  public boolean enterBreakNode(jdk.nashorn.internal.ir.BreakNode);
  public jdk.nashorn.internal.ir.Node leaveCallNode(jdk.nashorn.internal.ir.CallNode);
  public boolean enterCatchNode(jdk.nashorn.internal.ir.CatchNode);
  public jdk.nashorn.internal.ir.Node leaveCatchNode(jdk.nashorn.internal.ir.CatchNode);
  public boolean enterContinueNode(jdk.nashorn.internal.ir.ContinueNode);
  public boolean enterDebuggerNode(jdk.nashorn.internal.ir.DebuggerNode);
  public boolean enterJumpToInlinedFinally(jdk.nashorn.internal.ir.JumpToInlinedFinally);
  public boolean enterEmptyNode(jdk.nashorn.internal.ir.EmptyNode);
  public jdk.nashorn.internal.ir.Node leaveIndexNode(jdk.nashorn.internal.ir.IndexNode);
  public jdk.nashorn.internal.ir.Node leaveDELETE(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveExpressionStatement(jdk.nashorn.internal.ir.ExpressionStatement);
  public jdk.nashorn.internal.ir.Node leaveBlockStatement(jdk.nashorn.internal.ir.BlockStatement);
  public boolean enterForNode(jdk.nashorn.internal.ir.ForNode);
  public jdk.nashorn.internal.ir.Node leaveForNode(jdk.nashorn.internal.ir.ForNode);
  public boolean enterFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public jdk.nashorn.internal.ir.Node leaveFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public jdk.nashorn.internal.ir.Node leaveIfNode(jdk.nashorn.internal.ir.IfNode);
  public jdk.nashorn.internal.ir.Node leaveIN(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveINSTANCEOF(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveLabelNode(jdk.nashorn.internal.ir.LabelNode);
  public jdk.nashorn.internal.ir.Node leaveReturnNode(jdk.nashorn.internal.ir.ReturnNode);
  public jdk.nashorn.internal.ir.Node leaveCaseNode(jdk.nashorn.internal.ir.CaseNode);
  public jdk.nashorn.internal.ir.Node leaveSwitchNode(jdk.nashorn.internal.ir.SwitchNode);
  public jdk.nashorn.internal.ir.Node leaveThrowNode(jdk.nashorn.internal.ir.ThrowNode);
  public jdk.nashorn.internal.ir.Node leaveTryNode(jdk.nashorn.internal.ir.TryNode);
  public boolean enterUnaryNode(jdk.nashorn.internal.ir.UnaryNode);
  public boolean enterASSIGN(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveVarNode(jdk.nashorn.internal.ir.VarNode);
  public jdk.nashorn.internal.ir.Node leaveWhileNode(jdk.nashorn.internal.ir.WhileNode);
  public jdk.nashorn.internal.ir.Node leaveWithNode(jdk.nashorn.internal.ir.WithNode);
  public boolean enterClassNode(jdk.nashorn.internal.ir.ClassNode);
  static {};
}
