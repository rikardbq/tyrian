Compiled from "Compiler.java"
public final class jdk.nashorn.internal.codegen.Compiler implements jdk.nashorn.internal.runtime.logging.Loggable {
  public static final java.lang.String SCRIPTS_PACKAGE;
  public static final java.lang.String OBJECTS_PACKAGE;
  static final boolean $assertionsDisabled;
  public static jdk.nashorn.internal.codegen.Compiler forInitialCompilation(jdk.nashorn.internal.runtime.CodeInstaller, jdk.nashorn.internal.runtime.Source, jdk.nashorn.internal.runtime.ErrorManager, boolean);
  public static jdk.nashorn.internal.codegen.Compiler forNoInstallerCompilation(jdk.nashorn.internal.runtime.Context, jdk.nashorn.internal.runtime.Source, boolean);
  public static jdk.nashorn.internal.codegen.Compiler forOnDemandCompilation(jdk.nashorn.internal.runtime.CodeInstaller, jdk.nashorn.internal.runtime.Source, boolean, jdk.nashorn.internal.runtime.RecompilableScriptFunctionData, jdk.nashorn.internal.codegen.TypeMap, java.util.Map<java.lang.Integer, jdk.nashorn.internal.codegen.types.Type>, java.lang.Object, int[], jdk.nashorn.internal.runtime.ScriptObject);
  void declareLocalSymbol(java.lang.String);
  void setData(jdk.nashorn.internal.runtime.RecompilableScriptFunctionData);
  public jdk.nashorn.internal.runtime.logging.DebugLogger getLogger();
  public jdk.nashorn.internal.runtime.logging.DebugLogger initLogger(jdk.nashorn.internal.runtime.Context);
  jdk.nashorn.internal.runtime.ScriptEnvironment getScriptEnvironment();
  boolean isOnDemandCompilation();
  boolean useOptimisticTypes();
  jdk.nashorn.internal.runtime.Context getContext();
  jdk.nashorn.internal.codegen.types.Type getOptimisticType(jdk.nashorn.internal.ir.Optimistic);
  boolean hasStringPropertyIterator(jdk.nashorn.internal.ir.Expression);
  void addInvalidatedProgramPoint(int, jdk.nashorn.internal.codegen.types.Type);
  public java.util.Map<java.lang.Integer, jdk.nashorn.internal.codegen.types.Type> getInvalidatedProgramPoints();
  jdk.nashorn.internal.codegen.TypeMap getTypeMap();
  java.lang.invoke.MethodType getCallSiteType(jdk.nashorn.internal.ir.FunctionNode);
  jdk.nashorn.internal.codegen.types.Type getParamType(jdk.nashorn.internal.ir.FunctionNode, int);
  jdk.nashorn.internal.codegen.types.Type getReturnType();
  public jdk.nashorn.internal.ir.FunctionNode compile(jdk.nashorn.internal.ir.FunctionNode, jdk.nashorn.internal.codegen.Compiler$CompilationPhases) throws jdk.nashorn.internal.codegen.CompilationException;
  jdk.nashorn.internal.runtime.Source getSource();
  java.util.Map<java.lang.String, byte[]> getBytecode();
  void clearBytecode();
  jdk.nashorn.internal.codegen.CompileUnit getFirstCompileUnit();
  java.util.Set<jdk.nashorn.internal.codegen.CompileUnit> getCompileUnits();
  jdk.nashorn.internal.codegen.ConstantData getConstantData();
  jdk.nashorn.internal.runtime.CodeInstaller getCodeInstaller();
  void addClass(java.lang.String, byte[]);
  java.lang.String nextCompileUnitName();
  public void persistClassInfo(java.lang.String, jdk.nashorn.internal.ir.FunctionNode);
  public static void updateCompilationId(int);
  jdk.nashorn.internal.codegen.CompileUnit addCompileUnit(long);
  jdk.nashorn.internal.codegen.CompileUnit createCompileUnit(java.lang.String, long);
  boolean isStrict();
  void replaceCompileUnits(java.util.Set<jdk.nashorn.internal.codegen.CompileUnit>);
  jdk.nashorn.internal.codegen.CompileUnit findUnit(long);
  public static java.lang.String binaryName(java.lang.String);
  jdk.nashorn.internal.runtime.RecompilableScriptFunctionData getScriptFunctionData(int);
  boolean isGlobalSymbol(jdk.nashorn.internal.ir.FunctionNode, java.lang.String);
  int[] getContinuationEntryPoints();
  jdk.nashorn.internal.codegen.types.Type getInvalidatedProgramPointType(int);
  static {};
}
