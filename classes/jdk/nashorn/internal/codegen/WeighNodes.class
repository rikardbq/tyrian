Compiled from "WeighNodes.java"
final class jdk.nashorn.internal.codegen.WeighNodes extends jdk.nashorn.internal.ir.visitor.NodeOperatorVisitor<jdk.nashorn.internal.ir.LexicalContext> {
  static final long FUNCTION_WEIGHT;
  static final long AASTORE_WEIGHT;
  static final long ACCESS_WEIGHT;
  static final long ADD_WEIGHT;
  static final long BREAK_WEIGHT;
  static final long CALL_WEIGHT;
  static final long CATCH_WEIGHT;
  static final long COMPARE_WEIGHT;
  static final long CONTINUE_WEIGHT;
  static final long IF_WEIGHT;
  static final long LITERAL_WEIGHT;
  static final long LOOP_WEIGHT;
  static final long NEW_WEIGHT;
  static final long FUNC_EXPR_WEIGHT;
  static final long RETURN_WEIGHT;
  static final long SPLIT_WEIGHT;
  static final long SWITCH_WEIGHT;
  static final long THROW_WEIGHT;
  static final long VAR_WEIGHT;
  static final long WITH_WEIGHT;
  static final long OBJECT_WEIGHT;
  static final long SETPROP_WEIGHT;
  static long weigh(jdk.nashorn.internal.ir.Node);
  static long weigh(jdk.nashorn.internal.ir.Node, java.util.Map<jdk.nashorn.internal.ir.Node, java.lang.Long>);
  public jdk.nashorn.internal.ir.Node leaveAccessNode(jdk.nashorn.internal.ir.AccessNode);
  public boolean enterBlock(jdk.nashorn.internal.ir.Block);
  public jdk.nashorn.internal.ir.Node leaveBreakNode(jdk.nashorn.internal.ir.BreakNode);
  public jdk.nashorn.internal.ir.Node leaveCallNode(jdk.nashorn.internal.ir.CallNode);
  public jdk.nashorn.internal.ir.Node leaveCatchNode(jdk.nashorn.internal.ir.CatchNode);
  public jdk.nashorn.internal.ir.Node leaveContinueNode(jdk.nashorn.internal.ir.ContinueNode);
  public jdk.nashorn.internal.ir.Node leaveExpressionStatement(jdk.nashorn.internal.ir.ExpressionStatement);
  public jdk.nashorn.internal.ir.Node leaveForNode(jdk.nashorn.internal.ir.ForNode);
  public boolean enterFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public jdk.nashorn.internal.ir.Node leaveIdentNode(jdk.nashorn.internal.ir.IdentNode);
  public jdk.nashorn.internal.ir.Node leaveIfNode(jdk.nashorn.internal.ir.IfNode);
  public jdk.nashorn.internal.ir.Node leaveIndexNode(jdk.nashorn.internal.ir.IndexNode);
  public jdk.nashorn.internal.ir.Node leaveJumpToInlinedFinally(jdk.nashorn.internal.ir.JumpToInlinedFinally);
  public boolean enterLiteralNode(jdk.nashorn.internal.ir.LiteralNode);
  public boolean enterObjectNode(jdk.nashorn.internal.ir.ObjectNode);
  public jdk.nashorn.internal.ir.Node leavePropertyNode(jdk.nashorn.internal.ir.PropertyNode);
  public jdk.nashorn.internal.ir.Node leaveReturnNode(jdk.nashorn.internal.ir.ReturnNode);
  public jdk.nashorn.internal.ir.Node leaveRuntimeNode(jdk.nashorn.internal.ir.RuntimeNode);
  public boolean enterSplitNode(jdk.nashorn.internal.ir.SplitNode);
  public jdk.nashorn.internal.ir.Node leaveSwitchNode(jdk.nashorn.internal.ir.SwitchNode);
  public jdk.nashorn.internal.ir.Node leaveThrowNode(jdk.nashorn.internal.ir.ThrowNode);
  public jdk.nashorn.internal.ir.Node leaveTryNode(jdk.nashorn.internal.ir.TryNode);
  public jdk.nashorn.internal.ir.Node leaveVarNode(jdk.nashorn.internal.ir.VarNode);
  public jdk.nashorn.internal.ir.Node leaveWhileNode(jdk.nashorn.internal.ir.WhileNode);
  public jdk.nashorn.internal.ir.Node leaveWithNode(jdk.nashorn.internal.ir.WithNode);
  public jdk.nashorn.internal.ir.Node leavePOS(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveBIT_NOT(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveDECINC(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveDELETE(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveNEW(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveNOT(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveNEG(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveTYPEOF(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveVOID(jdk.nashorn.internal.ir.UnaryNode);
  public jdk.nashorn.internal.ir.Node leaveADD(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveAND(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_ADD(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_BIT_AND(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_BIT_OR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_BIT_XOR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_DIV(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_MOD(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_MUL(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_SAR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_SHL(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_SHR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveASSIGN_SUB(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveARROW(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveBIT_AND(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveBIT_OR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveBIT_XOR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveCOMMARIGHT(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveDIV(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveEQ(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveEQ_STRICT(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveGE(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveGT(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveIN(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveINSTANCEOF(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveLE(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveLT(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveMOD(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveMUL(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveNE(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveNE_STRICT(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveOR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveSAR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveSHL(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveSHR(jdk.nashorn.internal.ir.BinaryNode);
  public jdk.nashorn.internal.ir.Node leaveSUB(jdk.nashorn.internal.ir.BinaryNode);
}
