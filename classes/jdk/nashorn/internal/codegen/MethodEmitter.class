Compiled from "MethodEmitter.java"
public class jdk.nashorn.internal.codegen.MethodEmitter {
  protected jdk.nashorn.internal.ir.FunctionNode functionNode;
  static final int LARGE_STRING_THRESHOLD;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.codegen.MethodEmitter(jdk.nashorn.internal.codegen.ClassEmitter, jdk.internal.org.objectweb.asm.MethodVisitor);
  jdk.nashorn.internal.codegen.MethodEmitter(jdk.nashorn.internal.codegen.ClassEmitter, jdk.internal.org.objectweb.asm.MethodVisitor, jdk.nashorn.internal.ir.FunctionNode);
  public void begin();
  public void end();
  boolean isReachable();
  public java.lang.String toString();
  void pushType(jdk.nashorn.internal.codegen.types.Type);
  final jdk.nashorn.internal.codegen.types.Type peekType(int);
  final jdk.nashorn.internal.codegen.types.Type peekType();
  jdk.nashorn.internal.codegen.MethodEmitter _new(java.lang.String, jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter _new(java.lang.Class<?>);
  jdk.nashorn.internal.codegen.MethodEmitter newInstance(java.lang.Class<?>);
  jdk.nashorn.internal.codegen.MethodEmitter dup(int);
  jdk.nashorn.internal.codegen.MethodEmitter dup2();
  jdk.nashorn.internal.codegen.MethodEmitter dup();
  jdk.nashorn.internal.codegen.MethodEmitter pop();
  jdk.nashorn.internal.codegen.MethodEmitter pop2();
  jdk.nashorn.internal.codegen.MethodEmitter swap();
  void pack();
  void initializeMethodParameter(jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type, jdk.nashorn.internal.codegen.Label);
  jdk.nashorn.internal.codegen.MethodEmitter newStringBuilder();
  jdk.nashorn.internal.codegen.MethodEmitter stringBuilderAppend();
  jdk.nashorn.internal.codegen.MethodEmitter and();
  jdk.nashorn.internal.codegen.MethodEmitter or();
  jdk.nashorn.internal.codegen.MethodEmitter xor();
  jdk.nashorn.internal.codegen.MethodEmitter shr();
  jdk.nashorn.internal.codegen.MethodEmitter shl();
  jdk.nashorn.internal.codegen.MethodEmitter sar();
  jdk.nashorn.internal.codegen.MethodEmitter neg(int);
  void _catch(jdk.nashorn.internal.codegen.Label);
  void _catch(java.util.Collection<jdk.nashorn.internal.codegen.Label>);
  void _try(jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label, java.lang.Class<?>, boolean);
  void _try(jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label, java.lang.Class<?>);
  void _try(jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label);
  void markLabelAsOptimisticCatchHandler(jdk.nashorn.internal.codegen.Label, int);
  jdk.nashorn.internal.codegen.MethodEmitter loadConstants();
  jdk.nashorn.internal.codegen.MethodEmitter loadUndefined(jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter loadForcedInitializer(jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter loadEmpty(jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter loadNull();
  jdk.nashorn.internal.codegen.MethodEmitter loadType(java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter load(boolean);
  jdk.nashorn.internal.codegen.MethodEmitter load(int);
  jdk.nashorn.internal.codegen.MethodEmitter load(double);
  jdk.nashorn.internal.codegen.MethodEmitter load(long);
  jdk.nashorn.internal.codegen.MethodEmitter arraylength();
  jdk.nashorn.internal.codegen.MethodEmitter load(java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter load(jdk.nashorn.internal.ir.IdentNode);
  jdk.nashorn.internal.codegen.MethodEmitter load(jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter load(jdk.nashorn.internal.codegen.types.Type, int);
  jdk.nashorn.internal.codegen.MethodEmitter loadHandle(java.lang.String, java.lang.String, java.lang.String, java.util.EnumSet<jdk.nashorn.internal.codegen.ClassEmitter$Flag>);
  boolean hasScope();
  jdk.nashorn.internal.codegen.MethodEmitter loadCompilerConstant(jdk.nashorn.internal.codegen.CompilerConstants);
  jdk.nashorn.internal.codegen.MethodEmitter loadCompilerConstant(jdk.nashorn.internal.codegen.CompilerConstants, jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter loadScope();
  jdk.nashorn.internal.codegen.MethodEmitter setSplitState(int);
  void storeCompilerConstant(jdk.nashorn.internal.codegen.CompilerConstants);
  void storeCompilerConstant(jdk.nashorn.internal.codegen.CompilerConstants, jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter arrayload();
  void arraystore();
  void store(jdk.nashorn.internal.ir.IdentNode);
  void closeLocalVariable(jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.Label);
  void markDeadLocalVariable(jdk.nashorn.internal.ir.Symbol);
  void markDeadSlots(int, int);
  void store(jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type);
  void store(jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.codegen.types.Type, boolean);
  void storeHidden(jdk.nashorn.internal.codegen.types.Type, int);
  void storeHidden(jdk.nashorn.internal.codegen.types.Type, int, boolean);
  void storeTemp(jdk.nashorn.internal.codegen.types.Type, int);
  void onLocalStore(jdk.nashorn.internal.codegen.types.Type, int);
  void defineBlockLocalVariable(int, int);
  void defineTemporaryLocalVariable(int, int);
  int defineTemporaryLocalVariable(int);
  void undefineLocalVariables(int, boolean);
  java.util.List<jdk.nashorn.internal.codegen.types.Type> getLocalVariableTypes();
  java.util.List<jdk.nashorn.internal.codegen.types.Type> getWidestLiveLocals(java.util.List<jdk.nashorn.internal.codegen.types.Type>);
  java.lang.String markSymbolBoundariesInLvarTypesDescriptor(java.lang.String);
  void iinc(int, int);
  public void athrow();
  jdk.nashorn.internal.codegen.MethodEmitter _instanceof(java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter _instanceof(java.lang.Class<?>);
  jdk.nashorn.internal.codegen.MethodEmitter checkcast(java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter checkcast(java.lang.Class<?>);
  jdk.nashorn.internal.codegen.MethodEmitter newarray(jdk.nashorn.internal.codegen.types.ArrayType);
  jdk.nashorn.internal.codegen.MethodEmitter multinewarray(jdk.nashorn.internal.codegen.types.ArrayType, int);
  jdk.nashorn.internal.codegen.MethodEmitter invoke(jdk.nashorn.internal.codegen.CompilerConstants$Call);
  jdk.nashorn.internal.codegen.MethodEmitter invokespecial(java.lang.String, java.lang.String, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter invokevirtual(java.lang.String, java.lang.String, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter invokestatic(java.lang.String, java.lang.String, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter invokestatic(java.lang.String, java.lang.String, java.lang.String, jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter invokeinterface(java.lang.String, java.lang.String, java.lang.String);
  static jdk.internal.org.objectweb.asm.Label[] getLabels(jdk.nashorn.internal.codegen.Label...);
  void lookupswitch(jdk.nashorn.internal.codegen.Label, int[], jdk.nashorn.internal.codegen.Label...);
  void tableswitch(int, int, jdk.nashorn.internal.codegen.Label, jdk.nashorn.internal.codegen.Label...);
  void conditionalJump(jdk.nashorn.internal.codegen.Condition, jdk.nashorn.internal.codegen.Label);
  void conditionalJump(jdk.nashorn.internal.codegen.Condition, boolean, jdk.nashorn.internal.codegen.Label);
  void _return(jdk.nashorn.internal.codegen.types.Type);
  void _return();
  void returnVoid();
  jdk.nashorn.internal.codegen.MethodEmitter cmp(boolean);
  void if_acmpeq(jdk.nashorn.internal.codegen.Label);
  void if_acmpne(jdk.nashorn.internal.codegen.Label);
  void ifnull(jdk.nashorn.internal.codegen.Label);
  void ifnonnull(jdk.nashorn.internal.codegen.Label);
  void ifeq(jdk.nashorn.internal.codegen.Label);
  void if_icmpeq(jdk.nashorn.internal.codegen.Label);
  void ifne(jdk.nashorn.internal.codegen.Label);
  void if_icmpne(jdk.nashorn.internal.codegen.Label);
  void iflt(jdk.nashorn.internal.codegen.Label);
  void if_icmplt(jdk.nashorn.internal.codegen.Label);
  void ifle(jdk.nashorn.internal.codegen.Label);
  void if_icmple(jdk.nashorn.internal.codegen.Label);
  void ifgt(jdk.nashorn.internal.codegen.Label);
  void if_icmpgt(jdk.nashorn.internal.codegen.Label);
  void ifge(jdk.nashorn.internal.codegen.Label);
  void if_icmpge(jdk.nashorn.internal.codegen.Label);
  void _goto(jdk.nashorn.internal.codegen.Label);
  void gotoLoopStart(jdk.nashorn.internal.codegen.Label);
  void uncheckedGoto(jdk.nashorn.internal.codegen.Label);
  void canThrow(jdk.nashorn.internal.codegen.Label);
  void label(jdk.nashorn.internal.codegen.Label);
  void breakLabel(jdk.nashorn.internal.codegen.Label, int);
  jdk.nashorn.internal.codegen.MethodEmitter convert(jdk.nashorn.internal.codegen.types.Type);
  jdk.nashorn.internal.codegen.MethodEmitter add(int);
  jdk.nashorn.internal.codegen.MethodEmitter sub(int);
  jdk.nashorn.internal.codegen.MethodEmitter mul(int);
  jdk.nashorn.internal.codegen.MethodEmitter div(int);
  jdk.nashorn.internal.codegen.MethodEmitter rem(int);
  protected jdk.nashorn.internal.codegen.types.Type[] getTypesFromStack(int);
  int[] getLocalLoadsOnStack(int, int);
  int getStackSize();
  int getFirstTemp();
  int getUsedSlotsWithLiveTemporaries();
  jdk.nashorn.internal.codegen.MethodEmitter invalidateSpecialName(java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicNew(int, int);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicNew(int, int, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicCall(jdk.nashorn.internal.codegen.types.Type, int, int);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicCall(jdk.nashorn.internal.codegen.types.Type, int, int, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicArrayPopulatorCall(int, int);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicGet(jdk.nashorn.internal.codegen.types.Type, java.lang.String, int, boolean, boolean);
  void dynamicSet(java.lang.String, int, boolean);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicRemove(java.lang.String, int, boolean);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicGetIndex(jdk.nashorn.internal.codegen.types.Type, int, boolean);
  void dynamicSetIndex(int);
  jdk.nashorn.internal.codegen.MethodEmitter dynamicRemoveIndex(int);
  jdk.nashorn.internal.codegen.MethodEmitter loadKey(java.lang.Object);
  jdk.nashorn.internal.codegen.MethodEmitter getField(jdk.nashorn.internal.codegen.CompilerConstants$FieldAccess);
  void putField(jdk.nashorn.internal.codegen.CompilerConstants$FieldAccess);
  jdk.nashorn.internal.codegen.MethodEmitter getField(java.lang.String, java.lang.String, java.lang.String);
  jdk.nashorn.internal.codegen.MethodEmitter getStatic(java.lang.String, java.lang.String, java.lang.String);
  void putField(java.lang.String, java.lang.String, java.lang.String);
  void putStatic(java.lang.String, java.lang.String, java.lang.String);
  void lineNumber(int);
  void beforeJoinPoint(jdk.nashorn.internal.ir.JoinPredecessor);
  void beforeTry(jdk.nashorn.internal.ir.TryNode, jdk.nashorn.internal.codegen.Label);
  void print();
  void println();
  void print(java.lang.String);
  void println(java.lang.String);
  void stacktrace();
  void setFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  void setPreventUndefinedLoad();
  static {};
}
