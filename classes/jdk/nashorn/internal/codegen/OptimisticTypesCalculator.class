Compiled from "OptimisticTypesCalculator.java"
final class jdk.nashorn.internal.codegen.OptimisticTypesCalculator extends jdk.nashorn.internal.ir.visitor.SimpleNodeVisitor {
  final jdk.nashorn.internal.codegen.Compiler compiler;
  final java.util.Deque<java.util.BitSet> neverOptimistic;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.codegen.OptimisticTypesCalculator(jdk.nashorn.internal.codegen.Compiler);
  public boolean enterAccessNode(jdk.nashorn.internal.ir.AccessNode);
  public boolean enterPropertyNode(jdk.nashorn.internal.ir.PropertyNode);
  public boolean enterBinaryNode(jdk.nashorn.internal.ir.BinaryNode);
  public boolean enterCallNode(jdk.nashorn.internal.ir.CallNode);
  public boolean enterCatchNode(jdk.nashorn.internal.ir.CatchNode);
  public boolean enterExpressionStatement(jdk.nashorn.internal.ir.ExpressionStatement);
  public boolean enterForNode(jdk.nashorn.internal.ir.ForNode);
  public boolean enterFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public boolean enterIfNode(jdk.nashorn.internal.ir.IfNode);
  public boolean enterIndexNode(jdk.nashorn.internal.ir.IndexNode);
  public boolean enterTernaryNode(jdk.nashorn.internal.ir.TernaryNode);
  public boolean enterUnaryNode(jdk.nashorn.internal.ir.UnaryNode);
  public boolean enterVarNode(jdk.nashorn.internal.ir.VarNode);
  public boolean enterObjectNode(jdk.nashorn.internal.ir.ObjectNode);
  public boolean enterLiteralNode(jdk.nashorn.internal.ir.LiteralNode<?>);
  public boolean enterWhileNode(jdk.nashorn.internal.ir.WhileNode);
  protected jdk.nashorn.internal.ir.Node leaveDefault(jdk.nashorn.internal.ir.Node);
  public jdk.nashorn.internal.ir.Node leaveFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public jdk.nashorn.internal.ir.Node leaveIdentNode(jdk.nashorn.internal.ir.IdentNode);
  static {};
}
