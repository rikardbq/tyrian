Compiled from "CodeGenerator.java"
final class jdk.nashorn.internal.codegen.CodeGenerator extends jdk.nashorn.internal.ir.visitor.NodeOperatorVisitor<jdk.nashorn.internal.codegen.CodeGeneratorLexicalContext> implements jdk.nashorn.internal.runtime.logging.Loggable {
  static final int OBJECT_SPILL_THRESHOLD;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.codegen.CodeGenerator(jdk.nashorn.internal.codegen.Compiler, int[]);
  public jdk.nashorn.internal.runtime.logging.DebugLogger getLogger();
  public jdk.nashorn.internal.runtime.logging.DebugLogger initLogger(jdk.nashorn.internal.runtime.Context);
  int getCallSiteFlags();
  boolean isEvalCode();
  boolean useDualFields();
  jdk.nashorn.internal.codegen.MethodEmitter loadExpressionAsBoolean(jdk.nashorn.internal.ir.Expression);
  jdk.nashorn.internal.codegen.MethodEmitter loadBinaryOperands(jdk.nashorn.internal.ir.BinaryNode);
  jdk.nashorn.internal.codegen.MethodEmitter loadComparisonOperands(jdk.nashorn.internal.ir.BinaryNode);
  jdk.nashorn.internal.codegen.MethodEmitter loadExpressionAsType(jdk.nashorn.internal.ir.Expression, jdk.nashorn.internal.codegen.types.Type);
  public boolean enterBlock(jdk.nashorn.internal.ir.Block);
  boolean useOptimisticTypes();
  public jdk.nashorn.internal.ir.Node leaveBlock(jdk.nashorn.internal.ir.Block);
  public boolean enterBreakNode(jdk.nashorn.internal.ir.BreakNode);
  public boolean enterJumpToInlinedFinally(jdk.nashorn.internal.ir.JumpToInlinedFinally);
  static int nonOptimisticFlags(int);
  public boolean enterContinueNode(jdk.nashorn.internal.ir.ContinueNode);
  public boolean enterEmptyNode(jdk.nashorn.internal.ir.EmptyNode);
  public boolean enterExpressionStatement(jdk.nashorn.internal.ir.ExpressionStatement);
  public boolean enterBlockStatement(jdk.nashorn.internal.ir.BlockStatement);
  public boolean enterForNode(jdk.nashorn.internal.ir.ForNode);
  public boolean enterFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public jdk.nashorn.internal.ir.Node leaveFunctionNode(jdk.nashorn.internal.ir.FunctionNode);
  public boolean enterIfNode(jdk.nashorn.internal.ir.IfNode);
  int getLastLineNumber();
  void loadConstant(java.lang.String);
  void loadConstant(java.lang.Object);
  public boolean enterReturnNode(jdk.nashorn.internal.ir.ReturnNode);
  public boolean enterSplitReturn(jdk.nashorn.internal.ir.SplitReturn);
  public boolean enterSetSplitState(jdk.nashorn.internal.ir.SetSplitState);
  public boolean enterSwitchNode(jdk.nashorn.internal.ir.SwitchNode);
  public boolean enterThrowNode(jdk.nashorn.internal.ir.ThrowNode);
  public boolean enterTryNode(jdk.nashorn.internal.ir.TryNode);
  public boolean enterVarNode(jdk.nashorn.internal.ir.VarNode);
  public boolean enterWhileNode(jdk.nashorn.internal.ir.WhileNode);
  public boolean enterWithNode(jdk.nashorn.internal.ir.WithNode);
  public void loadVOID(jdk.nashorn.internal.ir.UnaryNode, jdk.nashorn.internal.codegen.CodeGenerator$TypeBounds);
  public void loadDELETE(jdk.nashorn.internal.ir.UnaryNode);
  public void loadADD(jdk.nashorn.internal.ir.BinaryNode, jdk.nashorn.internal.codegen.CodeGenerator$TypeBounds);
  public boolean enterLabelNode(jdk.nashorn.internal.ir.LabelNode);
  protected boolean enterDefault(jdk.nashorn.internal.ir.Node);
  void generateScopeCalls();
  static jdk.nashorn.internal.ir.LexicalContext access$000(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$100(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$200(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$300(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$400(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$500(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$600(jdk.nashorn.internal.codegen.CodeGenerator);
  static jdk.nashorn.internal.ir.LexicalContext access$700(jdk.nashorn.internal.codegen.CodeGenerator);
  static {};
}
