Compiled from "ScriptFunction.java"
public class jdk.nashorn.internal.runtime.ScriptFunction extends jdk.nashorn.internal.runtime.ScriptObject {
  public static final java.lang.invoke.MethodHandle G$PROTOTYPE;
  public static final java.lang.invoke.MethodHandle S$PROTOTYPE;
  public static final java.lang.invoke.MethodHandle G$LENGTH;
  public static final java.lang.invoke.MethodHandle G$NAME;
  public static final java.lang.invoke.MethodHandle INVOKE_SYNC;
  static final java.lang.invoke.MethodHandle ALLOCATE;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GET_SCOPE;
  protected jdk.nashorn.internal.runtime.PropertyMap allocatorMap;
  protected java.lang.Object prototype;
  static final boolean $assertionsDisabled;
  protected jdk.nashorn.internal.runtime.ScriptFunction(java.lang.String, java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.Specialization[]);
  protected jdk.nashorn.internal.runtime.ScriptFunction(java.lang.String, java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.PropertyMap, jdk.nashorn.internal.runtime.Specialization[]);
  public static jdk.nashorn.internal.runtime.ScriptFunction create(java.lang.Object[], int, jdk.nashorn.internal.runtime.ScriptObject);
  public static jdk.nashorn.internal.runtime.ScriptFunction create(java.lang.Object[], int);
  public static jdk.nashorn.internal.runtime.ScriptFunction createAnonymous();
  public static jdk.nashorn.internal.runtime.ScriptFunction createBuiltin(java.lang.String, java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.Specialization[]);
  public static jdk.nashorn.internal.runtime.ScriptFunction createBuiltin(java.lang.String, java.lang.invoke.MethodHandle);
  public static jdk.nashorn.internal.runtime.ScriptFunction createStrictBuiltin(java.lang.String, java.lang.invoke.MethodHandle);
  public final jdk.nashorn.internal.runtime.ScriptFunction createBound(java.lang.Object, java.lang.Object[]);
  public final jdk.nashorn.internal.runtime.ScriptFunction createSynchronized(java.lang.Object);
  public java.lang.String getClassName();
  public boolean isInstance(jdk.nashorn.internal.runtime.ScriptObject);
  protected jdk.nashorn.internal.runtime.ScriptFunction getTargetFunction();
  final boolean isBoundFunction();
  public final void setArity(int);
  public final boolean isStrict();
  public boolean hasAllVarsInScope();
  public final boolean needsWrappedThis();
  final java.lang.Object invoke(java.lang.Object, java.lang.Object...) throws java.lang.Throwable;
  final java.lang.Object construct(java.lang.Object...) throws java.lang.Throwable;
  public final java.lang.String safeToString();
  public final java.lang.String toString();
  public final java.lang.String toSource();
  public final java.lang.Object getPrototype();
  public final void setPrototype(java.lang.Object);
  public final java.lang.invoke.MethodHandle getBoundInvokeHandle(java.lang.Object);
  public final java.lang.String getDocumentation();
  public final java.lang.String getDocumentationKey();
  public final void setDocumentationKey(java.lang.String);
  public final java.lang.String getName();
  public final jdk.nashorn.internal.runtime.ScriptObject getScope();
  public static java.lang.Object G$prototype(java.lang.Object);
  public static void S$prototype(java.lang.Object, java.lang.Object);
  public static int G$length(java.lang.Object);
  public static java.lang.Object G$name(java.lang.Object);
  public static jdk.nashorn.internal.runtime.ScriptObject getPrototype(jdk.nashorn.internal.runtime.ScriptFunction);
  public static long getConstructorCount();
  public static long getInvokes();
  public static long getAllocations();
  protected jdk.dynalink.linker.GuardedInvocation findNewMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findCallMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  java.lang.invoke.MethodHandle getCallMethodHandle(java.lang.invoke.MethodType, java.lang.String);
  static {};
}
