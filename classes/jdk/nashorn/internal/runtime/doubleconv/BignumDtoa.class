Compiled from "BignumDtoa.java"
class jdk.nashorn.internal.runtime.doubleconv.BignumDtoa {
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.runtime.doubleconv.BignumDtoa();
  static void bignumDtoa(double, jdk.nashorn.internal.runtime.doubleconv.DtoaMode, int, jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer);
  static void generateShortestDigits(jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, boolean, jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer);
  static void generateCountedDigits(int, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer);
  static void bignumToFixed(int, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.DtoaBuffer);
  static int estimatePower(int);
  static void initialScaledStartValuesPositiveExponent(long, int, int, boolean, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum);
  static void initialScaledStartValuesNegativeExponentPositivePower(long, int, int, boolean, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum);
  static void initialScaledStartValuesNegativeExponentNegativePower(long, int, int, boolean, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum);
  static void initialScaledStartValues(long, int, boolean, int, boolean, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum);
  static int fixupMultiply10(int, boolean, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum, jdk.nashorn.internal.runtime.doubleconv.Bignum);
  static {};
}
