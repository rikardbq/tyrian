Compiled from "Context.java"
public final class jdk.nashorn.internal.runtime.Context {
  public static final java.lang.String NASHORN_SET_CONFIG;
  public static final java.lang.String NASHORN_CREATE_CONTEXT;
  public static final java.lang.String NASHORN_CREATE_GLOBAL;
  public static final java.lang.String NASHORN_GET_CONTEXT;
  public static final java.lang.String NASHORN_JAVA_REFLECTION;
  public static final java.lang.String NASHORN_DEBUG_MODE;
  public static final boolean DEBUG;
  static final boolean javaSqlFound;
  static final boolean javaSqlRowsetFound;
  final boolean _strict;
  static final boolean $assertionsDisabled;
  static long getNamedInstalledScriptCount();
  static long getAnonymousInstalledScriptCount();
  public static jdk.nashorn.internal.objects.Global getGlobal();
  public static void setGlobal(jdk.nashorn.internal.runtime.ScriptObject);
  public static void setGlobal(jdk.nashorn.internal.objects.Global);
  public static jdk.nashorn.internal.runtime.Context getContext();
  public static java.io.PrintWriter getCurrentErr();
  public static void err(java.lang.String);
  public static void err(java.lang.String, boolean);
  java.lang.ClassLoader getAppLoader();
  jdk.nashorn.internal.runtime.StructureLoader getStructLoader();
  public jdk.nashorn.internal.runtime.Context(jdk.nashorn.internal.runtime.options.Options, jdk.nashorn.internal.runtime.ErrorManager, java.lang.ClassLoader);
  public jdk.nashorn.internal.runtime.Context(jdk.nashorn.internal.runtime.options.Options, jdk.nashorn.internal.runtime.ErrorManager, java.lang.ClassLoader, jdk.nashorn.api.scripting.ClassFilter);
  public jdk.nashorn.internal.runtime.Context(jdk.nashorn.internal.runtime.options.Options, jdk.nashorn.internal.runtime.ErrorManager, java.io.PrintWriter, java.io.PrintWriter, java.lang.ClassLoader);
  public jdk.nashorn.internal.runtime.Context(jdk.nashorn.internal.runtime.options.Options, jdk.nashorn.internal.runtime.ErrorManager, java.io.PrintWriter, java.io.PrintWriter, java.lang.ClassLoader, jdk.nashorn.api.scripting.ClassFilter);
  public jdk.nashorn.api.scripting.ClassFilter getClassFilter();
  jdk.nashorn.internal.runtime.GlobalConstants getGlobalConstants();
  public jdk.nashorn.internal.runtime.ErrorManager getErrorManager();
  public jdk.nashorn.internal.runtime.ScriptEnvironment getEnv();
  public java.io.PrintWriter getOut();
  public java.io.PrintWriter getErr();
  public boolean useDualFields();
  public static jdk.nashorn.internal.runtime.PropertyMap getGlobalMap();
  public jdk.nashorn.internal.runtime.ScriptFunction compileScript(jdk.nashorn.internal.runtime.Source, jdk.nashorn.internal.runtime.ScriptObject);
  public jdk.nashorn.internal.runtime.Context$MultiGlobalCompiledScript compileScript(jdk.nashorn.internal.runtime.Source);
  public java.lang.Object eval(jdk.nashorn.internal.runtime.ScriptObject, java.lang.String, java.lang.Object, java.lang.Object);
  public java.lang.Object eval(jdk.nashorn.internal.runtime.ScriptObject, java.lang.String, java.lang.Object, java.lang.Object, boolean, boolean);
  public java.lang.Object load(java.lang.Object, java.lang.Object) throws java.io.IOException;
  public java.lang.Object loadWithNewGlobal(java.lang.Object, java.lang.Object...) throws java.io.IOException;
  public static java.lang.Class<? extends jdk.nashorn.internal.runtime.ScriptObject> forStructureClass(java.lang.String) throws java.lang.ClassNotFoundException;
  public static boolean isStructureClass(java.lang.String);
  public static void checkPackageAccess(java.lang.Class<?>);
  public static void checkPackageAccess(java.lang.String);
  public static boolean isAccessibleClass(java.lang.Class<?>);
  public java.lang.Class<?> findClass(java.lang.String) throws java.lang.ClassNotFoundException;
  public static void printStackTrace(java.lang.Throwable);
  public void verify(byte[]);
  public jdk.nashorn.internal.objects.Global createGlobal();
  public jdk.nashorn.internal.objects.Global newGlobal();
  public jdk.nashorn.internal.objects.Global initGlobal(jdk.nashorn.internal.objects.Global, javax.script.ScriptEngine);
  public jdk.nashorn.internal.objects.Global initGlobal(jdk.nashorn.internal.objects.Global);
  static jdk.nashorn.internal.runtime.Context getContextTrusted();
  public static jdk.dynalink.DynamicLinker getDynamicLinker(java.lang.Class<?>);
  public static jdk.dynalink.DynamicLinker getDynamicLinker();
  static java.lang.Module createModuleTrusted(java.lang.module.ModuleDescriptor, java.lang.ClassLoader);
  static java.lang.Module createModuleTrusted(java.lang.ModuleLayer, java.lang.module.ModuleDescriptor, java.lang.ClassLoader);
  static jdk.nashorn.internal.runtime.Context getContextTrustedOrNull();
  static jdk.nashorn.internal.runtime.Context fromClass(java.lang.Class<?>);
  public jdk.nashorn.internal.runtime.logging.DebugLogger getLogger(java.lang.Class<? extends jdk.nashorn.internal.runtime.logging.Loggable>);
  public jdk.nashorn.internal.runtime.logging.DebugLogger getLogger(java.lang.Class<? extends jdk.nashorn.internal.runtime.logging.Loggable>, java.util.function.Consumer<jdk.nashorn.internal.runtime.logging.DebugLogger>);
  public java.lang.invoke.MethodHandle addLoggingToHandle(java.lang.Class<? extends jdk.nashorn.internal.runtime.logging.Loggable>, java.lang.invoke.MethodHandle, java.util.function.Supplier<java.lang.String>);
  public java.lang.invoke.MethodHandle addLoggingToHandle(java.lang.Class<? extends jdk.nashorn.internal.runtime.logging.Loggable>, java.util.logging.Level, java.lang.invoke.MethodHandle, int, boolean, java.util.function.Supplier<java.lang.String>);
  public java.lang.invoke.SwitchPoint newBuiltinSwitchPoint(java.lang.String);
  public java.lang.invoke.SwitchPoint getBuiltinSwitchPoint(java.lang.String);
  static {};
}
