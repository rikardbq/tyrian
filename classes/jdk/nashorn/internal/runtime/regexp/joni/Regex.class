Compiled from "Regex.java"
public final class jdk.nashorn.internal.runtime.regexp.joni.Regex implements jdk.nashorn.internal.runtime.regexp.joni.constants.RegexState {
  int[] code;
  int codeLength;
  boolean stackNeeded;
  java.lang.Object[] operands;
  int operandLength;
  int numMem;
  int numRepeat;
  int numNullCheck;
  int captureHistory;
  int btMemStart;
  int btMemEnd;
  int stackPopLevel;
  int[] repeatRangeLo;
  int[] repeatRangeHi;
  jdk.nashorn.internal.runtime.regexp.joni.WarnCallback warnings;
  jdk.nashorn.internal.runtime.regexp.joni.MatcherFactory factory;
  protected jdk.nashorn.internal.runtime.regexp.joni.Analyser analyser;
  int options;
  final int caseFoldFlag;
  jdk.nashorn.internal.runtime.regexp.joni.SearchAlgorithm searchAlgorithm;
  int thresholdLength;
  int anchor;
  int anchorDmin;
  int anchorDmax;
  int subAnchor;
  char[] exact;
  int exactP;
  int exactEnd;
  byte[] map;
  int[] intMap;
  int[] intMapBackward;
  int dMin;
  int dMax;
  char[][] templates;
  int templateNum;
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(java.lang.CharSequence);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(java.lang.String);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[]);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int, int);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int, int, jdk.nashorn.internal.runtime.regexp.joni.Syntax);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int, int, jdk.nashorn.internal.runtime.regexp.joni.WarnCallback);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int, int, jdk.nashorn.internal.runtime.regexp.joni.Syntax, jdk.nashorn.internal.runtime.regexp.joni.WarnCallback);
  public jdk.nashorn.internal.runtime.regexp.joni.Regex(char[], int, int, int, int, jdk.nashorn.internal.runtime.regexp.joni.Syntax, jdk.nashorn.internal.runtime.regexp.joni.WarnCallback);
  public jdk.nashorn.internal.runtime.regexp.joni.Matcher matcher(char[]);
  public jdk.nashorn.internal.runtime.regexp.joni.Matcher matcher(char[], int, int);
  public jdk.nashorn.internal.runtime.regexp.joni.WarnCallback getWarnings();
  public int numberOfCaptures();
  void setupBMSkipMap();
  void setExactInfo(jdk.nashorn.internal.runtime.regexp.joni.OptExactInfo);
  void setOptimizeMapInfo(jdk.nashorn.internal.runtime.regexp.joni.OptMapInfo);
  void setSubAnchor(jdk.nashorn.internal.runtime.regexp.joni.OptAnchorInfo);
  void clearOptimizeInfo();
  public java.lang.String optimizeInfoToString();
  public int getOptions();
  public java.lang.String dumpTree();
  public java.lang.String dumpByteCode();
}
