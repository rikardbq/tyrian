Compiled from "Property.java"
public abstract class jdk.nashorn.internal.runtime.Property implements java.io.Serializable {
  public static final int WRITABLE_ENUMERABLE_CONFIGURABLE;
  public static final int NOT_WRITABLE;
  public static final int NOT_ENUMERABLE;
  public static final int NOT_CONFIGURABLE;
  public static final int IS_PARAMETER;
  public static final int HAS_ARGUMENTS;
  public static final int IS_FUNCTION_DECLARATION;
  public static final int IS_NASGEN_PRIMITIVE;
  public static final int IS_BUILTIN;
  public static final int IS_BOUND;
  public static final int NEEDS_DECLARATION;
  public static final int IS_LEXICAL_BINDING;
  public static final int DUAL_FIELDS;
  public static final int IS_ACCESSOR_PROPERTY;
  protected transient java.lang.invoke.SwitchPoint builtinSwitchPoint;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.runtime.Property(java.lang.Object, int, int);
  jdk.nashorn.internal.runtime.Property(jdk.nashorn.internal.runtime.Property, int);
  public abstract jdk.nashorn.internal.runtime.Property copy();
  public abstract jdk.nashorn.internal.runtime.Property copy(java.lang.Class<?>);
  static int mergeFlags(jdk.nashorn.internal.runtime.PropertyDescriptor, jdk.nashorn.internal.runtime.PropertyDescriptor);
  public final void setBuiltinSwitchPoint(java.lang.invoke.SwitchPoint);
  public final java.lang.invoke.SwitchPoint getBuiltinSwitchPoint();
  public boolean isBuiltin();
  static int toFlags(jdk.nashorn.internal.runtime.PropertyDescriptor);
  public boolean hasGetterFunction(jdk.nashorn.internal.runtime.ScriptObject);
  public boolean hasSetterFunction(jdk.nashorn.internal.runtime.ScriptObject);
  public boolean isWritable();
  public boolean isConfigurable();
  public boolean isEnumerable();
  public boolean isParameter();
  public boolean hasArguments();
  public boolean isSpill();
  public boolean isBound();
  public boolean needsDeclaration();
  public jdk.nashorn.internal.runtime.Property addFlags(int);
  public int getFlags();
  public jdk.nashorn.internal.runtime.Property removeFlags(int);
  public jdk.nashorn.internal.runtime.Property setFlags(int);
  public abstract java.lang.invoke.MethodHandle getGetter(java.lang.Class<?>);
  public abstract java.lang.invoke.MethodHandle getOptimisticGetter(java.lang.Class<?>, int);
  abstract void initMethodHandles(java.lang.Class<?>);
  public java.lang.Object getKey();
  public int getSlot();
  public abstract int getIntValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject);
  public abstract double getDoubleValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject);
  public abstract java.lang.Object getObjectValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject);
  public abstract void setValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject, int, boolean);
  public abstract void setValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject, double, boolean);
  public abstract void setValue(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.ScriptObject, java.lang.Object, boolean);
  public abstract boolean hasNativeSetter();
  public abstract java.lang.invoke.MethodHandle getSetter(java.lang.Class<?>, jdk.nashorn.internal.runtime.PropertyMap);
  public jdk.nashorn.internal.runtime.ScriptFunction getGetterFunction(jdk.nashorn.internal.runtime.ScriptObject);
  public jdk.nashorn.internal.runtime.ScriptFunction getSetterFunction(jdk.nashorn.internal.runtime.ScriptObject);
  public int hashCode();
  public boolean equals(java.lang.Object);
  boolean equalsWithoutType(jdk.nashorn.internal.runtime.Property);
  public final java.lang.String toStringShort();
  public java.lang.String toString();
  public final java.lang.Class<?> getType();
  public final void setType(java.lang.Class<?>);
  protected java.lang.Class<?> getLocalType();
  public boolean canChangeType();
  public boolean isFunctionDeclaration();
  public boolean isLexicalBinding();
  public boolean hasDualFields();
  public boolean isAccessorProperty();
  static {};
}
