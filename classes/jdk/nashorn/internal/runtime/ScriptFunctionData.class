Compiled from "ScriptFunctionData.java"
public abstract class jdk.nashorn.internal.runtime.ScriptFunctionData implements java.io.Serializable {
  static final int MAX_ARITY;
  protected final java.lang.String name;
  protected transient java.util.LinkedList<jdk.nashorn.internal.runtime.CompiledFunction> code;
  protected int flags;
  public static final int IS_STRICT;
  public static final int IS_BUILTIN;
  public static final int IS_CONSTRUCTOR;
  public static final int NEEDS_CALLEE;
  public static final int USES_THIS;
  public static final int IS_VARIABLE_ARITY;
  public static final int IS_PROPERTY_ACCESSOR;
  public static final int IS_ES6_METHOD;
  public static final int IS_STRICT_OR_BUILTIN;
  public static final int IS_BUILTIN_CONSTRUCTOR;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.runtime.ScriptFunctionData(java.lang.String, int, int);
  final int getArity();
  java.lang.String getDocumentation();
  java.lang.String getDocumentationKey();
  final boolean isVariableArity();
  void setArity(int);
  void setDocumentationKey(java.lang.String);
  jdk.nashorn.internal.runtime.CompiledFunction bind(jdk.nashorn.internal.runtime.CompiledFunction, jdk.nashorn.internal.runtime.ScriptFunction, java.lang.Object, java.lang.Object[]);
  public final boolean isStrict();
  protected java.lang.String getFunctionName();
  final boolean isBuiltin();
  final boolean isConstructor();
  abstract boolean needsCallee();
  final boolean needsWrappedThis();
  java.lang.String toSource();
  java.lang.String getName();
  public java.lang.String toString();
  public java.lang.String toStringVerbose();
  final jdk.nashorn.internal.runtime.CompiledFunction getBestInvoker(java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.ScriptObject);
  final jdk.nashorn.internal.runtime.CompiledFunction getBestInvoker(java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.ScriptObject, java.util.Collection<jdk.nashorn.internal.runtime.CompiledFunction>);
  final jdk.nashorn.internal.runtime.CompiledFunction getBestConstructor(java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.ScriptObject, java.util.Collection<jdk.nashorn.internal.runtime.CompiledFunction>);
  protected void ensureCompiled();
  final java.lang.invoke.MethodHandle getGenericInvoker(jdk.nashorn.internal.runtime.ScriptObject);
  final java.lang.invoke.MethodHandle getGenericConstructor(jdk.nashorn.internal.runtime.ScriptObject);
  jdk.nashorn.internal.runtime.CompiledFunction lookupExactApplyToCall(java.lang.invoke.MethodType);
  jdk.nashorn.internal.runtime.CompiledFunction pickFunction(java.lang.invoke.MethodType, boolean);
  abstract jdk.nashorn.internal.runtime.CompiledFunction getBest(java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.ScriptObject, java.util.Collection<jdk.nashorn.internal.runtime.CompiledFunction>, boolean);
  final jdk.nashorn.internal.runtime.CompiledFunction getBest(java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.ScriptObject, java.util.Collection<jdk.nashorn.internal.runtime.CompiledFunction>);
  boolean isValidCallSite(java.lang.invoke.MethodType);
  jdk.nashorn.internal.runtime.CompiledFunction getGeneric(jdk.nashorn.internal.runtime.ScriptObject);
  abstract java.lang.invoke.MethodType getGenericType();
  jdk.nashorn.internal.runtime.ScriptObject allocate(jdk.nashorn.internal.runtime.PropertyMap);
  jdk.nashorn.internal.runtime.PropertyMap getAllocatorMap(jdk.nashorn.internal.runtime.ScriptObject);
  jdk.nashorn.internal.runtime.ScriptFunctionData makeBoundFunctionData(jdk.nashorn.internal.runtime.ScriptFunction, java.lang.Object, java.lang.Object[]);
  static java.lang.Object wrapThis(java.lang.Object);
  static boolean isPrimitiveThis(java.lang.Object);
  java.lang.Object invoke(jdk.nashorn.internal.runtime.ScriptFunction, java.lang.Object, java.lang.Object...) throws java.lang.Throwable;
  java.lang.Object construct(jdk.nashorn.internal.runtime.ScriptFunction, java.lang.Object...) throws java.lang.Throwable;
  protected static boolean needsCallee(java.lang.invoke.MethodHandle);
  static boolean needsCallee(java.lang.invoke.MethodType);
  protected static boolean isVarArg(java.lang.invoke.MethodHandle);
  static boolean isVarArg(java.lang.invoke.MethodType);
  public boolean inDynamicContext();
  static {};
}
