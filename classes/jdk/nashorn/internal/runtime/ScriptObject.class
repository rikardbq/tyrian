Compiled from "ScriptObject.java"
public abstract class jdk.nashorn.internal.runtime.ScriptObject implements jdk.nashorn.internal.runtime.PropertyAccess,java.lang.Cloneable {
  public static final java.lang.String PROTO_PROPERTY_NAME;
  public static final java.lang.String NO_SUCH_METHOD_NAME;
  public static final java.lang.String NO_SUCH_PROPERTY_NAME;
  public static final int IS_ARRAY;
  public static final int IS_ARGUMENTS;
  public static final int IS_LENGTH_NOT_WRITABLE;
  public static final int IS_BUILTIN;
  public static final int IS_INTERNAL;
  public static final int SPILL_RATE;
  protected long[] primitiveSpill;
  protected java.lang.Object[] objectSpill;
  public static final java.lang.invoke.MethodHandle GETPROTO;
  static final java.lang.invoke.MethodHandle MEGAMORPHIC_GET;
  static final java.lang.invoke.MethodHandle GLOBALFILTER;
  static final java.lang.invoke.MethodHandle DECLARE_AND_SET;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GET_ARRAY;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GET_ARGUMENT;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call SET_ARGUMENT;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GET_PROTO;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GET_PROTO_DEPTH;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call SET_GLOBAL_OBJECT_PROTO;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call SET_PROTO_FROM_LITERAL;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call SET_USER_ACCESSORS;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call GENERIC_SET;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call DELETE;
  static final java.lang.invoke.MethodHandle[] SET_SLOW;
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call SET_MAP;
  static final java.lang.invoke.MethodHandle CAS_MAP;
  static final java.lang.invoke.MethodHandle EXTENSION_CHECK;
  static final java.lang.invoke.MethodHandle ENSURE_SPILL_SIZE;
  static final boolean $assertionsDisabled;
  public jdk.nashorn.internal.runtime.ScriptObject();
  public jdk.nashorn.internal.runtime.ScriptObject(jdk.nashorn.internal.runtime.PropertyMap);
  protected jdk.nashorn.internal.runtime.ScriptObject(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.PropertyMap);
  public jdk.nashorn.internal.runtime.ScriptObject(jdk.nashorn.internal.runtime.PropertyMap, long[], java.lang.Object[]);
  protected boolean isGlobal();
  public static int spillAllocationLength(int);
  public void addBoundProperties(jdk.nashorn.internal.runtime.ScriptObject);
  public void addBoundProperties(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.Property[]);
  protected jdk.nashorn.internal.runtime.PropertyMap addBoundProperty(jdk.nashorn.internal.runtime.PropertyMap, jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.runtime.Property, boolean);
  public void addBoundProperties(java.lang.Object, jdk.nashorn.internal.runtime.AccessorProperty[]);
  static java.lang.invoke.MethodHandle bindTo(java.lang.invoke.MethodHandle, java.lang.Object);
  public java.util.Iterator<java.lang.String> propertyIterator();
  public java.util.Iterator<java.lang.Object> valueIterator();
  public final boolean isAccessorDescriptor();
  public final boolean isDataDescriptor();
  public final jdk.nashorn.internal.runtime.PropertyDescriptor toPropertyDescriptor();
  public static jdk.nashorn.internal.runtime.PropertyDescriptor toPropertyDescriptor(jdk.nashorn.internal.objects.Global, java.lang.Object);
  public java.lang.Object getOwnPropertyDescriptor(java.lang.Object);
  public java.lang.Object getPropertyDescriptor(java.lang.String);
  protected void invalidateGlobalConstant(java.lang.Object);
  public boolean defineOwnProperty(java.lang.Object, java.lang.Object, boolean);
  public void defineOwnProperty(int, java.lang.Object);
  public final void addOwnProperty(java.lang.Object, jdk.nashorn.internal.runtime.PropertyDescriptor);
  public final jdk.nashorn.internal.runtime.FindProperty findProperty(java.lang.Object, boolean);
  protected jdk.nashorn.internal.runtime.FindProperty findProperty(java.lang.Object, boolean, boolean, jdk.nashorn.internal.runtime.ScriptObject);
  boolean hasProperty(java.lang.Object, boolean);
  public final jdk.nashorn.internal.runtime.Property addOwnProperty(java.lang.Object, int, jdk.nashorn.internal.runtime.ScriptFunction, jdk.nashorn.internal.runtime.ScriptFunction);
  public final jdk.nashorn.internal.runtime.Property addOwnProperty(java.lang.Object, int, java.lang.Object);
  public final jdk.nashorn.internal.runtime.Property addOwnProperty(jdk.nashorn.internal.runtime.Property);
  public final boolean deleteOwnProperty(jdk.nashorn.internal.runtime.Property);
  protected final void initUserAccessors(java.lang.String, jdk.nashorn.internal.runtime.ScriptFunction, jdk.nashorn.internal.runtime.ScriptFunction);
  public final jdk.nashorn.internal.runtime.Property modifyOwnProperty(jdk.nashorn.internal.runtime.Property, int, jdk.nashorn.internal.runtime.ScriptFunction, jdk.nashorn.internal.runtime.ScriptFunction);
  public final jdk.nashorn.internal.runtime.Property modifyOwnProperty(jdk.nashorn.internal.runtime.Property, int);
  public final void setUserAccessors(java.lang.Object, jdk.nashorn.internal.runtime.ScriptFunction, jdk.nashorn.internal.runtime.ScriptFunction);
  protected static java.lang.invoke.MethodHandle getCallMethodHandle(jdk.nashorn.internal.runtime.FindProperty, java.lang.invoke.MethodType, java.lang.String);
  public final java.lang.Object getWithProperty(jdk.nashorn.internal.runtime.Property);
  public final jdk.nashorn.internal.runtime.Property getProperty(java.lang.String);
  public java.lang.Object getArgument(int);
  public void setArgument(int, java.lang.Object);
  protected jdk.nashorn.internal.runtime.Context getContext();
  public final jdk.nashorn.internal.runtime.PropertyMap getMap();
  public final void setMap(jdk.nashorn.internal.runtime.PropertyMap);
  protected final boolean compareAndSetMap(jdk.nashorn.internal.runtime.PropertyMap, jdk.nashorn.internal.runtime.PropertyMap);
  public final jdk.nashorn.internal.runtime.ScriptObject getProto();
  public final jdk.nashorn.internal.runtime.ScriptObject getProto(int);
  public final void setProto(jdk.nashorn.internal.runtime.ScriptObject);
  public void setInitialProto(jdk.nashorn.internal.runtime.ScriptObject);
  public static void setGlobalObjectProto(jdk.nashorn.internal.runtime.ScriptObject);
  public final void setPrototypeOf(java.lang.Object);
  public final void setProtoFromLiteral(java.lang.Object);
  public java.lang.String[] getAllKeys();
  public final java.lang.String[] getOwnKeys(boolean);
  public final jdk.nashorn.internal.runtime.Symbol[] getOwnSymbols(boolean);
  protected <T> T[] getOwnKeys(java.lang.Class<T>, boolean, java.util.Set<T>);
  public boolean hasArrayEntries();
  public java.lang.String getClassName();
  public java.lang.Object getLength();
  public java.lang.String safeToString();
  public java.lang.Object getDefaultValue(java.lang.Class<?>);
  public boolean isInstance(jdk.nashorn.internal.runtime.ScriptObject);
  public jdk.nashorn.internal.runtime.ScriptObject preventExtensions();
  public static boolean isArray(java.lang.Object);
  public final boolean isArray();
  public final void setIsArray();
  public final boolean isArguments();
  public final void setIsArguments();
  public boolean isLengthNotWritable();
  public void setIsLengthNotWritable();
  public final jdk.nashorn.internal.runtime.arrays.ArrayData getArray(java.lang.Class<?>);
  public final jdk.nashorn.internal.runtime.arrays.ArrayData getArray();
  public final void setArray(jdk.nashorn.internal.runtime.arrays.ArrayData);
  public boolean isExtensible();
  public jdk.nashorn.internal.runtime.ScriptObject seal();
  public boolean isSealed();
  public jdk.nashorn.internal.runtime.ScriptObject freeze();
  public boolean isFrozen();
  public boolean isScope();
  public final void setIsBuiltin();
  public final boolean isBuiltin();
  public final void setIsInternal();
  public final boolean isInternal();
  public void clear(boolean);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();
  public boolean isEmpty();
  public java.util.Set<java.lang.Object> keySet();
  public java.lang.Object put(java.lang.Object, java.lang.Object, boolean);
  public void putAll(java.util.Map<?, ?>, boolean);
  public java.lang.Object remove(java.lang.Object, boolean);
  public int size();
  public java.util.Collection<java.lang.Object> values();
  public jdk.dynalink.linker.GuardedInvocation lookup(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findNewMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findCallMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  boolean hasWithScope();
  static java.lang.invoke.MethodHandle addProtoFilter(java.lang.invoke.MethodHandle, int);
  protected jdk.dynalink.linker.GuardedInvocation findGetMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findGetIndexMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  public final java.lang.invoke.SwitchPoint[] getProtoSwitchPoints(java.lang.String, jdk.nashorn.internal.runtime.ScriptObject);
  final java.lang.invoke.SwitchPoint getProtoSwitchPoint(java.lang.String);
  protected jdk.dynalink.linker.GuardedInvocation findSetMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected jdk.dynalink.linker.GuardedInvocation findSetIndexMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  public jdk.dynalink.linker.GuardedInvocation noSuchMethod(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  public jdk.dynalink.linker.GuardedInvocation noSuchProperty(jdk.dynalink.CallSiteDescriptor, jdk.dynalink.linker.LinkRequest);
  protected java.lang.Object invokeNoSuchProperty(java.lang.Object, boolean, int);
  java.lang.invoke.MethodHandle addSpill(java.lang.Class<?>, java.lang.String);
  protected static java.lang.invoke.MethodHandle pairArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType);
  public static java.lang.invoke.MethodHandle pairArguments(java.lang.invoke.MethodHandle, java.lang.invoke.MethodType, java.lang.Boolean);
  static java.lang.invoke.MethodHandle adaptHandleToVarArgCallSite(java.lang.invoke.MethodHandle, int);
  public final void setLength(long);
  public int getInt(java.lang.Object, int);
  public int getInt(double, int);
  public int getInt(int, int);
  public double getDouble(java.lang.Object, int);
  public double getDouble(double, int);
  public double getDouble(int, int);
  public java.lang.Object get(java.lang.Object);
  public java.lang.Object get(double);
  public java.lang.Object get(int);
  public final void setObject(jdk.nashorn.internal.runtime.FindProperty, int, java.lang.Object, java.lang.Object);
  public void set(java.lang.Object, int, int);
  public void set(java.lang.Object, double, int);
  public void set(java.lang.Object, java.lang.Object, int);
  public void set(double, int, int);
  public void set(double, double, int);
  public void set(double, java.lang.Object, int);
  public void set(int, int, int);
  public void set(int, double, int);
  public void set(int, java.lang.Object, int);
  public boolean has(java.lang.Object);
  public boolean has(double);
  public boolean has(int);
  public boolean hasOwnProperty(java.lang.Object);
  public boolean hasOwnProperty(int);
  public boolean hasOwnProperty(double);
  public boolean delete(int, boolean);
  public boolean delete(double, boolean);
  public boolean delete(java.lang.Object, boolean);
  public final jdk.nashorn.internal.runtime.ScriptObject copy();
  protected jdk.nashorn.internal.runtime.ScriptObject clone() throws java.lang.CloneNotSupportedException;
  protected final jdk.nashorn.internal.runtime.UserAccessorProperty newUserAccessors(java.lang.Object, int, jdk.nashorn.internal.runtime.ScriptFunction, jdk.nashorn.internal.runtime.ScriptFunction);
  protected boolean useDualFields();
  java.lang.Object ensureSpillSize(int);
  public static long getCount();
  protected java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
