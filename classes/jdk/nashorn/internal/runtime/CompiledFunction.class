Compiled from "CompiledFunction.java"
final class jdk.nashorn.internal.runtime.CompiledFunction {
  static final java.util.Collection<jdk.nashorn.internal.runtime.CompiledFunction> NO_FUNCTIONS;
  static final boolean $assertionsDisabled;
  jdk.nashorn.internal.runtime.CompiledFunction(java.lang.invoke.MethodHandle);
  static jdk.nashorn.internal.runtime.CompiledFunction createBuiltInConstructor(java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.Specialization);
  jdk.nashorn.internal.runtime.CompiledFunction(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.Specialization);
  jdk.nashorn.internal.runtime.CompiledFunction(java.lang.invoke.MethodHandle, java.lang.invoke.MethodHandle, int, java.lang.invoke.MethodType, jdk.nashorn.internal.runtime.Specialization, jdk.nashorn.internal.runtime.logging.DebugLogger);
  jdk.nashorn.internal.runtime.CompiledFunction(java.lang.invoke.MethodHandle, jdk.nashorn.internal.runtime.RecompilableScriptFunctionData, java.util.Map<java.lang.Integer, jdk.nashorn.internal.codegen.types.Type>, java.lang.invoke.MethodType, int);
  static jdk.nashorn.internal.runtime.CompiledFunction createBuiltInConstructor(java.lang.invoke.MethodHandle);
  boolean isSpecialization();
  boolean hasLinkLogic();
  java.lang.Class<? extends jdk.nashorn.internal.objects.annotations.SpecializedFunction$LinkLogic> getLinkLogicClass();
  boolean convertsNumericArgs();
  int getFlags();
  boolean isOptimistic();
  boolean isApplyToCall();
  boolean isVarArg();
  public java.lang.String toString();
  boolean needsCallee();
  java.lang.invoke.MethodHandle createComposableInvoker();
  java.lang.invoke.MethodHandle createComposableConstructor();
  boolean hasConstructor();
  java.lang.invoke.MethodType type();
  int weight();
  static boolean isVarArgsType(java.lang.invoke.MethodType);
  static boolean moreGenericThan(java.lang.invoke.MethodType, java.lang.invoke.MethodType);
  boolean betterThanFinal(jdk.nashorn.internal.runtime.CompiledFunction, java.lang.invoke.MethodType);
  boolean matchesCallSite(java.lang.invoke.MethodType, boolean);
  jdk.dynalink.linker.GuardedInvocation createFunctionInvocation(java.lang.Class<?>, int);
  jdk.dynalink.linker.GuardedInvocation createConstructorInvocation();
  static {};
}
