Compiled from "Bootstrap.java"
public final class jdk.nashorn.internal.runtime.linker.Bootstrap {
  public static final jdk.nashorn.internal.codegen.CompilerConstants$Call BOOTSTRAP;
  static final boolean $assertionsDisabled;
  public static java.util.List<jdk.dynalink.linker.GuardingDynamicLinker> getExposedLinkers();
  public static jdk.dynalink.DynamicLinker createDynamicLinker(java.lang.ClassLoader, int);
  public static jdk.dynalink.linker.TypeBasedGuardingDynamicLinker getBeanLinkerForClass(java.lang.Class<?>);
  public static boolean isCallable(java.lang.Object);
  public static boolean isStrictCallable(java.lang.Object);
  public static boolean isDynamicMethod(java.lang.Object);
  public static boolean isFunctionalInterfaceObject(java.lang.Object);
  public static java.lang.invoke.CallSite bootstrap(java.lang.invoke.MethodHandles$Lookup, java.lang.String, java.lang.invoke.MethodType, int);
  public static java.lang.invoke.MethodHandle createDynamicInvoker(java.lang.String, int, java.lang.Class<?>, java.lang.Class<?>...);
  public static java.lang.invoke.MethodHandle createDynamicCallInvoker(java.lang.Class<?>, java.lang.Class<?>...);
  public static java.lang.invoke.MethodHandle createDynamicInvoker(java.lang.String, int, java.lang.invoke.MethodType);
  public static java.lang.Object bindCallable(java.lang.Object, java.lang.Object, java.lang.Object[]);
  public static java.lang.Object createSuperAdapter(java.lang.Object);
  public static void checkReflectionAccess(java.lang.Class<?>, boolean);
  public static jdk.dynalink.linker.LinkerServices getLinkerServices();
  static jdk.dynalink.linker.GuardedInvocation asTypeSafeReturn(jdk.dynalink.linker.GuardedInvocation, jdk.dynalink.linker.LinkerServices, jdk.dynalink.CallSiteDescriptor);
  static {};
}
