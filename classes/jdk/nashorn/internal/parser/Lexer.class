Compiled from "Lexer.java"
public class jdk.nashorn.internal.parser.Lexer extends jdk.nashorn.internal.parser.Scanner {
  int pendingLine;
  static final boolean $assertionsDisabled;
  static java.lang.String unicodeEscape(char);
  public jdk.nashorn.internal.parser.Lexer(jdk.nashorn.internal.runtime.Source, jdk.nashorn.internal.parser.TokenStream);
  public jdk.nashorn.internal.parser.Lexer(jdk.nashorn.internal.runtime.Source, jdk.nashorn.internal.parser.TokenStream, boolean, boolean);
  public jdk.nashorn.internal.parser.Lexer(jdk.nashorn.internal.runtime.Source, int, int, jdk.nashorn.internal.parser.TokenStream, boolean, boolean, boolean);
  jdk.nashorn.internal.parser.Lexer$State saveState();
  void restoreState(jdk.nashorn.internal.parser.Lexer$State);
  protected void add(jdk.nashorn.internal.parser.TokenType, int, int);
  protected void add(jdk.nashorn.internal.parser.TokenType, int);
  public static java.lang.String getWhitespaceRegExp();
  public static boolean isJSWhitespace(char);
  public static boolean isJSEOL(char);
  protected boolean isStringDelimiter(char);
  protected boolean isWhitespace(char);
  protected boolean isEOL(char);
  protected boolean skipComments();
  public jdk.nashorn.internal.parser.Lexer$RegexToken valueOfPattern(int, int);
  public boolean canStartLiteral(jdk.nashorn.internal.parser.TokenType);
  protected boolean scanLiteral(long, jdk.nashorn.internal.parser.TokenType, jdk.nashorn.internal.parser.Lexer$LineInfoReceiver);
  protected static int convertDigit(char, int);
  protected void scanString(boolean);
  protected void scanNumber();
  jdk.nashorn.internal.parser.Lexer$XMLToken valueOfXML(int, int);
  public void lexify();
  java.lang.Object getValueOf(long, boolean);
  public java.lang.String valueOfRawString(long);
  protected static java.lang.String message(java.lang.String, java.lang.String...);
  protected void error(java.lang.String, jdk.nashorn.internal.parser.TokenType, int, int) throws jdk.nashorn.internal.runtime.ParserException;
  jdk.nashorn.internal.parser.Scanner$State saveState();
  static {};
}
