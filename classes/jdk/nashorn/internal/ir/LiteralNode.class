Compiled from "LiteralNode.java"
public abstract class jdk.nashorn.internal.ir.LiteralNode<T> extends jdk.nashorn.internal.ir.Expression implements jdk.nashorn.internal.ir.PropertyKey {
  protected final T value;
  public static final java.lang.Object POSTSET_MARKER;
  static final boolean $assertionsDisabled;
  protected jdk.nashorn.internal.ir.LiteralNode(long, int, T);
  protected jdk.nashorn.internal.ir.LiteralNode(jdk.nashorn.internal.ir.LiteralNode<T>);
  protected jdk.nashorn.internal.ir.LiteralNode(jdk.nashorn.internal.ir.LiteralNode<T>, T);
  public jdk.nashorn.internal.ir.LiteralNode<?> initialize(jdk.nashorn.internal.ir.LexicalContext);
  public boolean isNull();
  public jdk.nashorn.internal.codegen.types.Type getType();
  public java.lang.String getPropertyName();
  public boolean getBoolean();
  public int getInt32();
  public long getUint32();
  public long getLong();
  public double getNumber();
  public java.lang.String getString();
  public java.lang.Object getObject();
  public boolean isArray();
  public java.util.List<jdk.nashorn.internal.ir.Expression> getElementExpressions();
  public boolean isBoolean();
  public boolean isString();
  public boolean isNumeric();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.visitor.NodeVisitor<? extends jdk.nashorn.internal.ir.LexicalContext>);
  public void toString(java.lang.StringBuilder, boolean);
  public final T getValue();
  public static jdk.nashorn.internal.ir.LiteralNode<java.lang.Object> newInstance(long, int);
  public static jdk.nashorn.internal.ir.LiteralNode<java.lang.Object> newInstance(jdk.nashorn.internal.ir.Node);
  public static jdk.nashorn.internal.ir.LiteralNode<java.lang.Boolean> newInstance(long, int, boolean);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, boolean);
  public static jdk.nashorn.internal.ir.LiteralNode<java.lang.Number> newInstance(long, int, java.lang.Number);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, java.lang.Number);
  public static jdk.nashorn.internal.ir.LiteralNode<jdk.nashorn.internal.runtime.Undefined> newInstance(long, int, jdk.nashorn.internal.runtime.Undefined);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, jdk.nashorn.internal.runtime.Undefined);
  public static jdk.nashorn.internal.ir.LiteralNode<java.lang.String> newInstance(long, int, java.lang.String);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, java.lang.String);
  public static jdk.nashorn.internal.ir.LiteralNode<jdk.nashorn.internal.parser.Lexer$LexerToken> newInstance(long, int, jdk.nashorn.internal.parser.Lexer$LexerToken);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, jdk.nashorn.internal.parser.Lexer$LexerToken);
  public static java.lang.Object objectAsConstant(java.lang.Object);
  public static boolean isConstant(java.lang.Object);
  public static jdk.nashorn.internal.ir.LiteralNode<jdk.nashorn.internal.ir.Expression[]> newInstance(long, int, java.util.List<jdk.nashorn.internal.ir.Expression>);
  public static jdk.nashorn.internal.ir.LiteralNode<?> newInstance(jdk.nashorn.internal.ir.Node, java.util.List<jdk.nashorn.internal.ir.Expression>);
  public static jdk.nashorn.internal.ir.LiteralNode<jdk.nashorn.internal.ir.Expression[]> newInstance(long, int, java.util.List<jdk.nashorn.internal.ir.Expression>, boolean, boolean);
  public static jdk.nashorn.internal.ir.LiteralNode<jdk.nashorn.internal.ir.Expression[]> newInstance(long, int, jdk.nashorn.internal.ir.Expression[]);
  static {};
}
