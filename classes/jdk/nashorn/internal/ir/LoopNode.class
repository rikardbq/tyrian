Compiled from "LoopNode.java"
public abstract class jdk.nashorn.internal.ir.LoopNode extends jdk.nashorn.internal.ir.BreakableStatement {
  protected final jdk.nashorn.internal.codegen.Label continueLabel;
  protected final jdk.nashorn.internal.ir.JoinPredecessorExpression test;
  protected final jdk.nashorn.internal.ir.Block body;
  protected final boolean controlFlowEscapes;
  protected jdk.nashorn.internal.ir.LoopNode(int, long, int, jdk.nashorn.internal.ir.Block, jdk.nashorn.internal.ir.JoinPredecessorExpression, boolean);
  protected jdk.nashorn.internal.ir.LoopNode(jdk.nashorn.internal.ir.LoopNode, jdk.nashorn.internal.ir.JoinPredecessorExpression, jdk.nashorn.internal.ir.Block, boolean, jdk.nashorn.internal.ir.LocalVariableConversion);
  public abstract jdk.nashorn.internal.ir.Node ensureUniqueLabels(jdk.nashorn.internal.ir.LexicalContext);
  public boolean controlFlowEscapes();
  public boolean isTerminal();
  public abstract boolean mustEnter();
  public jdk.nashorn.internal.codegen.Label getContinueLabel();
  public java.util.List<jdk.nashorn.internal.codegen.Label> getLabels();
  public boolean isLoop();
  public abstract jdk.nashorn.internal.ir.Block getBody();
  public abstract jdk.nashorn.internal.ir.LoopNode setBody(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.Block);
  public final jdk.nashorn.internal.ir.JoinPredecessorExpression getTest();
  public abstract jdk.nashorn.internal.ir.LoopNode setTest(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.JoinPredecessorExpression);
  public abstract jdk.nashorn.internal.ir.LoopNode setControlFlowEscapes(jdk.nashorn.internal.ir.LexicalContext, boolean);
  public abstract boolean hasPerIterationScope();
  public jdk.nashorn.internal.ir.LocalVariableConversion getLocalVariableConversion();
  public jdk.nashorn.internal.ir.JoinPredecessor setLocalVariableConversion(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.LocalVariableConversion);
  public jdk.nashorn.internal.codegen.Label getBreakLabel();
  public boolean isBreakableWithoutLabel();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.visitor.NodeVisitor);
}
