Compiled from "CallNode.java"
public final class jdk.nashorn.internal.ir.CallNode extends jdk.nashorn.internal.ir.LexicalContextExpression implements jdk.nashorn.internal.ir.Optimistic {
  public jdk.nashorn.internal.ir.CallNode(int, long, int, jdk.nashorn.internal.ir.Expression, java.util.List<jdk.nashorn.internal.ir.Expression>, boolean);
  public int getLineNumber();
  public jdk.nashorn.internal.codegen.types.Type getType();
  public jdk.nashorn.internal.ir.Optimistic setType(jdk.nashorn.internal.codegen.types.Type);
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.visitor.NodeVisitor<? extends jdk.nashorn.internal.ir.LexicalContext>);
  public void toString(java.lang.StringBuilder, boolean);
  public java.util.List<jdk.nashorn.internal.ir.Expression> getArgs();
  public jdk.nashorn.internal.ir.CallNode setArgs(java.util.List<jdk.nashorn.internal.ir.Expression>);
  public jdk.nashorn.internal.ir.CallNode$EvalArgs getEvalArgs();
  public jdk.nashorn.internal.ir.CallNode setEvalArgs(jdk.nashorn.internal.ir.CallNode$EvalArgs);
  public boolean isEval();
  public boolean isApplyToCall();
  public jdk.nashorn.internal.ir.CallNode setIsApplyToCall();
  public jdk.nashorn.internal.ir.Expression getFunction();
  public jdk.nashorn.internal.ir.CallNode setFunction(jdk.nashorn.internal.ir.Expression);
  public boolean isNew();
  public int getProgramPoint();
  public jdk.nashorn.internal.ir.CallNode setProgramPoint(int);
  public jdk.nashorn.internal.codegen.types.Type getMostOptimisticType();
  public jdk.nashorn.internal.codegen.types.Type getMostPessimisticType();
  public boolean canBeOptimistic();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.visitor.NodeVisitor);
  public jdk.nashorn.internal.ir.Optimistic setProgramPoint(int);
}
