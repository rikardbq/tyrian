Compiled from "SwitchNode.java"
public final class jdk.nashorn.internal.ir.SwitchNode extends jdk.nashorn.internal.ir.BreakableStatement {
  public jdk.nashorn.internal.ir.SwitchNode(int, long, int, jdk.nashorn.internal.ir.Expression, java.util.List<jdk.nashorn.internal.ir.CaseNode>, jdk.nashorn.internal.ir.CaseNode);
  public jdk.nashorn.internal.ir.Node ensureUniqueLabels(jdk.nashorn.internal.ir.LexicalContext);
  public boolean isTerminal();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.visitor.NodeVisitor<? extends jdk.nashorn.internal.ir.LexicalContext>);
  public void toString(java.lang.StringBuilder, boolean);
  public jdk.nashorn.internal.ir.CaseNode getDefaultCase();
  public java.util.List<jdk.nashorn.internal.ir.CaseNode> getCases();
  public jdk.nashorn.internal.ir.SwitchNode setCases(jdk.nashorn.internal.ir.LexicalContext, java.util.List<jdk.nashorn.internal.ir.CaseNode>);
  public jdk.nashorn.internal.ir.SwitchNode setCases(jdk.nashorn.internal.ir.LexicalContext, java.util.List<jdk.nashorn.internal.ir.CaseNode>, jdk.nashorn.internal.ir.CaseNode);
  public jdk.nashorn.internal.ir.Expression getExpression();
  public jdk.nashorn.internal.ir.SwitchNode setExpression(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.Expression);
  public jdk.nashorn.internal.ir.Symbol getTag();
  public jdk.nashorn.internal.ir.SwitchNode setTag(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.Symbol);
  public boolean isUniqueInteger();
  public jdk.nashorn.internal.ir.SwitchNode setUniqueInteger(jdk.nashorn.internal.ir.LexicalContext, boolean);
  jdk.nashorn.internal.ir.JoinPredecessor setLocalVariableConversionChanged(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.LocalVariableConversion);
  public jdk.nashorn.internal.ir.LocalVariableConversion getLocalVariableConversion();
  public jdk.nashorn.internal.ir.JoinPredecessor setLocalVariableConversion(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.LocalVariableConversion);
  public java.util.List getLabels();
  public jdk.nashorn.internal.codegen.Label getBreakLabel();
  public boolean isBreakableWithoutLabel();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.visitor.NodeVisitor);
}
