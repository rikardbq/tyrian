Compiled from "Block.java"
public class jdk.nashorn.internal.ir.Block extends jdk.nashorn.internal.ir.Node implements jdk.nashorn.internal.ir.BreakableNode, jdk.nashorn.internal.ir.Terminal, jdk.nashorn.internal.ir.Flags<jdk.nashorn.internal.ir.Block> {
  protected final java.util.List<jdk.nashorn.internal.ir.Statement> statements;
  protected final java.util.Map<java.lang.String, jdk.nashorn.internal.ir.Symbol> symbols;
  protected final int flags;
  public static final int NEEDS_SCOPE;
  public static final int IS_TERMINAL;
  public static final int IS_GLOBAL_SCOPE;
  public static final int IS_SYNTHETIC;
  public static final int IS_BODY;
  public static final int IS_PARAMETER_BLOCK;
  public static final int IS_SWITCH_BLOCK;
  public static final int IS_BREAKABLE;
  static final boolean $assertionsDisabled;
  public jdk.nashorn.internal.ir.Block(long, int, int, jdk.nashorn.internal.ir.Statement...);
  public jdk.nashorn.internal.ir.Block(long, int, jdk.nashorn.internal.ir.Statement...);
  public jdk.nashorn.internal.ir.Block(long, int, java.util.List<jdk.nashorn.internal.ir.Statement>);
  public jdk.nashorn.internal.ir.Block(long, int, int, java.util.List<jdk.nashorn.internal.ir.Statement>);
  public boolean isGlobalScope();
  public boolean hasSymbols();
  public jdk.nashorn.internal.ir.Block replaceSymbols(jdk.nashorn.internal.ir.LexicalContext, java.util.Map<jdk.nashorn.internal.ir.Symbol, jdk.nashorn.internal.ir.Symbol>);
  public jdk.nashorn.internal.ir.Block copyWithNewSymbols();
  public jdk.nashorn.internal.ir.Node ensureUniqueLabels(jdk.nashorn.internal.ir.LexicalContext);
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.visitor.NodeVisitor<? extends jdk.nashorn.internal.ir.LexicalContext>);
  public java.util.List<jdk.nashorn.internal.ir.Symbol> getSymbols();
  public jdk.nashorn.internal.ir.Symbol getExistingSymbol(java.lang.String);
  public boolean isCatchBlock();
  public void toString(java.lang.StringBuilder, boolean);
  public boolean printSymbols(java.io.PrintWriter);
  public jdk.nashorn.internal.ir.Block setIsTerminal(jdk.nashorn.internal.ir.LexicalContext, boolean);
  public int getFlags();
  public boolean isTerminal();
  public jdk.nashorn.internal.codegen.Label getEntryLabel();
  public jdk.nashorn.internal.codegen.Label getBreakLabel();
  public jdk.nashorn.internal.ir.Block setLocalVariableConversion(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.LocalVariableConversion);
  public jdk.nashorn.internal.ir.LocalVariableConversion getLocalVariableConversion();
  public java.util.List<jdk.nashorn.internal.ir.Statement> getStatements();
  public int getStatementCount();
  public int getFirstStatementLineNumber();
  public jdk.nashorn.internal.ir.Statement getLastStatement();
  public jdk.nashorn.internal.ir.Block setStatements(jdk.nashorn.internal.ir.LexicalContext, java.util.List<jdk.nashorn.internal.ir.Statement>);
  public void putSymbol(jdk.nashorn.internal.ir.Symbol);
  public boolean needsScope();
  public boolean isSynthetic();
  public jdk.nashorn.internal.ir.Block setFlags(jdk.nashorn.internal.ir.LexicalContext, int);
  public jdk.nashorn.internal.ir.Block clearFlag(jdk.nashorn.internal.ir.LexicalContext, int);
  public jdk.nashorn.internal.ir.Block setFlag(jdk.nashorn.internal.ir.LexicalContext, int);
  public boolean getFlag(int);
  public jdk.nashorn.internal.ir.Block setNeedsScope(jdk.nashorn.internal.ir.LexicalContext);
  public int nextSlot();
  public boolean providesScopeCreator();
  public boolean isBreakableWithoutLabel();
  public java.util.List<jdk.nashorn.internal.codegen.Label> getLabels();
  public jdk.nashorn.internal.ir.Node accept(jdk.nashorn.internal.ir.visitor.NodeVisitor<? extends jdk.nashorn.internal.ir.LexicalContext>);
  public boolean isFunctionBody();
  public boolean isParameterBlock();
  public boolean isSwitchBlock();
  public jdk.nashorn.internal.ir.JoinPredecessor setLocalVariableConversion(jdk.nashorn.internal.ir.LexicalContext, jdk.nashorn.internal.ir.LocalVariableConversion);
  public jdk.nashorn.internal.ir.LexicalContextNode setFlags(jdk.nashorn.internal.ir.LexicalContext, int);
  public jdk.nashorn.internal.ir.LexicalContextNode setFlag(jdk.nashorn.internal.ir.LexicalContext, int);
  public jdk.nashorn.internal.ir.LexicalContextNode clearFlag(jdk.nashorn.internal.ir.LexicalContext, int);
  static {};
}
