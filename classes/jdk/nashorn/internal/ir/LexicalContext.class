Compiled from "LexicalContext.java"
public class jdk.nashorn.internal.ir.LexicalContext {
  static final boolean $assertionsDisabled;
  public jdk.nashorn.internal.ir.LexicalContext();
  public void setFlag(jdk.nashorn.internal.ir.LexicalContextNode, int);
  public void setBlockNeedsScope(jdk.nashorn.internal.ir.Block);
  public int getFlags(jdk.nashorn.internal.ir.LexicalContextNode);
  public jdk.nashorn.internal.ir.Block getFunctionBody(jdk.nashorn.internal.ir.FunctionNode);
  public java.util.Iterator<jdk.nashorn.internal.ir.LexicalContextNode> getAllNodes();
  public jdk.nashorn.internal.ir.FunctionNode getOutermostFunction();
  public <T extends jdk.nashorn.internal.ir.LexicalContextNode> T push(T);
  public boolean isEmpty();
  public int size();
  public <T extends jdk.nashorn.internal.ir.Node> T pop(T);
  public <T extends jdk.nashorn.internal.ir.LexicalContextNode & jdk.nashorn.internal.ir.Flags<T>> T applyTopFlags(T);
  public jdk.nashorn.internal.ir.LexicalContextNode peek();
  public boolean contains(jdk.nashorn.internal.ir.LexicalContextNode);
  public jdk.nashorn.internal.ir.LexicalContextNode replace(jdk.nashorn.internal.ir.LexicalContextNode, jdk.nashorn.internal.ir.LexicalContextNode);
  public java.util.Iterator<jdk.nashorn.internal.ir.Block> getBlocks();
  public java.util.Iterator<jdk.nashorn.internal.ir.FunctionNode> getFunctions();
  public jdk.nashorn.internal.ir.Block getParentBlock();
  public jdk.nashorn.internal.ir.LabelNode getCurrentBlockLabelNode();
  public java.util.Iterator<jdk.nashorn.internal.ir.Block> getAncestorBlocks(jdk.nashorn.internal.ir.Block);
  public java.util.Iterator<jdk.nashorn.internal.ir.Block> getBlocks(jdk.nashorn.internal.ir.Block);
  public jdk.nashorn.internal.ir.FunctionNode getFunction(jdk.nashorn.internal.ir.Block);
  public jdk.nashorn.internal.ir.Block getCurrentBlock();
  public jdk.nashorn.internal.ir.FunctionNode getCurrentFunction();
  public jdk.nashorn.internal.ir.Block getDefiningBlock(jdk.nashorn.internal.ir.Symbol);
  public jdk.nashorn.internal.ir.FunctionNode getDefiningFunction(jdk.nashorn.internal.ir.Symbol);
  public boolean isFunctionBody();
  public boolean isSplitBody();
  public jdk.nashorn.internal.ir.FunctionNode getParentFunction(jdk.nashorn.internal.ir.FunctionNode);
  public int getScopeNestingLevelTo(jdk.nashorn.internal.ir.LexicalContextNode);
  public boolean inLoop();
  public jdk.nashorn.internal.ir.LoopNode getCurrentLoop();
  public jdk.nashorn.internal.ir.BreakableNode getBreakable(java.lang.String);
  public jdk.nashorn.internal.ir.LoopNode getContinueTo(java.lang.String);
  public jdk.nashorn.internal.ir.Block getInlinedFinally(java.lang.String);
  public jdk.nashorn.internal.ir.TryNode getTryNodeForInlinedFinally(java.lang.String);
  public boolean isExternalTarget(jdk.nashorn.internal.ir.SplitNode, jdk.nashorn.internal.ir.BreakableNode);
  public boolean inUnprotectedSwitchContext();
  public java.lang.String toString();
  static {};
}
