Compiled from "ScriptObjectMirror.java"
public final class jdk.nashorn.api.scripting.ScriptObjectMirror extends jdk.nashorn.api.scripting.AbstractJSObject implements javax.script.Bindings {
  static final boolean $assertionsDisabled;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.lang.Object call(java.lang.Object, java.lang.Object...);
  public java.lang.Object newObject(java.lang.Object...);
  public java.lang.Object eval(java.lang.String);
  public java.lang.Object callMember(java.lang.String, java.lang.Object...);
  public java.lang.Object getMember(java.lang.String);
  public java.lang.Object getSlot(int);
  public boolean hasMember(java.lang.String);
  public boolean hasSlot(int);
  public void removeMember(java.lang.String);
  public void setMember(java.lang.String, java.lang.Object);
  public void setSlot(int, java.lang.Object);
  public void setIndexedPropertiesToExternalArrayData(java.nio.ByteBuffer);
  public boolean isInstance(java.lang.Object);
  public java.lang.String getClassName();
  public boolean isFunction();
  public boolean isStrictFunction();
  public boolean isArray();
  public void clear();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet();
  public java.lang.Object get(java.lang.Object);
  public boolean isEmpty();
  public java.util.Set<java.lang.String> keySet();
  public java.lang.Object put(java.lang.String, java.lang.Object);
  public void putAll(java.util.Map<? extends java.lang.String, ? extends java.lang.Object>);
  public java.lang.Object remove(java.lang.Object);
  public boolean delete(java.lang.Object);
  public int size();
  public java.util.Collection<java.lang.Object> values();
  public java.lang.Object getProto();
  public void setProto(java.lang.Object);
  public java.lang.Object getOwnPropertyDescriptor(java.lang.String);
  public java.lang.String[] getOwnKeys(boolean);
  public jdk.nashorn.api.scripting.ScriptObjectMirror preventExtensions();
  public boolean isExtensible();
  public jdk.nashorn.api.scripting.ScriptObjectMirror seal();
  public boolean isSealed();
  public jdk.nashorn.api.scripting.ScriptObjectMirror freeze();
  public boolean isFrozen();
  public static boolean isUndefined(java.lang.Object);
  public <T> T to(java.lang.Class<T>);
  public static java.lang.Object wrap(java.lang.Object, java.lang.Object);
  public static java.lang.Object wrapAsJSONCompatible(java.lang.Object, java.lang.Object);
  public static java.lang.Object unwrap(java.lang.Object, java.lang.Object);
  public static java.lang.Object[] wrapArray(java.lang.Object[], java.lang.Object);
  public static java.lang.Object[] unwrapArray(java.lang.Object[], java.lang.Object);
  public static boolean identical(java.lang.Object, java.lang.Object);
  jdk.nashorn.api.scripting.ScriptObjectMirror(jdk.nashorn.internal.runtime.ScriptObject, jdk.nashorn.internal.objects.Global);
  jdk.nashorn.internal.runtime.ScriptObject getScriptObject();
  jdk.nashorn.internal.objects.Global getHomeGlobal();
  static java.lang.Object translateUndefined(java.lang.Object);
  public double toNumber();
  public java.lang.Object getDefaultValue(java.lang.Class<?>);
  public java.lang.Object put(java.lang.Object, java.lang.Object);
  static {};
}
