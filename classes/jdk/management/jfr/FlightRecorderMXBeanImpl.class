Compiled from "FlightRecorderMXBeanImpl.java"
final class jdk.management.jfr.FlightRecorderMXBeanImpl extends javax.management.StandardEmitterMBean implements jdk.management.jfr.FlightRecorderMXBean,javax.management.NotificationEmitter {
  jdk.management.jfr.FlightRecorderMXBeanImpl();
  public void startRecording(long);
  public boolean stopRecording(long);
  public void closeRecording(long);
  public long openStream(long, java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException;
  public void closeStream(long) throws java.io.IOException;
  public byte[] readStream(long) throws java.io.IOException;
  public java.util.List<jdk.management.jfr.RecordingInfo> getRecordings();
  public java.util.List<jdk.management.jfr.ConfigurationInfo> getConfigurations();
  public java.util.List<jdk.management.jfr.EventTypeInfo> getEventTypes();
  public java.util.Map<java.lang.String, java.lang.String> getRecordingSettings(long) throws java.lang.IllegalArgumentException;
  public void setRecordingSettings(long, java.util.Map<java.lang.String, java.lang.String>) throws java.lang.IllegalArgumentException;
  public long newRecording();
  public long takeSnapshot();
  public void setConfiguration(long, java.lang.String) throws java.lang.IllegalArgumentException;
  public void setPredefinedConfiguration(long, java.lang.String) throws java.lang.IllegalArgumentException;
  public void copyTo(long, java.lang.String) throws java.io.IOException;
  public void setRecordingOptions(long, java.util.Map<java.lang.String, java.lang.String>) throws java.lang.IllegalArgumentException;
  public java.util.Map<java.lang.String, java.lang.String> getRecordingOptions(long) throws java.lang.IllegalArgumentException;
  public long cloneRecording(long, boolean) throws java.lang.IllegalStateException, java.lang.SecurityException;
  public javax.management.ObjectName getObjectName();
  public void addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object);
  public void removeNotificationListener(javax.management.NotificationListener) throws javax.management.ListenerNotFoundException;
  public void removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) throws javax.management.ListenerNotFoundException;
  static {};
}
