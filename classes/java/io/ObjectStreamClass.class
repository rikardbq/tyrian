Compiled from "ObjectStreamClass.java"
public class java.io.ObjectStreamClass implements java.io.Serializable {
  public static final java.io.ObjectStreamField[] NO_FIELDS;
  public static java.io.ObjectStreamClass lookup(java.lang.Class<?>);
  public static java.io.ObjectStreamClass lookupAny(java.lang.Class<?>);
  public java.lang.String getName();
  public long getSerialVersionUID();
  public java.lang.Class<?> forClass();
  public java.io.ObjectStreamField[] getFields();
  public java.io.ObjectStreamField getField(java.lang.String);
  public java.lang.String toString();
  static java.io.ObjectStreamClass lookup(java.lang.Class<?>, boolean);
  java.io.ObjectStreamClass();
  void initProxy(java.lang.Class<?>, java.lang.ClassNotFoundException, java.io.ObjectStreamClass) throws java.io.InvalidClassException;
  void initNonProxy(java.io.ObjectStreamClass, java.lang.Class<?>, java.lang.ClassNotFoundException, java.io.ObjectStreamClass) throws java.io.InvalidClassException;
  void readNonProxy(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
  void writeNonProxy(java.io.ObjectOutputStream) throws java.io.IOException;
  java.lang.ClassNotFoundException getResolveException();
  final void checkInitialized() throws java.io.InvalidClassException;
  void checkDeserialize() throws java.io.InvalidClassException;
  void checkSerialize() throws java.io.InvalidClassException;
  void checkDefaultSerialize() throws java.io.InvalidClassException;
  java.io.ObjectStreamClass getSuperDesc();
  java.io.ObjectStreamClass getLocalDesc();
  java.io.ObjectStreamField[] getFields(boolean);
  java.io.ObjectStreamField getField(java.lang.String, java.lang.Class<?>);
  boolean isProxy();
  boolean isEnum();
  boolean isExternalizable();
  boolean isSerializable();
  boolean hasBlockExternalData();
  boolean hasWriteObjectData();
  boolean isInstantiable();
  boolean hasWriteObjectMethod();
  boolean hasReadObjectMethod();
  boolean hasReadObjectNoDataMethod();
  boolean hasWriteReplaceMethod();
  boolean hasReadResolveMethod();
  java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.reflect.InvocationTargetException, java.lang.UnsupportedOperationException;
  void invokeWriteObject(java.lang.Object, java.io.ObjectOutputStream) throws java.io.IOException, java.lang.UnsupportedOperationException;
  void invokeReadObject(java.lang.Object, java.io.ObjectInputStream) throws java.lang.ClassNotFoundException, java.io.IOException, java.lang.UnsupportedOperationException;
  void invokeReadObjectNoData(java.lang.Object) throws java.io.IOException, java.lang.UnsupportedOperationException;
  java.lang.Object invokeWriteReplace(java.lang.Object) throws java.io.IOException, java.lang.UnsupportedOperationException;
  java.lang.Object invokeReadResolve(java.lang.Object) throws java.io.IOException, java.lang.UnsupportedOperationException;
  java.io.ObjectStreamClass$ClassDataSlot[] getClassDataLayout() throws java.io.InvalidClassException;
  int getPrimDataSize();
  int getNumObjFields();
  void getPrimFieldValues(java.lang.Object, byte[]);
  void setPrimFieldValues(java.lang.Object, byte[]);
  void getObjFieldValues(java.lang.Object, java.lang.Object[]);
  void checkObjFieldValueTypes(java.lang.Object, java.lang.Object[]);
  void setObjFieldValues(java.lang.Object, java.lang.Object[]);
  static void processQueue(java.lang.ref.ReferenceQueue<java.lang.Class<?>>, java.util.concurrent.ConcurrentMap<? extends java.lang.ref.WeakReference<java.lang.Class<?>>, ?>);
  static {};
}
