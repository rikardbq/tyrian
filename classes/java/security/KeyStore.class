Compiled from "KeyStore.java"
public class java.security.KeyStore {
  protected java.security.KeyStore(java.security.KeyStoreSpi, java.security.Provider, java.lang.String);
  public static java.security.KeyStore getInstance(java.lang.String) throws java.security.KeyStoreException;
  public static java.security.KeyStore getInstance(java.lang.String, java.lang.String) throws java.security.KeyStoreException, java.security.NoSuchProviderException;
  public static java.security.KeyStore getInstance(java.lang.String, java.security.Provider) throws java.security.KeyStoreException;
  public static final java.lang.String getDefaultType();
  public final java.security.Provider getProvider();
  public final java.lang.String getType();
  public final java.security.Key getKey(java.lang.String, char[]) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;
  public final java.security.cert.Certificate[] getCertificateChain(java.lang.String) throws java.security.KeyStoreException;
  public final java.security.cert.Certificate getCertificate(java.lang.String) throws java.security.KeyStoreException;
  public final java.util.Date getCreationDate(java.lang.String) throws java.security.KeyStoreException;
  public final void setKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;
  public final void setKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;
  public final void setCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException;
  public final void deleteEntry(java.lang.String) throws java.security.KeyStoreException;
  public final java.util.Enumeration<java.lang.String> aliases() throws java.security.KeyStoreException;
  public final boolean containsAlias(java.lang.String) throws java.security.KeyStoreException;
  public final int size() throws java.security.KeyStoreException;
  public final boolean isKeyEntry(java.lang.String) throws java.security.KeyStoreException;
  public final boolean isCertificateEntry(java.lang.String) throws java.security.KeyStoreException;
  public final java.lang.String getCertificateAlias(java.security.cert.Certificate) throws java.security.KeyStoreException;
  public final void store(java.io.OutputStream, char[]) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void store(java.security.KeyStore$LoadStoreParameter) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void load(java.io.InputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final void load(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public final java.security.KeyStore$Entry getEntry(java.lang.String, java.security.KeyStore$ProtectionParameter) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException, java.security.KeyStoreException;
  public final void setEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException;
  public final boolean entryInstanceOf(java.lang.String, java.lang.Class<? extends java.security.KeyStore$Entry>) throws java.security.KeyStoreException;
  public static final java.security.KeyStore getInstance(java.io.File, char[]) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  public static final java.security.KeyStore getInstance(java.io.File, java.security.KeyStore$LoadStoreParameter) throws java.security.KeyStoreException, java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;
  static {};
}
