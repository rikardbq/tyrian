Compiled from "IdentityHashMap.java"
public class java.util.IdentityHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.Map<K, V>, java.io.Serializable, java.lang.Cloneable {
  transient java.lang.Object[] table;
  int size;
  transient int modCount;
  static final java.lang.Object NULL_KEY;
  static final java.lang.Object unmaskNull(java.lang.Object);
  public java.util.IdentityHashMap();
  public java.util.IdentityHashMap(int);
  public java.util.IdentityHashMap(java.util.Map<? extends K, ? extends V>);
  public int size();
  public boolean isEmpty();
  public V get(java.lang.Object);
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V put(K, V);
  public void putAll(java.util.Map<? extends K, ? extends V>);
  public V remove(java.lang.Object);
  public void clear();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.Object clone();
  public java.util.Set<K> keySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public void forEach(java.util.function.BiConsumer<? super K, ? super V>);
  public void replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>);
  static {};
}
