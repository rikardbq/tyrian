Compiled from "StampedLock.java"
public class java.util.concurrent.locks.StampedLock implements java.io.Serializable {
  transient java.util.concurrent.locks.StampedLock$ReadLockView readLockView;
  transient java.util.concurrent.locks.StampedLock$WriteLockView writeLockView;
  transient java.util.concurrent.locks.StampedLock$ReadWriteLockView readWriteLockView;
  public java.util.concurrent.locks.StampedLock();
  public long writeLock();
  public long tryWriteLock();
  public long tryWriteLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public long writeLockInterruptibly() throws java.lang.InterruptedException;
  public long readLock();
  public long tryReadLock();
  public long tryReadLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public long readLockInterruptibly() throws java.lang.InterruptedException;
  public long tryOptimisticRead();
  public boolean validate(long);
  public void unlockWrite(long);
  public void unlockRead(long);
  public void unlock(long);
  public long tryConvertToWriteLock(long);
  public long tryConvertToReadLock(long);
  public long tryConvertToOptimisticRead(long);
  public boolean tryUnlockWrite();
  public boolean tryUnlockRead();
  public boolean isWriteLocked();
  public boolean isReadLocked();
  public static boolean isWriteLockStamp(long);
  public static boolean isReadLockStamp(long);
  public static boolean isLockStamp(long);
  public static boolean isOptimisticReadStamp(long);
  public int getReadLockCount();
  public java.lang.String toString();
  public java.util.concurrent.locks.Lock asReadLock();
  public java.util.concurrent.locks.Lock asWriteLock();
  public java.util.concurrent.locks.ReadWriteLock asReadWriteLock();
  final void unstampedUnlockWrite();
  final void unstampedUnlockRead();
  static {};
}
