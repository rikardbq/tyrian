Compiled from "AbstractQueuedSynchronizer.java"
public abstract class java.util.concurrent.locks.AbstractQueuedSynchronizer extends java.util.concurrent.locks.AbstractOwnableSynchronizer implements java.io.Serializable {
  static final long SPIN_FOR_TIMEOUT_THRESHOLD;
  protected java.util.concurrent.locks.AbstractQueuedSynchronizer();
  protected final int getState();
  protected final void setState(int);
  protected final boolean compareAndSetState(int, int);
  static void selfInterrupt();
  final boolean acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node, int);
  protected boolean tryAcquire(int);
  protected boolean tryRelease(int);
  protected int tryAcquireShared(int);
  protected boolean tryReleaseShared(int);
  protected boolean isHeldExclusively();
  public final void acquire(int);
  public final void acquireInterruptibly(int) throws java.lang.InterruptedException;
  public final boolean tryAcquireNanos(int, long) throws java.lang.InterruptedException;
  public final boolean release(int);
  public final void acquireShared(int);
  public final void acquireSharedInterruptibly(int) throws java.lang.InterruptedException;
  public final boolean tryAcquireSharedNanos(int, long) throws java.lang.InterruptedException;
  public final boolean releaseShared(int);
  public final boolean hasQueuedThreads();
  public final boolean hasContended();
  public final java.lang.Thread getFirstQueuedThread();
  public final boolean isQueued(java.lang.Thread);
  final boolean apparentlyFirstQueuedIsExclusive();
  public final boolean hasQueuedPredecessors();
  public final int getQueueLength();
  public final java.util.Collection<java.lang.Thread> getQueuedThreads();
  public final java.util.Collection<java.lang.Thread> getExclusiveQueuedThreads();
  public final java.util.Collection<java.lang.Thread> getSharedQueuedThreads();
  public java.lang.String toString();
  final boolean isOnSyncQueue(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node);
  final boolean transferForSignal(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node);
  final boolean transferAfterCancelledWait(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node);
  final int fullyRelease(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node);
  public final boolean owns(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  public final java.util.Collection<java.lang.Thread> getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject);
  static {};
}
