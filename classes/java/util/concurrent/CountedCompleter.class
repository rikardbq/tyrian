Compiled from "CountedCompleter.java"
public abstract class java.util.concurrent.CountedCompleter<T> extends java.util.concurrent.ForkJoinTask<T> {
  final java.util.concurrent.CountedCompleter<?> completer;
  volatile int pending;
  protected java.util.concurrent.CountedCompleter(java.util.concurrent.CountedCompleter<?>, int);
  protected java.util.concurrent.CountedCompleter(java.util.concurrent.CountedCompleter<?>);
  protected java.util.concurrent.CountedCompleter();
  public abstract void compute();
  public void onCompletion(java.util.concurrent.CountedCompleter<?>);
  public boolean onExceptionalCompletion(java.lang.Throwable, java.util.concurrent.CountedCompleter<?>);
  public final java.util.concurrent.CountedCompleter<?> getCompleter();
  public final int getPendingCount();
  public final void setPendingCount(int);
  public final void addToPendingCount(int);
  public final boolean compareAndSetPendingCount(int, int);
  public final int decrementPendingCountUnlessZero();
  public final java.util.concurrent.CountedCompleter<?> getRoot();
  public final void tryComplete();
  public final void propagateCompletion();
  public void complete(T);
  public final java.util.concurrent.CountedCompleter<?> firstComplete();
  public final java.util.concurrent.CountedCompleter<?> nextComplete();
  public final void quietlyCompleteRoot();
  public final void helpComplete(int);
  void internalPropagateException(java.lang.Throwable);
  protected final boolean exec();
  public T getRawResult();
  protected void setRawResult(T);
  static {};
}
