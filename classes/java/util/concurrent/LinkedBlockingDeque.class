Compiled from "LinkedBlockingDeque.java"
public class java.util.concurrent.LinkedBlockingDeque<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingDeque<E>, java.io.Serializable {
  transient java.util.concurrent.LinkedBlockingDeque$Node<E> first;
  transient java.util.concurrent.LinkedBlockingDeque$Node<E> last;
  final java.util.concurrent.locks.ReentrantLock lock;
  public java.util.concurrent.LinkedBlockingDeque();
  public java.util.concurrent.LinkedBlockingDeque(int);
  public java.util.concurrent.LinkedBlockingDeque(java.util.Collection<? extends E>);
  void unlink(java.util.concurrent.LinkedBlockingDeque$Node<E>);
  public void addFirst(E);
  public void addLast(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public void putFirst(E) throws java.lang.InterruptedException;
  public void putLast(E) throws java.lang.InterruptedException;
  public boolean offerFirst(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public boolean offerLast(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E removeFirst();
  public E removeLast();
  public E pollFirst();
  public E pollLast();
  public E takeFirst() throws java.lang.InterruptedException;
  public E takeLast() throws java.lang.InterruptedException;
  public E pollFirst(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E pollLast(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E getFirst();
  public E getLast();
  public E peekFirst();
  public E peekLast();
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public boolean add(E);
  public boolean offer(E);
  public void put(E) throws java.lang.InterruptedException;
  public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E remove();
  public E poll();
  public E take() throws java.lang.InterruptedException;
  public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E element();
  public E peek();
  public int remainingCapacity();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public void push(E);
  public E pop();
  public boolean remove(java.lang.Object);
  public int size();
  public boolean contains(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.lang.String toString();
  public void clear();
  java.util.concurrent.LinkedBlockingDeque$Node<E> succ(java.util.concurrent.LinkedBlockingDeque$Node<E>);
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public java.util.Spliterator<E> spliterator();
  public void forEach(java.util.function.Consumer<? super E>);
  void forEachFrom(java.util.function.Consumer<? super E>, java.util.concurrent.LinkedBlockingDeque$Node<E>);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  void checkInvariants();
}
