Compiled from "ForkJoinTask.java"
public abstract class java.util.concurrent.ForkJoinTask<V> implements java.util.concurrent.Future<V>, java.io.Serializable {
  volatile int status;
  public java.util.concurrent.ForkJoinTask();
  static boolean isExceptionalStatus(int);
  final int doExec();
  final void internalWait(long);
  final int recordExceptionalCompletion(java.lang.Throwable);
  void internalPropagateException(java.lang.Throwable);
  static final void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask<?>);
  static final void helpExpungeStaleExceptions();
  static void rethrow(java.lang.Throwable);
  static <T extends java.lang.Throwable> void uncheckedThrow(java.lang.Throwable) throws T;
  public final java.util.concurrent.ForkJoinTask<V> fork();
  public final V join();
  public final V invoke();
  public static void invokeAll(java.util.concurrent.ForkJoinTask<?>, java.util.concurrent.ForkJoinTask<?>);
  public static void invokeAll(java.util.concurrent.ForkJoinTask<?>...);
  public static <T extends java.util.concurrent.ForkJoinTask<?>> java.util.Collection<T> invokeAll(java.util.Collection<T>);
  public boolean cancel(boolean);
  public final boolean isDone();
  public final boolean isCancelled();
  public final boolean isCompletedAbnormally();
  public final boolean isCompletedNormally();
  public final java.lang.Throwable getException();
  public void completeExceptionally(java.lang.Throwable);
  public void complete(V);
  public final void quietlyComplete();
  public final V get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException;
  public final V get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException;
  public final void quietlyJoin();
  public final void quietlyInvoke();
  public static void helpQuiesce();
  public void reinitialize();
  public static java.util.concurrent.ForkJoinPool getPool();
  public static boolean inForkJoinPool();
  public boolean tryUnfork();
  public static int getQueuedTaskCount();
  public static int getSurplusQueuedTaskCount();
  public abstract V getRawResult();
  protected abstract void setRawResult(V);
  protected abstract boolean exec();
  protected static java.util.concurrent.ForkJoinTask<?> peekNextLocalTask();
  protected static java.util.concurrent.ForkJoinTask<?> pollNextLocalTask();
  protected static java.util.concurrent.ForkJoinTask<?> pollTask();
  protected static java.util.concurrent.ForkJoinTask<?> pollSubmission();
  public final short getForkJoinTaskTag();
  public final short setForkJoinTaskTag(short);
  public final boolean compareAndSetForkJoinTaskTag(short, short);
  public static java.util.concurrent.ForkJoinTask<?> adapt(java.lang.Runnable);
  public static <T> java.util.concurrent.ForkJoinTask<T> adapt(java.lang.Runnable, T);
  public static <T> java.util.concurrent.ForkJoinTask<T> adapt(java.util.concurrent.Callable<? extends T>);
  static {};
}
