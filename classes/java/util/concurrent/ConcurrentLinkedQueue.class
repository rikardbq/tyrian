Compiled from "ConcurrentLinkedQueue.java"
public class java.util.concurrent.ConcurrentLinkedQueue<E> extends java.util.AbstractQueue<E> implements java.util.Queue<E>, java.io.Serializable {
  volatile transient java.util.concurrent.ConcurrentLinkedQueue$Node<E> head;
  static final java.lang.invoke.VarHandle ITEM;
  static final java.lang.invoke.VarHandle NEXT;
  public java.util.concurrent.ConcurrentLinkedQueue();
  public java.util.concurrent.ConcurrentLinkedQueue(java.util.Collection<? extends E>);
  public boolean add(E);
  final void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node<E>, java.util.concurrent.ConcurrentLinkedQueue$Node<E>);
  final java.util.concurrent.ConcurrentLinkedQueue$Node<E> succ(java.util.concurrent.ConcurrentLinkedQueue$Node<E>);
  public boolean offer(E);
  public E poll();
  public E peek();
  java.util.concurrent.ConcurrentLinkedQueue$Node<E> first();
  public boolean isEmpty();
  public int size();
  public boolean contains(java.lang.Object);
  public boolean remove(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public java.lang.String toString();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.util.Iterator<E> iterator();
  public java.util.Spliterator<E> spliterator();
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public void clear();
  void forEachFrom(java.util.function.Consumer<? super E>, java.util.concurrent.ConcurrentLinkedQueue$Node<E>);
  public void forEach(java.util.function.Consumer<? super E>);
  static {};
}
