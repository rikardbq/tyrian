Compiled from "ScheduledThreadPoolExecutor.java"
public class java.util.concurrent.ScheduledThreadPoolExecutor extends java.util.concurrent.ThreadPoolExecutor implements java.util.concurrent.ScheduledExecutorService {
  volatile boolean removeOnCancel;
  boolean canRunInCurrentRunState(java.util.concurrent.RunnableScheduledFuture<?>);
  void reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture<?>);
  void onShutdown();
  protected <V> java.util.concurrent.RunnableScheduledFuture<V> decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture<V>);
  protected <V> java.util.concurrent.RunnableScheduledFuture<V> decorateTask(java.util.concurrent.Callable<V>, java.util.concurrent.RunnableScheduledFuture<V>);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.RejectedExecutionHandler);
  public java.util.concurrent.ScheduledThreadPoolExecutor(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler);
  long triggerTime(long);
  public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
  public <V> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
  public void execute(java.lang.Runnable);
  public java.util.concurrent.Future<?> submit(java.lang.Runnable);
  public <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T);
  public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>);
  public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean);
  public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();
  public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean);
  public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();
  public void setRemoveOnCancelPolicy(boolean);
  public boolean getRemoveOnCancelPolicy();
  public void shutdown();
  public java.util.List<java.lang.Runnable> shutdownNow();
  public java.util.concurrent.BlockingQueue<java.lang.Runnable> getQueue();
  static {};
}
