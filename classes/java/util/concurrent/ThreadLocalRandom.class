Compiled from "ThreadLocalRandom.java"
public class java.util.concurrent.ThreadLocalRandom extends java.util.Random {
  boolean initialized;
  static final java.lang.String BAD_BOUND;
  static final java.lang.String BAD_RANGE;
  static final java.lang.String BAD_SIZE;
  static final java.util.concurrent.ThreadLocalRandom instance;
  static final void localInit();
  public static java.util.concurrent.ThreadLocalRandom current();
  public void setSeed(long);
  final long nextSeed();
  protected int next(int);
  final long internalNextLong(long, long);
  final int internalNextInt(int, int);
  final double internalNextDouble(double, double);
  public int nextInt();
  public int nextInt(int);
  public int nextInt(int, int);
  public long nextLong();
  public long nextLong(long);
  public long nextLong(long, long);
  public double nextDouble();
  public double nextDouble(double);
  public double nextDouble(double, double);
  public boolean nextBoolean();
  public float nextFloat();
  public double nextGaussian();
  public java.util.stream.IntStream ints(long);
  public java.util.stream.IntStream ints();
  public java.util.stream.IntStream ints(long, int, int);
  public java.util.stream.IntStream ints(int, int);
  public java.util.stream.LongStream longs(long);
  public java.util.stream.LongStream longs();
  public java.util.stream.LongStream longs(long, long, long);
  public java.util.stream.LongStream longs(long, long);
  public java.util.stream.DoubleStream doubles(long);
  public java.util.stream.DoubleStream doubles();
  public java.util.stream.DoubleStream doubles(long, double, double);
  public java.util.stream.DoubleStream doubles(double, double);
  static final int getProbe();
  static final int advanceProbe(int);
  static final int nextSecondarySeed();
  static final void eraseThreadLocals(java.lang.Thread);
  static final void setInheritedAccessControlContext(java.lang.Thread, java.security.AccessControlContext);
  static {};
}
