Compiled from "DelayQueue.java"
public class java.util.concurrent.DelayQueue<E extends java.util.concurrent.Delayed> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E> {
  public java.util.concurrent.DelayQueue();
  public java.util.concurrent.DelayQueue(java.util.Collection<? extends E>);
  public boolean add(E);
  public boolean offer(E);
  public void put(E);
  public boolean offer(E, long, java.util.concurrent.TimeUnit);
  public E poll();
  public E take() throws java.lang.InterruptedException;
  public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E peek();
  public int size();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public void clear();
  public int remainingCapacity();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public boolean remove(java.lang.Object);
  void removeEQ(java.lang.Object);
  public java.util.Iterator<E> iterator();
  public boolean add(java.lang.Object);
  public java.lang.Object peek();
  public java.lang.Object poll();
  public boolean offer(java.lang.Object);
  public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public java.lang.Object take() throws java.lang.InterruptedException;
  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public void put(java.lang.Object) throws java.lang.InterruptedException;
}
