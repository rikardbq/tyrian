Compiled from "BlockingDeque.java"
public interface java.util.concurrent.BlockingDeque<E> extends java.util.concurrent.BlockingQueue<E>, java.util.Deque<E> {
  public abstract void addFirst(E);
  public abstract void addLast(E);
  public abstract boolean offerFirst(E);
  public abstract boolean offerLast(E);
  public abstract void putFirst(E) throws java.lang.InterruptedException;
  public abstract void putLast(E) throws java.lang.InterruptedException;
  public abstract boolean offerFirst(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract boolean offerLast(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract E takeFirst() throws java.lang.InterruptedException;
  public abstract E takeLast() throws java.lang.InterruptedException;
  public abstract E pollFirst(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract E pollLast(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract boolean removeFirstOccurrence(java.lang.Object);
  public abstract boolean removeLastOccurrence(java.lang.Object);
  public abstract boolean add(E);
  public abstract boolean offer(E);
  public abstract void put(E) throws java.lang.InterruptedException;
  public abstract boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract E remove();
  public abstract E poll();
  public abstract E take() throws java.lang.InterruptedException;
  public abstract E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public abstract E element();
  public abstract E peek();
  public abstract boolean remove(java.lang.Object);
  public abstract boolean contains(java.lang.Object);
  public abstract int size();
  public abstract java.util.Iterator<E> iterator();
  public abstract void push(E);
}
