Compiled from "LinkedTransferQueue.java"
public class java.util.concurrent.LinkedTransferQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.TransferQueue<E>, java.io.Serializable {
  static final int SWEEP_THRESHOLD;
  volatile transient java.util.concurrent.LinkedTransferQueue$Node head;
  static final java.lang.invoke.VarHandle ITEM;
  static final java.lang.invoke.VarHandle NEXT;
  static final java.lang.invoke.VarHandle WAITER;
  final java.util.concurrent.LinkedTransferQueue$Node firstDataNode();
  public java.lang.String toString();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.util.Spliterator<E> spliterator();
  final void unsplice(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node);
  public java.util.concurrent.LinkedTransferQueue();
  public java.util.concurrent.LinkedTransferQueue(java.util.Collection<? extends E>);
  public void put(E);
  public boolean offer(E, long, java.util.concurrent.TimeUnit);
  public boolean offer(E);
  public boolean add(E);
  public boolean tryTransfer(E);
  public void transfer(E) throws java.lang.InterruptedException;
  public boolean tryTransfer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E take() throws java.lang.InterruptedException;
  public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E poll();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public java.util.Iterator<E> iterator();
  public E peek();
  public boolean isEmpty();
  public boolean hasWaitingConsumer();
  public int size();
  public int getWaitingConsumerCount();
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public int remainingCapacity();
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public void clear();
  void forEachFrom(java.util.function.Consumer<? super E>, java.util.concurrent.LinkedTransferQueue$Node);
  public void forEach(java.util.function.Consumer<? super E>);
  static {};
}
