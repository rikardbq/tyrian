Compiled from "AtomicIntegerFieldUpdater.java"
public abstract class java.util.concurrent.atomic.AtomicIntegerFieldUpdater<T> {
  public static <U> java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U> newUpdater(java.lang.Class<U>, java.lang.String);
  protected java.util.concurrent.atomic.AtomicIntegerFieldUpdater();
  public abstract boolean compareAndSet(T, int, int);
  public abstract boolean weakCompareAndSet(T, int, int);
  public abstract void set(T, int);
  public abstract void lazySet(T, int);
  public abstract int get(T);
  public int getAndSet(T, int);
  public int getAndIncrement(T);
  public int getAndDecrement(T);
  public int getAndAdd(T, int);
  public int incrementAndGet(T);
  public int decrementAndGet(T);
  public int addAndGet(T, int);
  public final int getAndUpdate(T, java.util.function.IntUnaryOperator);
  public final int updateAndGet(T, java.util.function.IntUnaryOperator);
  public final int getAndAccumulate(T, int, java.util.function.IntBinaryOperator);
  public final int accumulateAndGet(T, int, java.util.function.IntBinaryOperator);
}
