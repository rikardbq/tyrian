Compiled from "AtomicReferenceArray.java"
public class java.util.concurrent.atomic.AtomicReferenceArray<E> implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicReferenceArray(int);
  public java.util.concurrent.atomic.AtomicReferenceArray(E[]);
  public final int length();
  public final E get(int);
  public final void set(int, E);
  public final void lazySet(int, E);
  public final E getAndSet(int, E);
  public final boolean compareAndSet(int, E, E);
  public final boolean weakCompareAndSet(int, E, E);
  public final boolean weakCompareAndSetPlain(int, E, E);
  public final E getAndUpdate(int, java.util.function.UnaryOperator<E>);
  public final E updateAndGet(int, java.util.function.UnaryOperator<E>);
  public final E getAndAccumulate(int, E, java.util.function.BinaryOperator<E>);
  public final E accumulateAndGet(int, E, java.util.function.BinaryOperator<E>);
  public java.lang.String toString();
  public final E getPlain(int);
  public final void setPlain(int, E);
  public final E getOpaque(int);
  public final void setOpaque(int, E);
  public final E getAcquire(int);
  public final void setRelease(int, E);
  public final E compareAndExchange(int, E, E);
  public final E compareAndExchangeAcquire(int, E, E);
  public final E compareAndExchangeRelease(int, E, E);
  public final boolean weakCompareAndSetVolatile(int, E, E);
  public final boolean weakCompareAndSetAcquire(int, E, E);
  public final boolean weakCompareAndSetRelease(int, E, E);
  static {};
}
