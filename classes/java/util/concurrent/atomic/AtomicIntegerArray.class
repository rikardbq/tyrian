Compiled from "AtomicIntegerArray.java"
public class java.util.concurrent.atomic.AtomicIntegerArray implements java.io.Serializable {
  public java.util.concurrent.atomic.AtomicIntegerArray(int);
  public java.util.concurrent.atomic.AtomicIntegerArray(int[]);
  public final int length();
  public final int get(int);
  public final void set(int, int);
  public final void lazySet(int, int);
  public final int getAndSet(int, int);
  public final boolean compareAndSet(int, int, int);
  public final boolean weakCompareAndSet(int, int, int);
  public final boolean weakCompareAndSetPlain(int, int, int);
  public final int getAndIncrement(int);
  public final int getAndDecrement(int);
  public final int getAndAdd(int, int);
  public final int incrementAndGet(int);
  public final int decrementAndGet(int);
  public final int addAndGet(int, int);
  public final int getAndUpdate(int, java.util.function.IntUnaryOperator);
  public final int updateAndGet(int, java.util.function.IntUnaryOperator);
  public final int getAndAccumulate(int, int, java.util.function.IntBinaryOperator);
  public final int accumulateAndGet(int, int, java.util.function.IntBinaryOperator);
  public java.lang.String toString();
  public final int getPlain(int);
  public final void setPlain(int, int);
  public final int getOpaque(int);
  public final void setOpaque(int, int);
  public final int getAcquire(int);
  public final void setRelease(int, int);
  public final int compareAndExchange(int, int, int);
  public final int compareAndExchangeAcquire(int, int, int);
  public final int compareAndExchangeRelease(int, int, int);
  public final boolean weakCompareAndSetVolatile(int, int, int);
  public final boolean weakCompareAndSetAcquire(int, int, int);
  public final boolean weakCompareAndSetRelease(int, int, int);
  static {};
}
