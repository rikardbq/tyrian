Compiled from "ConcurrentMap.java"
public interface java.util.concurrent.ConcurrentMap<K, V> extends java.util.Map<K, V> {
  public default V getOrDefault(java.lang.Object, V);
  public default void forEach(java.util.function.BiConsumer<? super K, ? super V>);
  public abstract V putIfAbsent(K, V);
  public abstract boolean remove(java.lang.Object, java.lang.Object);
  public abstract boolean replace(K, V, V);
  public abstract V replace(K, V);
  public default void replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>);
  public default V computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>);
  public default V computeIfPresent(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>);
  public default V compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>);
  public default V merge(K, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>);
}
