Compiled from "CopyOnWriteArrayList.java"
public class java.util.concurrent.CopyOnWriteArrayList<E> implements java.util.List<E>, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable {
  final transient java.lang.Object lock;
  final java.lang.Object[] getArray();
  final void setArray(java.lang.Object[]);
  public java.util.concurrent.CopyOnWriteArrayList();
  public java.util.concurrent.CopyOnWriteArrayList(java.util.Collection<? extends E>);
  public java.util.concurrent.CopyOnWriteArrayList(E[]);
  public int size();
  public boolean isEmpty();
  public boolean contains(java.lang.Object);
  public int indexOf(java.lang.Object);
  public int indexOf(E, int);
  public int lastIndexOf(java.lang.Object);
  public int lastIndexOf(E, int);
  public java.lang.Object clone();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  static <E> E elementAt(java.lang.Object[], int);
  static java.lang.String outOfBounds(int, int);
  public E get(int);
  public E set(int, E);
  public boolean add(E);
  public void add(int, E);
  public E remove(int);
  public boolean remove(java.lang.Object);
  void removeRange(int, int);
  public boolean addIfAbsent(E);
  public boolean containsAll(java.util.Collection<?>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public int addAllAbsent(java.util.Collection<? extends E>);
  public void clear();
  public boolean addAll(java.util.Collection<? extends E>);
  public boolean addAll(int, java.util.Collection<? extends E>);
  public void forEach(java.util.function.Consumer<? super E>);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  boolean bulkRemove(java.util.function.Predicate<? super E>, int, int);
  public void replaceAll(java.util.function.UnaryOperator<E>);
  void replaceAllRange(java.util.function.UnaryOperator<E>, int, int);
  public void sort(java.util.Comparator<? super E>);
  void sortRange(java.util.Comparator<? super E>, int, int);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.util.Iterator<E> iterator();
  public java.util.ListIterator<E> listIterator();
  public java.util.ListIterator<E> listIterator(int);
  public java.util.Spliterator<E> spliterator();
  public java.util.List<E> subList(int, int);
}
