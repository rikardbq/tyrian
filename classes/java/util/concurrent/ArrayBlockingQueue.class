Compiled from "ArrayBlockingQueue.java"
public class java.util.concurrent.ArrayBlockingQueue<E> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E>, java.io.Serializable {
  final java.lang.Object[] items;
  int takeIndex;
  int putIndex;
  int count;
  final java.util.concurrent.locks.ReentrantLock lock;
  transient java.util.concurrent.ArrayBlockingQueue<E>.Itrs itrs;
  static final int inc(int, int);
  static final int dec(int, int);
  final E itemAt(int);
  static <E> E itemAt(java.lang.Object[], int);
  void removeAt(int);
  public java.util.concurrent.ArrayBlockingQueue(int);
  public java.util.concurrent.ArrayBlockingQueue(int, boolean);
  public java.util.concurrent.ArrayBlockingQueue(int, boolean, java.util.Collection<? extends E>);
  public boolean add(E);
  public boolean offer(E);
  public void put(E) throws java.lang.InterruptedException;
  public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E poll();
  public E take() throws java.lang.InterruptedException;
  public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
  public E peek();
  public int size();
  public int remainingCapacity();
  public boolean remove(java.lang.Object);
  public boolean contains(java.lang.Object);
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.lang.String toString();
  public void clear();
  public int drainTo(java.util.Collection<? super E>);
  public int drainTo(java.util.Collection<? super E>, int);
  public java.util.Iterator<E> iterator();
  public java.util.Spliterator<E> spliterator();
  public void forEach(java.util.function.Consumer<? super E>);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  void checkInvariants();
}
