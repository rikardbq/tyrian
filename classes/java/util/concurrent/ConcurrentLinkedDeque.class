Compiled from "ConcurrentLinkedDeque.java"
public class java.util.concurrent.ConcurrentLinkedDeque<E> extends java.util.AbstractCollection<E> implements java.util.Deque<E>, java.io.Serializable {
  java.util.concurrent.ConcurrentLinkedDeque$Node<E> prevTerminator();
  java.util.concurrent.ConcurrentLinkedDeque$Node<E> nextTerminator();
  static <E> java.util.concurrent.ConcurrentLinkedDeque$Node<E> newNode(E);
  void unlink(java.util.concurrent.ConcurrentLinkedDeque$Node<E>);
  final java.util.concurrent.ConcurrentLinkedDeque$Node<E> succ(java.util.concurrent.ConcurrentLinkedDeque$Node<E>);
  final java.util.concurrent.ConcurrentLinkedDeque$Node<E> pred(java.util.concurrent.ConcurrentLinkedDeque$Node<E>);
  java.util.concurrent.ConcurrentLinkedDeque$Node<E> first();
  java.util.concurrent.ConcurrentLinkedDeque$Node<E> last();
  public java.util.concurrent.ConcurrentLinkedDeque();
  public java.util.concurrent.ConcurrentLinkedDeque(java.util.Collection<? extends E>);
  public void addFirst(E);
  public void addLast(E);
  public boolean offerFirst(E);
  public boolean offerLast(E);
  public E peekFirst();
  public E peekLast();
  public E getFirst();
  public E getLast();
  public E pollFirst();
  public E pollLast();
  public E removeFirst();
  public E removeLast();
  public boolean offer(E);
  public boolean add(E);
  public E poll();
  public E peek();
  public E remove();
  public E pop();
  public E element();
  public void push(E);
  public boolean removeFirstOccurrence(java.lang.Object);
  public boolean removeLastOccurrence(java.lang.Object);
  public boolean contains(java.lang.Object);
  public boolean isEmpty();
  public int size();
  public boolean remove(java.lang.Object);
  public boolean addAll(java.util.Collection<? extends E>);
  public void clear();
  public java.lang.String toString();
  public java.lang.Object[] toArray();
  public <T> T[] toArray(T[]);
  public java.util.Iterator<E> iterator();
  public java.util.Iterator<E> descendingIterator();
  public java.util.Spliterator<E> spliterator();
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public boolean removeAll(java.util.Collection<?>);
  public boolean retainAll(java.util.Collection<?>);
  public void forEach(java.util.function.Consumer<? super E>);
  static {};
}
