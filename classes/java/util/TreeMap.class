Compiled from "TreeMap.java"
public class java.util.TreeMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.NavigableMap<K, V>, java.lang.Cloneable, java.io.Serializable {
  public java.util.TreeMap();
  public java.util.TreeMap(java.util.Comparator<? super K>);
  public java.util.TreeMap(java.util.Map<? extends K, ? extends V>);
  public java.util.TreeMap(java.util.SortedMap<K, ? extends V>);
  public int size();
  public boolean containsKey(java.lang.Object);
  public boolean containsValue(java.lang.Object);
  public V get(java.lang.Object);
  public java.util.Comparator<? super K> comparator();
  public K firstKey();
  public K lastKey();
  public void putAll(java.util.Map<? extends K, ? extends V>);
  final java.util.TreeMap$Entry<K, V> getEntry(java.lang.Object);
  final java.util.TreeMap$Entry<K, V> getEntryUsingComparator(java.lang.Object);
  final java.util.TreeMap$Entry<K, V> getCeilingEntry(K);
  final java.util.TreeMap$Entry<K, V> getFloorEntry(K);
  final java.util.TreeMap$Entry<K, V> getHigherEntry(K);
  final java.util.TreeMap$Entry<K, V> getLowerEntry(K);
  public V put(K, V);
  public V remove(java.lang.Object);
  public void clear();
  public java.lang.Object clone();
  public java.util.Map$Entry<K, V> firstEntry();
  public java.util.Map$Entry<K, V> lastEntry();
  public java.util.Map$Entry<K, V> pollFirstEntry();
  public java.util.Map$Entry<K, V> pollLastEntry();
  public java.util.Map$Entry<K, V> lowerEntry(K);
  public K lowerKey(K);
  public java.util.Map$Entry<K, V> floorEntry(K);
  public K floorKey(K);
  public java.util.Map$Entry<K, V> ceilingEntry(K);
  public K ceilingKey(K);
  public java.util.Map$Entry<K, V> higherEntry(K);
  public K higherKey(K);
  public java.util.Set<K> keySet();
  public java.util.NavigableSet<K> navigableKeySet();
  public java.util.NavigableSet<K> descendingKeySet();
  public java.util.Collection<V> values();
  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
  public java.util.NavigableMap<K, V> descendingMap();
  public java.util.NavigableMap<K, V> subMap(K, boolean, K, boolean);
  public java.util.NavigableMap<K, V> headMap(K, boolean);
  public java.util.NavigableMap<K, V> tailMap(K, boolean);
  public java.util.SortedMap<K, V> subMap(K, K);
  public java.util.SortedMap<K, V> headMap(K);
  public java.util.SortedMap<K, V> tailMap(K);
  public boolean replace(K, V, V);
  public V replace(K, V);
  public void forEach(java.util.function.BiConsumer<? super K, ? super V>);
  public void replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>);
  java.util.Iterator<K> keyIterator();
  java.util.Iterator<K> descendingKeyIterator();
  final int compare(java.lang.Object, java.lang.Object);
  static final boolean valEquals(java.lang.Object, java.lang.Object);
  static <K, V> java.util.Map$Entry<K, V> exportEntry(java.util.TreeMap$Entry<K, V>);
  static <K, V> K keyOrNull(java.util.TreeMap$Entry<K, V>);
  static <K> K key(java.util.TreeMap$Entry<K, ?>);
  final java.util.TreeMap$Entry<K, V> getFirstEntry();
  final java.util.TreeMap$Entry<K, V> getLastEntry();
  static <K, V> java.util.TreeMap$Entry<K, V> successor(java.util.TreeMap$Entry<K, V>);
  static <K, V> java.util.TreeMap$Entry<K, V> predecessor(java.util.TreeMap$Entry<K, V>);
  void readTreeSet(int, java.io.ObjectInputStream, V) throws java.io.IOException, java.lang.ClassNotFoundException;
  void addAllForTreeSet(java.util.SortedSet<? extends K>, V);
  static <K> java.util.Spliterator<K> keySpliteratorFor(java.util.NavigableMap<K, ?>);
  final java.util.Spliterator<K> keySpliterator();
  final java.util.Spliterator<K> descendingKeySpliterator();
  static {};
}
