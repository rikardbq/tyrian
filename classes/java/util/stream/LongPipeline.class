Compiled from "LongPipeline.java"
abstract class java.util.stream.LongPipeline<E_IN> extends java.util.stream.AbstractPipeline<E_IN, java.lang.Long, java.util.stream.LongStream> implements java.util.stream.LongStream {
  java.util.stream.LongPipeline(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Long>>, int, boolean);
  java.util.stream.LongPipeline(java.util.Spliterator<java.lang.Long>, int, boolean);
  java.util.stream.LongPipeline(java.util.stream.AbstractPipeline<?, E_IN, ?>, int);
  final java.util.stream.StreamShape getOutputShape();
  final <P_IN> java.util.stream.Node<java.lang.Long> evaluateToNode(java.util.stream.PipelineHelper<java.lang.Long>, java.util.Spliterator<P_IN>, boolean, java.util.function.IntFunction<java.lang.Long[]>);
  final <P_IN> java.util.Spliterator<java.lang.Long> wrap(java.util.stream.PipelineHelper<java.lang.Long>, java.util.function.Supplier<java.util.Spliterator<P_IN>>, boolean);
  final java.util.Spliterator$OfLong lazySpliterator(java.util.function.Supplier<? extends java.util.Spliterator<java.lang.Long>>);
  final boolean forEachWithCancel(java.util.Spliterator<java.lang.Long>, java.util.stream.Sink<java.lang.Long>);
  final java.util.stream.Node$Builder<java.lang.Long> makeNodeBuilder(long, java.util.function.IntFunction<java.lang.Long[]>);
  public final java.util.PrimitiveIterator$OfLong iterator();
  public final java.util.Spliterator$OfLong spliterator();
  public final java.util.stream.DoubleStream asDoubleStream();
  public final java.util.stream.Stream<java.lang.Long> boxed();
  public final java.util.stream.LongStream map(java.util.function.LongUnaryOperator);
  public final <U> java.util.stream.Stream<U> mapToObj(java.util.function.LongFunction<? extends U>);
  public final java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction);
  public final java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction);
  public final java.util.stream.LongStream flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream>);
  public java.util.stream.LongStream unordered();
  public final java.util.stream.LongStream filter(java.util.function.LongPredicate);
  public final java.util.stream.LongStream peek(java.util.function.LongConsumer);
  public final java.util.stream.LongStream limit(long);
  public final java.util.stream.LongStream skip(long);
  public final java.util.stream.LongStream takeWhile(java.util.function.LongPredicate);
  public final java.util.stream.LongStream dropWhile(java.util.function.LongPredicate);
  public final java.util.stream.LongStream sorted();
  public final java.util.stream.LongStream distinct();
  public void forEach(java.util.function.LongConsumer);
  public void forEachOrdered(java.util.function.LongConsumer);
  public final long sum();
  public final java.util.OptionalLong min();
  public final java.util.OptionalLong max();
  public final java.util.OptionalDouble average();
  public final long count();
  public final java.util.LongSummaryStatistics summaryStatistics();
  public final long reduce(long, java.util.function.LongBinaryOperator);
  public final java.util.OptionalLong reduce(java.util.function.LongBinaryOperator);
  public final <R> R collect(java.util.function.Supplier<R>, java.util.function.ObjLongConsumer<R>, java.util.function.BiConsumer<R, R>);
  public final boolean anyMatch(java.util.function.LongPredicate);
  public final boolean allMatch(java.util.function.LongPredicate);
  public final boolean noneMatch(java.util.function.LongPredicate);
  public final java.util.OptionalLong findFirst();
  public final java.util.OptionalLong findAny();
  public final long[] toArray();
  java.util.Spliterator lazySpliterator(java.util.function.Supplier);
  public java.util.Spliterator spliterator();
  public java.util.stream.BaseStream unordered();
  public java.util.Iterator iterator();
  public java.util.stream.LongStream parallel();
  public java.util.stream.LongStream sequential();
}
