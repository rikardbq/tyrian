Compiled from "LongStream.java"
public interface java.util.stream.LongStream extends java.util.stream.BaseStream<java.lang.Long, java.util.stream.LongStream> {
  public abstract java.util.stream.LongStream filter(java.util.function.LongPredicate);
  public abstract java.util.stream.LongStream map(java.util.function.LongUnaryOperator);
  public abstract <U> java.util.stream.Stream<U> mapToObj(java.util.function.LongFunction<? extends U>);
  public abstract java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction);
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction);
  public abstract java.util.stream.LongStream flatMap(java.util.function.LongFunction<? extends java.util.stream.LongStream>);
  public abstract java.util.stream.LongStream distinct();
  public abstract java.util.stream.LongStream sorted();
  public abstract java.util.stream.LongStream peek(java.util.function.LongConsumer);
  public abstract java.util.stream.LongStream limit(long);
  public abstract java.util.stream.LongStream skip(long);
  public default java.util.stream.LongStream takeWhile(java.util.function.LongPredicate);
  public default java.util.stream.LongStream dropWhile(java.util.function.LongPredicate);
  public abstract void forEach(java.util.function.LongConsumer);
  public abstract void forEachOrdered(java.util.function.LongConsumer);
  public abstract long[] toArray();
  public abstract long reduce(long, java.util.function.LongBinaryOperator);
  public abstract java.util.OptionalLong reduce(java.util.function.LongBinaryOperator);
  public abstract <R> R collect(java.util.function.Supplier<R>, java.util.function.ObjLongConsumer<R>, java.util.function.BiConsumer<R, R>);
  public abstract long sum();
  public abstract java.util.OptionalLong min();
  public abstract java.util.OptionalLong max();
  public abstract long count();
  public abstract java.util.OptionalDouble average();
  public abstract java.util.LongSummaryStatistics summaryStatistics();
  public abstract boolean anyMatch(java.util.function.LongPredicate);
  public abstract boolean allMatch(java.util.function.LongPredicate);
  public abstract boolean noneMatch(java.util.function.LongPredicate);
  public abstract java.util.OptionalLong findFirst();
  public abstract java.util.OptionalLong findAny();
  public abstract java.util.stream.DoubleStream asDoubleStream();
  public abstract java.util.stream.Stream<java.lang.Long> boxed();
  public abstract java.util.stream.LongStream sequential();
  public abstract java.util.stream.LongStream parallel();
  public abstract java.util.PrimitiveIterator$OfLong iterator();
  public abstract java.util.Spliterator$OfLong spliterator();
  public static java.util.stream.LongStream$Builder builder();
  public static java.util.stream.LongStream empty();
  public static java.util.stream.LongStream of(long);
  public static java.util.stream.LongStream of(long...);
  public static java.util.stream.LongStream iterate(long, java.util.function.LongUnaryOperator);
  public static java.util.stream.LongStream iterate(long, java.util.function.LongPredicate, java.util.function.LongUnaryOperator);
  public static java.util.stream.LongStream generate(java.util.function.LongSupplier);
  public static java.util.stream.LongStream range(long, long);
  public static java.util.stream.LongStream rangeClosed(long, long);
  public static java.util.stream.LongStream concat(java.util.stream.LongStream, java.util.stream.LongStream);
  public default java.util.stream.BaseStream parallel();
  public default java.util.stream.BaseStream sequential();
  public default java.util.Spliterator spliterator();
  public default java.util.Iterator iterator();
}
