Compiled from "AbstractTask.java"
abstract class java.util.stream.AbstractTask<P_IN, P_OUT, R, K extends java.util.stream.AbstractTask<P_IN, P_OUT, R, K>> extends java.util.concurrent.CountedCompleter<R> {
  protected final java.util.stream.PipelineHelper<P_OUT> helper;
  protected java.util.Spliterator<P_IN> spliterator;
  protected long targetSize;
  protected K leftChild;
  protected K rightChild;
  protected java.util.stream.AbstractTask(java.util.stream.PipelineHelper<P_OUT>, java.util.Spliterator<P_IN>);
  protected java.util.stream.AbstractTask(K, java.util.Spliterator<P_IN>);
  public static int getLeafTarget();
  protected abstract K makeChild(java.util.Spliterator<P_IN>);
  protected abstract R doLeaf();
  public static long suggestTargetSize(long);
  protected final long getTargetSize(long);
  public R getRawResult();
  protected void setRawResult(R);
  protected R getLocalResult();
  protected void setLocalResult(R);
  protected boolean isLeaf();
  protected boolean isRoot();
  protected K getParent();
  public void compute();
  public void onCompletion(java.util.concurrent.CountedCompleter<?>);
  protected boolean isLeftmostNode();
  static {};
}
