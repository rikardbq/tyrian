Compiled from "IntStream.java"
public interface java.util.stream.IntStream extends java.util.stream.BaseStream<java.lang.Integer, java.util.stream.IntStream> {
  public abstract java.util.stream.IntStream filter(java.util.function.IntPredicate);
  public abstract java.util.stream.IntStream map(java.util.function.IntUnaryOperator);
  public abstract <U> java.util.stream.Stream<U> mapToObj(java.util.function.IntFunction<? extends U>);
  public abstract java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction);
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction);
  public abstract java.util.stream.IntStream flatMap(java.util.function.IntFunction<? extends java.util.stream.IntStream>);
  public abstract java.util.stream.IntStream distinct();
  public abstract java.util.stream.IntStream sorted();
  public abstract java.util.stream.IntStream peek(java.util.function.IntConsumer);
  public abstract java.util.stream.IntStream limit(long);
  public abstract java.util.stream.IntStream skip(long);
  public default java.util.stream.IntStream takeWhile(java.util.function.IntPredicate);
  public default java.util.stream.IntStream dropWhile(java.util.function.IntPredicate);
  public abstract void forEach(java.util.function.IntConsumer);
  public abstract void forEachOrdered(java.util.function.IntConsumer);
  public abstract int[] toArray();
  public abstract int reduce(int, java.util.function.IntBinaryOperator);
  public abstract java.util.OptionalInt reduce(java.util.function.IntBinaryOperator);
  public abstract <R> R collect(java.util.function.Supplier<R>, java.util.function.ObjIntConsumer<R>, java.util.function.BiConsumer<R, R>);
  public abstract int sum();
  public abstract java.util.OptionalInt min();
  public abstract java.util.OptionalInt max();
  public abstract long count();
  public abstract java.util.OptionalDouble average();
  public abstract java.util.IntSummaryStatistics summaryStatistics();
  public abstract boolean anyMatch(java.util.function.IntPredicate);
  public abstract boolean allMatch(java.util.function.IntPredicate);
  public abstract boolean noneMatch(java.util.function.IntPredicate);
  public abstract java.util.OptionalInt findFirst();
  public abstract java.util.OptionalInt findAny();
  public abstract java.util.stream.LongStream asLongStream();
  public abstract java.util.stream.DoubleStream asDoubleStream();
  public abstract java.util.stream.Stream<java.lang.Integer> boxed();
  public abstract java.util.stream.IntStream sequential();
  public abstract java.util.stream.IntStream parallel();
  public abstract java.util.PrimitiveIterator$OfInt iterator();
  public abstract java.util.Spliterator$OfInt spliterator();
  public static java.util.stream.IntStream$Builder builder();
  public static java.util.stream.IntStream empty();
  public static java.util.stream.IntStream of(int);
  public static java.util.stream.IntStream of(int...);
  public static java.util.stream.IntStream iterate(int, java.util.function.IntUnaryOperator);
  public static java.util.stream.IntStream iterate(int, java.util.function.IntPredicate, java.util.function.IntUnaryOperator);
  public static java.util.stream.IntStream generate(java.util.function.IntSupplier);
  public static java.util.stream.IntStream range(int, int);
  public static java.util.stream.IntStream rangeClosed(int, int);
  public static java.util.stream.IntStream concat(java.util.stream.IntStream, java.util.stream.IntStream);
  public default java.util.stream.BaseStream parallel();
  public default java.util.stream.BaseStream sequential();
  public default java.util.Spliterator spliterator();
  public default java.util.Iterator iterator();
}
