Compiled from "Stream.java"
public interface java.util.stream.Stream<T> extends java.util.stream.BaseStream<T, java.util.stream.Stream<T>> {
  public abstract java.util.stream.Stream<T> filter(java.util.function.Predicate<? super T>);
  public abstract <R> java.util.stream.Stream<R> map(java.util.function.Function<? super T, ? extends R>);
  public abstract java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction<? super T>);
  public abstract java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction<? super T>);
  public abstract java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction<? super T>);
  public abstract <R> java.util.stream.Stream<R> flatMap(java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends R>>);
  public abstract java.util.stream.IntStream flatMapToInt(java.util.function.Function<? super T, ? extends java.util.stream.IntStream>);
  public abstract java.util.stream.LongStream flatMapToLong(java.util.function.Function<? super T, ? extends java.util.stream.LongStream>);
  public abstract java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function<? super T, ? extends java.util.stream.DoubleStream>);
  public abstract java.util.stream.Stream<T> distinct();
  public abstract java.util.stream.Stream<T> sorted();
  public abstract java.util.stream.Stream<T> sorted(java.util.Comparator<? super T>);
  public abstract java.util.stream.Stream<T> peek(java.util.function.Consumer<? super T>);
  public abstract java.util.stream.Stream<T> limit(long);
  public abstract java.util.stream.Stream<T> skip(long);
  public default java.util.stream.Stream<T> takeWhile(java.util.function.Predicate<? super T>);
  public default java.util.stream.Stream<T> dropWhile(java.util.function.Predicate<? super T>);
  public abstract void forEach(java.util.function.Consumer<? super T>);
  public abstract void forEachOrdered(java.util.function.Consumer<? super T>);
  public abstract java.lang.Object[] toArray();
  public abstract <A> A[] toArray(java.util.function.IntFunction<A[]>);
  public abstract T reduce(T, java.util.function.BinaryOperator<T>);
  public abstract java.util.Optional<T> reduce(java.util.function.BinaryOperator<T>);
  public abstract <U> U reduce(U, java.util.function.BiFunction<U, ? super T, U>, java.util.function.BinaryOperator<U>);
  public abstract <R> R collect(java.util.function.Supplier<R>, java.util.function.BiConsumer<R, ? super T>, java.util.function.BiConsumer<R, R>);
  public abstract <R, A> R collect(java.util.stream.Collector<? super T, A, R>);
  public abstract java.util.Optional<T> min(java.util.Comparator<? super T>);
  public abstract java.util.Optional<T> max(java.util.Comparator<? super T>);
  public abstract long count();
  public abstract boolean anyMatch(java.util.function.Predicate<? super T>);
  public abstract boolean allMatch(java.util.function.Predicate<? super T>);
  public abstract boolean noneMatch(java.util.function.Predicate<? super T>);
  public abstract java.util.Optional<T> findFirst();
  public abstract java.util.Optional<T> findAny();
  public static <T> java.util.stream.Stream$Builder<T> builder();
  public static <T> java.util.stream.Stream<T> empty();
  public static <T> java.util.stream.Stream<T> of(T);
  public static <T> java.util.stream.Stream<T> ofNullable(T);
  public static <T> java.util.stream.Stream<T> of(T...);
  public static <T> java.util.stream.Stream<T> iterate(T, java.util.function.UnaryOperator<T>);
  public static <T> java.util.stream.Stream<T> iterate(T, java.util.function.Predicate<? super T>, java.util.function.UnaryOperator<T>);
  public static <T> java.util.stream.Stream<T> generate(java.util.function.Supplier<? extends T>);
  public static <T> java.util.stream.Stream<T> concat(java.util.stream.Stream<? extends T>, java.util.stream.Stream<? extends T>);
}
