Compiled from "AbstractShortCircuitTask.java"
abstract class java.util.stream.AbstractShortCircuitTask<P_IN, P_OUT, R, K extends java.util.stream.AbstractShortCircuitTask<P_IN, P_OUT, R, K>> extends java.util.stream.AbstractTask<P_IN, P_OUT, R, K> {
  protected final java.util.concurrent.atomic.AtomicReference<R> sharedResult;
  protected volatile boolean canceled;
  protected java.util.stream.AbstractShortCircuitTask(java.util.stream.PipelineHelper<P_OUT>, java.util.Spliterator<P_IN>);
  protected java.util.stream.AbstractShortCircuitTask(K, java.util.Spliterator<P_IN>);
  protected abstract R getEmptyResult();
  public void compute();
  protected void shortCircuit(R);
  protected void setLocalResult(R);
  public R getRawResult();
  public R getLocalResult();
  protected void cancel();
  protected boolean taskCanceled();
  protected void cancelLaterNodes();
}
