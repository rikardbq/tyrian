Compiled from "Pattern.java"
public final class java.util.regex.Pattern implements java.io.Serializable {
  public static final int UNIX_LINES;
  public static final int CASE_INSENSITIVE;
  public static final int COMMENTS;
  public static final int MULTILINE;
  public static final int LITERAL;
  public static final int DOTALL;
  public static final int UNICODE_CASE;
  public static final int CANON_EQ;
  public static final int UNICODE_CHARACTER_CLASS;
  transient java.util.regex.Pattern$Node root;
  transient java.util.regex.Pattern$Node matchRoot;
  transient int[] buffer;
  transient java.util.regex.Pattern$CharPredicate predicate;
  volatile transient java.util.Map<java.lang.String, java.lang.Integer> namedGroups;
  transient java.util.regex.Pattern$GroupHead[] groupNodes;
  transient java.util.List<java.util.regex.Pattern$Node> topClosureNodes;
  transient int localTCNCount;
  transient boolean hasGroupRef;
  transient int capturingGroupCount;
  transient int localCount;
  static final int MAX_REPS;
  static java.util.regex.Pattern$Node lookbehindEnd;
  static final java.util.regex.Pattern$Node accept;
  static final java.util.regex.Pattern$Node lastAccept;
  static final boolean $assertionsDisabled;
  public static java.util.regex.Pattern compile(java.lang.String);
  public static java.util.regex.Pattern compile(java.lang.String, int);
  public java.lang.String pattern();
  public java.lang.String toString();
  public java.util.regex.Matcher matcher(java.lang.CharSequence);
  public int flags();
  public static boolean matches(java.lang.String, java.lang.CharSequence);
  public java.lang.String[] split(java.lang.CharSequence, int);
  public java.lang.String[] split(java.lang.CharSequence);
  public static java.lang.String quote(java.lang.String);
  java.util.Map<java.lang.String, java.lang.Integer> namedGroups();
  static java.util.regex.Pattern$BmpCharPredicate VertWS();
  static java.util.regex.Pattern$BmpCharPredicate HorizWS();
  static java.util.regex.Pattern$CharPredicate ALL();
  static java.util.regex.Pattern$CharPredicate DOT();
  static java.util.regex.Pattern$CharPredicate UNIXDOT();
  static java.util.regex.Pattern$CharPredicate SingleS(int);
  static java.util.regex.Pattern$BmpCharPredicate Single(int);
  static java.util.regex.Pattern$BmpCharPredicate SingleI(int, int);
  static java.util.regex.Pattern$CharPredicate SingleU(int);
  static java.util.regex.Pattern$CharPredicate Range(int, int);
  static java.util.regex.Pattern$CharPredicate CIRange(int, int);
  static java.util.regex.Pattern$CharPredicate CIRangeU(int, int);
  public java.util.function.Predicate<java.lang.String> asPredicate();
  public java.util.function.Predicate<java.lang.String> asMatchPredicate();
  public java.util.stream.Stream<java.lang.String> splitAsStream(java.lang.CharSequence);
  static {};
}
