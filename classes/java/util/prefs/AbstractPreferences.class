Compiled from "AbstractPreferences.java"
public abstract class java.util.prefs.AbstractPreferences extends java.util.prefs.Preferences {
  static final int CODE_POINT_U0000;
  final java.util.prefs.AbstractPreferences parent;
  protected boolean newNode;
  protected final java.lang.Object lock;
  protected java.util.prefs.AbstractPreferences(java.util.prefs.AbstractPreferences, java.lang.String);
  public void put(java.lang.String, java.lang.String);
  public java.lang.String get(java.lang.String, java.lang.String);
  public void remove(java.lang.String);
  public void clear() throws java.util.prefs.BackingStoreException;
  public void putInt(java.lang.String, int);
  public int getInt(java.lang.String, int);
  public void putLong(java.lang.String, long);
  public long getLong(java.lang.String, long);
  public void putBoolean(java.lang.String, boolean);
  public boolean getBoolean(java.lang.String, boolean);
  public void putFloat(java.lang.String, float);
  public float getFloat(java.lang.String, float);
  public void putDouble(java.lang.String, double);
  public double getDouble(java.lang.String, double);
  public void putByteArray(java.lang.String, byte[]);
  public byte[] getByteArray(java.lang.String, byte[]);
  public java.lang.String[] keys() throws java.util.prefs.BackingStoreException;
  public java.lang.String[] childrenNames() throws java.util.prefs.BackingStoreException;
  protected final java.util.prefs.AbstractPreferences[] cachedChildren();
  public java.util.prefs.Preferences parent();
  public java.util.prefs.Preferences node(java.lang.String);
  public boolean nodeExists(java.lang.String) throws java.util.prefs.BackingStoreException;
  public void removeNode() throws java.util.prefs.BackingStoreException;
  public java.lang.String name();
  public java.lang.String absolutePath();
  public boolean isUserNode();
  public void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener);
  public void addNodeChangeListener(java.util.prefs.NodeChangeListener);
  public void removeNodeChangeListener(java.util.prefs.NodeChangeListener);
  protected abstract void putSpi(java.lang.String, java.lang.String);
  protected abstract java.lang.String getSpi(java.lang.String);
  protected abstract void removeSpi(java.lang.String);
  protected abstract void removeNodeSpi() throws java.util.prefs.BackingStoreException;
  protected abstract java.lang.String[] keysSpi() throws java.util.prefs.BackingStoreException;
  protected abstract java.lang.String[] childrenNamesSpi() throws java.util.prefs.BackingStoreException;
  protected java.util.prefs.AbstractPreferences getChild(java.lang.String) throws java.util.prefs.BackingStoreException;
  protected abstract java.util.prefs.AbstractPreferences childSpi(java.lang.String);
  public java.lang.String toString();
  public void sync() throws java.util.prefs.BackingStoreException;
  protected abstract void syncSpi() throws java.util.prefs.BackingStoreException;
  public void flush() throws java.util.prefs.BackingStoreException;
  protected abstract void flushSpi() throws java.util.prefs.BackingStoreException;
  protected boolean isRemoved();
  java.util.prefs.PreferenceChangeListener[] prefListeners();
  java.util.prefs.NodeChangeListener[] nodeListeners();
  public void exportNode(java.io.OutputStream) throws java.io.IOException, java.util.prefs.BackingStoreException;
  public void exportSubtree(java.io.OutputStream) throws java.io.IOException, java.util.prefs.BackingStoreException;
  static {};
}
