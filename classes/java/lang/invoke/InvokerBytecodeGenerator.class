Compiled from "InvokerBytecodeGenerator.java"
class java.lang.invoke.InvokerBytecodeGenerator {
  static final java.lang.String INVOKER_SUPER_NAME;
  static final java.lang.String LF_HIDDEN_SIG;
  static final java.lang.String LF_COMPILED_SIG;
  static final java.lang.String FORCEINLINE_SIG;
  static final java.lang.String DONTINLINE_SIG;
  static final java.lang.String INJECTEDPROFILE_SIG;
  static final boolean $assertionsDisabled;
  java.lang.invoke.InvokerBytecodeGenerator(java.lang.String, java.lang.String, java.lang.invoke.LambdaForm, java.lang.invoke.MethodType);
  static void maybeDump(java.lang.String, byte[]);
  java.lang.String constantPlaceholder(java.lang.Object);
  java.lang.Object[] cpPatches(byte[]);
  static java.lang.invoke.MemberName generateCustomizedCode(java.lang.invoke.LambdaForm, java.lang.invoke.MethodType);
  static java.lang.String className(java.lang.String);
  static boolean checkClassName(java.lang.String);
  void setClassWriter(jdk.internal.org.objectweb.asm.ClassWriter);
  void addMethod();
  void emitArrayLoad(java.lang.invoke.LambdaForm$Name);
  void emitArrayStore(java.lang.invoke.LambdaForm$Name);
  void emitArrayLength(java.lang.invoke.LambdaForm$Name);
  void emitArrayOp(java.lang.invoke.LambdaForm$Name, int);
  void emitInvoke(java.lang.invoke.LambdaForm$Name);
  static boolean isStaticallyInvocable(java.lang.invoke.LambdaForm$NamedFunction...);
  static boolean isStaticallyInvocable(java.lang.invoke.LambdaForm$Name);
  static boolean isStaticallyInvocable(java.lang.invoke.MemberName);
  static boolean isStaticallyNameable(java.lang.Class<?>);
  void emitStaticInvoke(java.lang.invoke.LambdaForm$Name);
  void emitStaticInvoke(java.lang.invoke.MemberName, java.lang.invoke.LambdaForm$Name);
  void emitNewArray(java.lang.invoke.LambdaForm$Name) throws java.lang.InternalError;
  int refKindOpcode(byte);
  static java.lang.invoke.MemberName generateLambdaFormInterpreterEntryPoint(java.lang.invoke.MethodType);
  static java.lang.invoke.MemberName generateNamedFunctionInvoker(java.lang.invoke.MethodTypeForm);
  static {};
}
