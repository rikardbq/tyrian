Compiled from "MethodHandle.java"
public abstract class java.lang.invoke.MethodHandle {
  final java.lang.invoke.LambdaForm form;
  java.lang.invoke.MethodHandle asTypeCache;
  byte customizationCount;
  static final boolean $assertionsDisabled;
  public java.lang.invoke.MethodType type();
  java.lang.invoke.MethodHandle(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm);
  public final native java.lang.Object invokeExact(java.lang.Object...) throws java.lang.Throwable;
  public final native java.lang.Object invoke(java.lang.Object...) throws java.lang.Throwable;
  final native java.lang.Object invokeBasic(java.lang.Object...) throws java.lang.Throwable;
  static native java.lang.Object linkToVirtual(java.lang.Object...) throws java.lang.Throwable;
  static native java.lang.Object linkToStatic(java.lang.Object...) throws java.lang.Throwable;
  static native java.lang.Object linkToSpecial(java.lang.Object...) throws java.lang.Throwable;
  static native java.lang.Object linkToInterface(java.lang.Object...) throws java.lang.Throwable;
  public java.lang.Object invokeWithArguments(java.lang.Object...) throws java.lang.Throwable;
  public java.lang.Object invokeWithArguments(java.util.List<?>) throws java.lang.Throwable;
  public java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType);
  java.lang.invoke.MethodHandle asTypeUncached(java.lang.invoke.MethodType);
  public java.lang.invoke.MethodHandle asSpreader(java.lang.Class<?>, int);
  public java.lang.invoke.MethodHandle asSpreader(int, java.lang.Class<?>, int);
  public java.lang.invoke.MethodHandle withVarargs(boolean);
  public java.lang.invoke.MethodHandle asCollector(java.lang.Class<?>, int);
  public java.lang.invoke.MethodHandle asCollector(int, java.lang.Class<?>, int);
  boolean asCollectorChecks(java.lang.Class<?>, int, int);
  public java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class<?>);
  public boolean isVarargsCollector();
  public java.lang.invoke.MethodHandle asFixedArity();
  public java.lang.invoke.MethodHandle bindTo(java.lang.Object);
  public java.lang.String toString();
  java.lang.String standardString();
  java.lang.String debugString();
  java.lang.invoke.BoundMethodHandle bindArgumentL(int, java.lang.Object);
  java.lang.invoke.MethodHandle setVarargs(java.lang.invoke.MemberName) throws java.lang.IllegalAccessException;
  java.lang.invoke.MethodHandle viewAsType(java.lang.invoke.MethodType, boolean);
  boolean viewAsTypeChecks(java.lang.invoke.MethodType, boolean);
  java.lang.invoke.LambdaForm internalForm();
  java.lang.invoke.MemberName internalMemberName();
  java.lang.Class<?> internalCallerClass();
  java.lang.invoke.MethodHandleImpl$Intrinsic intrinsicName();
  java.lang.invoke.MethodHandle withInternalMemberName(java.lang.invoke.MemberName, boolean);
  boolean isInvokeSpecial();
  java.lang.Object internalValues();
  java.lang.Object internalProperties();
  abstract java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType, java.lang.invoke.LambdaForm);
  abstract java.lang.invoke.BoundMethodHandle rebind();
  void updateForm(java.lang.invoke.LambdaForm);
  void customize();
  static {};
}
