Compiled from "MemberName.java"
final class java.lang.invoke.MemberName implements java.lang.reflect.Member,java.lang.Cloneable {
  java.lang.Object resolution;
  static final int BRIDGE;
  static final int VARARGS;
  static final int SYNTHETIC;
  static final int ANNOTATION;
  static final int ENUM;
  static final java.lang.String CONSTRUCTOR_NAME;
  static final int RECOGNIZED_MODIFIERS;
  static final int IS_METHOD;
  static final int IS_CONSTRUCTOR;
  static final int IS_FIELD;
  static final int IS_TYPE;
  static final int CALLER_SENSITIVE;
  static final int ALL_ACCESS;
  static final int ALL_KINDS;
  static final int IS_INVOCABLE;
  static final int IS_FIELD_OR_METHOD;
  static final int SEARCH_ALL_SUPERS;
  static final boolean $assertionsDisabled;
  public java.lang.Class<?> getDeclaringClass();
  public java.lang.ClassLoader getClassLoader();
  public java.lang.String getName();
  public java.lang.invoke.MethodType getMethodOrFieldType();
  public java.lang.invoke.MethodType getMethodType();
  java.lang.String getMethodDescriptor();
  public java.lang.invoke.MethodType getInvocationType();
  public java.lang.Class<?>[] getParameterTypes();
  public java.lang.Class<?> getReturnType();
  public java.lang.Class<?> getFieldType();
  public java.lang.Object getType();
  public java.lang.String getSignature();
  public int getModifiers();
  public byte getReferenceKind();
  boolean referenceKindIsConsistentWith(int);
  public boolean isMethodHandleInvoke();
  public static boolean isMethodHandleInvokeName(java.lang.String);
  public boolean isVarHandleMethodInvoke();
  public static boolean isVarHandleMethodInvokeName(java.lang.String);
  public boolean isStatic();
  public boolean isPublic();
  public boolean isPrivate();
  public boolean isProtected();
  public boolean isFinal();
  public boolean canBeStaticallyBound();
  public boolean isVolatile();
  public boolean isAbstract();
  public boolean isNative();
  public boolean isBridge();
  public boolean isVarargs();
  public boolean isSynthetic();
  public boolean isInvocable();
  public boolean isFieldOrMethod();
  public boolean isMethod();
  public boolean isConstructor();
  public boolean isField();
  public boolean isType();
  public boolean isPackage();
  public boolean isCallerSensitive();
  public boolean isAccessibleFrom(java.lang.Class<?>);
  public boolean refersTo(java.lang.Class<?>, java.lang.String);
  public java.lang.invoke.MemberName(java.lang.reflect.Method);
  public java.lang.invoke.MemberName(java.lang.reflect.Method, boolean);
  public java.lang.invoke.MemberName asSpecial();
  public java.lang.invoke.MemberName asConstructor();
  public java.lang.invoke.MemberName asNormalOriginal();
  public java.lang.invoke.MemberName(java.lang.reflect.Constructor<?>);
  public java.lang.invoke.MemberName(java.lang.reflect.Field);
  public java.lang.invoke.MemberName(java.lang.reflect.Field, boolean);
  public boolean isGetter();
  public boolean isSetter();
  public java.lang.invoke.MemberName asSetter();
  public java.lang.invoke.MemberName(java.lang.Class<?>);
  static java.lang.invoke.MemberName makeMethodHandleInvoke(java.lang.String, java.lang.invoke.MethodType);
  static java.lang.invoke.MemberName makeMethodHandleInvoke(java.lang.String, java.lang.invoke.MethodType, int);
  static java.lang.invoke.MemberName makeVarHandleMethodInvoke(java.lang.String, java.lang.invoke.MethodType);
  static java.lang.invoke.MemberName makeVarHandleMethodInvoke(java.lang.String, java.lang.invoke.MethodType, int);
  java.lang.invoke.MemberName();
  protected java.lang.invoke.MemberName clone();
  public java.lang.invoke.MemberName getDefinition();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public boolean equals(java.lang.invoke.MemberName);
  public java.lang.invoke.MemberName(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, byte);
  public java.lang.invoke.MemberName(java.lang.Class<?>, java.lang.String, java.lang.invoke.MethodType, byte);
  public java.lang.invoke.MemberName(byte, java.lang.Class<?>, java.lang.String, java.lang.Object);
  public boolean hasReceiverTypeDispatch();
  public boolean isResolved();
  void initResolved(boolean);
  void checkForTypeAlias(java.lang.Class<?>);
  public java.lang.String toString();
  public java.lang.IllegalAccessException makeAccessException(java.lang.String, java.lang.Object);
  public java.lang.ReflectiveOperationException makeAccessException();
  static java.lang.invoke.MemberName$Factory getFactory();
  protected java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  static {};
}
