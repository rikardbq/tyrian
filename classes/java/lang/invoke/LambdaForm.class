Compiled from "LambdaForm.java"
class java.lang.invoke.LambdaForm {
  final int arity;
  final int result;
  final boolean forceInline;
  final java.lang.invoke.MethodHandle customized;
  final java.lang.invoke.LambdaForm$Name[] names;
  final java.lang.invoke.LambdaForm$Kind kind;
  java.lang.invoke.MemberName vmentry;
  volatile java.lang.Object transformCache;
  public static final int VOID_RESULT;
  public static final int LAST_RESULT;
  static final int INTERNED_ARGUMENT_LIMIT;
  static final boolean $assertionsDisabled;
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], int);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], int, java.lang.invoke.LambdaForm$Kind);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], int, boolean, java.lang.invoke.MethodHandle);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], int, boolean, java.lang.invoke.MethodHandle, java.lang.invoke.LambdaForm$Kind);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[]);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], java.lang.invoke.LambdaForm$Kind);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], boolean);
  java.lang.invoke.LambdaForm(int, java.lang.invoke.LambdaForm$Name[], boolean, java.lang.invoke.LambdaForm$Kind);
  java.lang.invoke.LambdaForm(java.lang.invoke.LambdaForm$Name[], java.lang.invoke.LambdaForm$Name[], java.lang.invoke.LambdaForm$Name);
  java.lang.invoke.LambdaForm(java.lang.invoke.LambdaForm$Name[], java.lang.invoke.LambdaForm$Name[], java.lang.invoke.LambdaForm$Name, boolean);
  static boolean debugNames();
  static void associateWithDebugName(java.lang.invoke.LambdaForm, java.lang.String);
  java.lang.String lambdaName();
  java.lang.invoke.LambdaForm customize(java.lang.invoke.MethodHandle);
  java.lang.invoke.LambdaForm uncustomize();
  boolean nameRefsAreLegal();
  java.lang.invoke.LambdaForm$BasicType returnType();
  java.lang.invoke.LambdaForm$BasicType parameterType(int);
  java.lang.invoke.LambdaForm$Name parameter(int);
  java.lang.Object parameterConstraint(int);
  int arity();
  int expressionCount();
  java.lang.invoke.MethodType methodType();
  final java.lang.String basicTypeSignature();
  static int signatureArity(java.lang.String);
  static java.lang.invoke.LambdaForm$BasicType signatureReturn(java.lang.String);
  static boolean isValidSignature(java.lang.String);
  static java.lang.invoke.MethodType signatureType(java.lang.String);
  static java.lang.invoke.MethodType basicMethodType(java.lang.invoke.MethodType);
  boolean isSelectAlternative(int);
  boolean isGuardWithCatch(int);
  boolean isTryFinally(int);
  boolean isLoop(int);
  public void prepare();
  void compileToBytecode();
  java.lang.Object interpretWithArguments(java.lang.Object...) throws java.lang.Throwable;
  java.lang.Object interpretName(java.lang.invoke.LambdaForm$Name, java.lang.Object[]) throws java.lang.Throwable;
  java.lang.Object interpretWithArgumentsTracing(java.lang.Object...) throws java.lang.Throwable;
  static void traceInterpreter(java.lang.String, java.lang.Object, java.lang.Object...);
  static void traceInterpreter(java.lang.String, java.lang.Object);
  public java.lang.String toString();
  public boolean equals(java.lang.Object);
  public boolean equals(java.lang.invoke.LambdaForm);
  public int hashCode();
  java.lang.invoke.LambdaFormEditor editor();
  boolean contains(java.lang.invoke.LambdaForm$Name);
  public static java.lang.String basicTypeSignature(java.lang.invoke.MethodType);
  public static java.lang.String shortenSignature(java.lang.String);
  int lastUseIndex(java.lang.invoke.LambdaForm$Name);
  int useCount(java.lang.invoke.LambdaForm$Name);
  static java.lang.invoke.LambdaForm$Name argument(int, java.lang.invoke.LambdaForm$BasicType);
  static java.lang.invoke.LambdaForm$Name internArgument(java.lang.invoke.LambdaForm$Name);
  static java.lang.invoke.LambdaForm$Name[] arguments(int, java.lang.invoke.MethodType);
  static java.lang.invoke.LambdaForm identityForm(java.lang.invoke.LambdaForm$BasicType);
  static java.lang.invoke.LambdaForm zeroForm(java.lang.invoke.LambdaForm$BasicType);
  static java.lang.invoke.LambdaForm$NamedFunction identity(java.lang.invoke.LambdaForm$BasicType);
  static java.lang.invoke.LambdaForm$NamedFunction constantZero(java.lang.invoke.LambdaForm$BasicType);
  static {};
}
