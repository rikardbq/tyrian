Compiled from "StringUTF16.java"
final class java.lang.StringUTF16 {
  static final int HI_BYTE_SHIFT;
  static final int LO_BYTE_SHIFT;
  static final int MAX_LENGTH;
  static final boolean $assertionsDisabled;
  java.lang.StringUTF16();
  public static byte[] newBytesFor(int);
  static void putChar(byte[], int, int);
  static char getChar(byte[], int);
  public static int length(byte[]);
  public static int codePointAt(byte[], int, int);
  public static int codePointBefore(byte[], int);
  public static int codePointCount(byte[], int, int);
  public static char[] toChars(byte[]);
  public static byte[] toBytes(char[], int, int);
  public static byte[] compress(char[], int, int);
  public static byte[] compress(byte[], int, int);
  public static int compress(char[], int, byte[], int, int);
  public static int compress(byte[], int, byte[], int, int);
  public static byte[] toBytes(int[], int, int);
  public static byte[] toBytes(char);
  static byte[] toBytesSupplementary(int);
  public static void getChars(byte[], int, int, char[], int);
  public static void getBytes(byte[], int, int, byte[], int);
  public static boolean equals(byte[], byte[]);
  public static int compareTo(byte[], byte[]);
  public static int compareTo(byte[], byte[], int, int);
  public static int compareToLatin1(byte[], byte[]);
  public static int compareToLatin1(byte[], byte[], int, int);
  public static int compareToCI(byte[], byte[]);
  public static int compareToCI_Latin1(byte[], byte[]);
  public static int hashCode(byte[]);
  public static int indexOf(byte[], int, int);
  public static int indexOf(byte[], byte[]);
  public static int indexOf(byte[], int, byte[], int, int);
  public static int indexOfLatin1(byte[], byte[]);
  public static int indexOfLatin1(byte[], int, byte[], int, int);
  public static int indexOfLatin1Unsafe(byte[], int, byte[], int, int);
  public static int lastIndexOf(byte[], int, byte[], int, int);
  public static int lastIndexOf(byte[], int, int);
  public static java.lang.String replace(byte[], char, char);
  public static boolean regionMatchesCI(byte[], int, byte[], int, int);
  public static boolean regionMatchesCI_Latin1(byte[], int, byte[], int, int);
  public static java.lang.String toLowerCase(java.lang.String, byte[], java.util.Locale);
  public static java.lang.String toUpperCase(java.lang.String, byte[], java.util.Locale);
  public static java.lang.String trim(byte[]);
  public static int indexOfNonWhitespace(byte[]);
  public static int lastIndexOfNonWhitespace(byte[]);
  public static java.lang.String strip(byte[]);
  public static java.lang.String stripLeading(byte[]);
  public static java.lang.String stripTrailing(byte[]);
  static java.util.stream.Stream<java.lang.String> lines(byte[]);
  public static java.lang.String newString(byte[], int, int);
  public static void fillNull(byte[], int, int);
  public static void putCharSB(byte[], int, int);
  public static void putCharsSB(byte[], int, char[], int, int);
  public static void putCharsSB(byte[], int, java.lang.CharSequence, int, int);
  public static int codePointAtSB(byte[], int, int);
  public static int codePointBeforeSB(byte[], int);
  public static int codePointCountSB(byte[], int, int);
  public static int getChars(int, int, int, byte[]);
  public static int getChars(long, int, int, byte[]);
  public static boolean contentEquals(byte[], byte[], int);
  public static boolean contentEquals(byte[], java.lang.CharSequence, int);
  public static int putCharsAt(byte[], int, char, char, char, char);
  public static int putCharsAt(byte[], int, char, char, char, char, char);
  public static char charAt(byte[], int);
  public static void reverse(byte[], int);
  public static void inflate(byte[], int, byte[], int, int);
  public static int lastIndexOfLatin1(byte[], int, byte[], int, int);
  static int getChars(int, int, byte[]);
  static int getChars(long, int, byte[]);
  public static void checkIndex(int, byte[]);
  public static void checkOffset(int, byte[]);
  public static void checkBoundsBeginEnd(int, int, byte[]);
  public static void checkBoundsOffCount(int, int, byte[]);
  static {};
}
