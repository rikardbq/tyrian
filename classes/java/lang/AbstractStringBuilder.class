Compiled from "AbstractStringBuilder.java"
abstract class java.lang.AbstractStringBuilder implements java.lang.Appendable,java.lang.CharSequence {
  byte[] value;
  byte coder;
  int count;
  java.lang.AbstractStringBuilder();
  java.lang.AbstractStringBuilder(int);
  int compareTo(java.lang.AbstractStringBuilder);
  public int length();
  public int capacity();
  public void ensureCapacity(int);
  public void trimToSize();
  public void setLength(int);
  public char charAt(int);
  public int codePointAt(int);
  public int codePointBefore(int);
  public int codePointCount(int, int);
  public int offsetByCodePoints(int, int);
  public void getChars(int, int, char[], int);
  public void setCharAt(int, char);
  public java.lang.AbstractStringBuilder append(java.lang.Object);
  public java.lang.AbstractStringBuilder append(java.lang.String);
  public java.lang.AbstractStringBuilder append(java.lang.StringBuffer);
  java.lang.AbstractStringBuilder append(java.lang.AbstractStringBuilder);
  public java.lang.AbstractStringBuilder append(java.lang.CharSequence);
  public java.lang.AbstractStringBuilder append(java.lang.CharSequence, int, int);
  public java.lang.AbstractStringBuilder append(char[]);
  public java.lang.AbstractStringBuilder append(char[], int, int);
  public java.lang.AbstractStringBuilder append(boolean);
  public java.lang.AbstractStringBuilder append(char);
  public java.lang.AbstractStringBuilder append(int);
  public java.lang.AbstractStringBuilder append(long);
  public java.lang.AbstractStringBuilder append(float);
  public java.lang.AbstractStringBuilder append(double);
  public java.lang.AbstractStringBuilder delete(int, int);
  public java.lang.AbstractStringBuilder appendCodePoint(int);
  public java.lang.AbstractStringBuilder deleteCharAt(int);
  public java.lang.AbstractStringBuilder replace(int, int, java.lang.String);
  public java.lang.String substring(int);
  public java.lang.CharSequence subSequence(int, int);
  public java.lang.String substring(int, int);
  public java.lang.AbstractStringBuilder insert(int, char[], int, int);
  public java.lang.AbstractStringBuilder insert(int, java.lang.Object);
  public java.lang.AbstractStringBuilder insert(int, java.lang.String);
  public java.lang.AbstractStringBuilder insert(int, char[]);
  public java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence);
  public java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence, int, int);
  public java.lang.AbstractStringBuilder insert(int, boolean);
  public java.lang.AbstractStringBuilder insert(int, char);
  public java.lang.AbstractStringBuilder insert(int, int);
  public java.lang.AbstractStringBuilder insert(int, long);
  public java.lang.AbstractStringBuilder insert(int, float);
  public java.lang.AbstractStringBuilder insert(int, double);
  public int indexOf(java.lang.String);
  public int indexOf(java.lang.String, int);
  public int lastIndexOf(java.lang.String);
  public int lastIndexOf(java.lang.String, int);
  public java.lang.AbstractStringBuilder reverse();
  public abstract java.lang.String toString();
  public java.util.stream.IntStream chars();
  public java.util.stream.IntStream codePoints();
  final byte[] getValue();
  void getBytes(byte[], int, byte);
  void initBytes(char[], int, int);
  final byte getCoder();
  final boolean isLatin1();
  public java.lang.Appendable append(char) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
  static {};
}
