Compiled from "ZonedDateTime.java"
public final class java.time.ZonedDateTime implements java.time.temporal.Temporal, java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>, java.io.Serializable {
  public static java.time.ZonedDateTime now();
  public static java.time.ZonedDateTime now(java.time.ZoneId);
  public static java.time.ZonedDateTime now(java.time.Clock);
  public static java.time.ZonedDateTime of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneId);
  public static java.time.ZonedDateTime of(java.time.LocalDateTime, java.time.ZoneId);
  public static java.time.ZonedDateTime of(int, int, int, int, int, int, int, java.time.ZoneId);
  public static java.time.ZonedDateTime ofLocal(java.time.LocalDateTime, java.time.ZoneId, java.time.ZoneOffset);
  public static java.time.ZonedDateTime ofInstant(java.time.Instant, java.time.ZoneId);
  public static java.time.ZonedDateTime ofInstant(java.time.LocalDateTime, java.time.ZoneOffset, java.time.ZoneId);
  public static java.time.ZonedDateTime ofStrict(java.time.LocalDateTime, java.time.ZoneOffset, java.time.ZoneId);
  public static java.time.ZonedDateTime from(java.time.temporal.TemporalAccessor);
  public static java.time.ZonedDateTime parse(java.lang.CharSequence);
  public static java.time.ZonedDateTime parse(java.lang.CharSequence, java.time.format.DateTimeFormatter);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.ZoneOffset getOffset();
  public java.time.ZonedDateTime withEarlierOffsetAtOverlap();
  public java.time.ZonedDateTime withLaterOffsetAtOverlap();
  public java.time.ZoneId getZone();
  public java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId);
  public java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId);
  public java.time.ZonedDateTime withFixedOffsetZone();
  public java.time.LocalDateTime toLocalDateTime();
  public java.time.LocalDate toLocalDate();
  public int getYear();
  public int getMonthValue();
  public java.time.Month getMonth();
  public int getDayOfMonth();
  public int getDayOfYear();
  public java.time.DayOfWeek getDayOfWeek();
  public java.time.LocalTime toLocalTime();
  public int getHour();
  public int getMinute();
  public int getSecond();
  public int getNano();
  public java.time.ZonedDateTime with(java.time.temporal.TemporalAdjuster);
  public java.time.ZonedDateTime with(java.time.temporal.TemporalField, long);
  public java.time.ZonedDateTime withYear(int);
  public java.time.ZonedDateTime withMonth(int);
  public java.time.ZonedDateTime withDayOfMonth(int);
  public java.time.ZonedDateTime withDayOfYear(int);
  public java.time.ZonedDateTime withHour(int);
  public java.time.ZonedDateTime withMinute(int);
  public java.time.ZonedDateTime withSecond(int);
  public java.time.ZonedDateTime withNano(int);
  public java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit);
  public java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount);
  public java.time.ZonedDateTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.ZonedDateTime plusYears(long);
  public java.time.ZonedDateTime plusMonths(long);
  public java.time.ZonedDateTime plusWeeks(long);
  public java.time.ZonedDateTime plusDays(long);
  public java.time.ZonedDateTime plusHours(long);
  public java.time.ZonedDateTime plusMinutes(long);
  public java.time.ZonedDateTime plusSeconds(long);
  public java.time.ZonedDateTime plusNanos(long);
  public java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount);
  public java.time.ZonedDateTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.ZonedDateTime minusYears(long);
  public java.time.ZonedDateTime minusMonths(long);
  public java.time.ZonedDateTime minusWeeks(long);
  public java.time.ZonedDateTime minusDays(long);
  public java.time.ZonedDateTime minusHours(long);
  public java.time.ZonedDateTime minusMinutes(long);
  public java.time.ZonedDateTime minusSeconds(long);
  public java.time.ZonedDateTime minusNanos(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  public java.lang.String format(java.time.format.DateTimeFormatter);
  public java.time.OffsetDateTime toOffsetDateTime();
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  void writeExternal(java.io.DataOutput) throws java.io.IOException;
  static java.time.ZonedDateTime readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.ChronoZonedDateTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoZonedDateTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoZonedDateTime with(java.time.temporal.TemporalField, long);
  public java.time.chrono.ChronoZonedDateTime with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId);
  public java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId);
  public java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap();
  public java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap();
  public java.time.chrono.ChronoLocalDateTime toLocalDateTime();
  public java.time.chrono.ChronoLocalDate toLocalDate();
}
