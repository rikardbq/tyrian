Compiled from "HijrahDate.java"
public final class java.time.chrono.HijrahDate extends java.time.chrono.ChronoLocalDateImpl<java.time.chrono.HijrahDate> implements java.time.chrono.ChronoLocalDate, java.io.Serializable {
  static java.time.chrono.HijrahDate of(java.time.chrono.HijrahChronology, int, int, int);
  static java.time.chrono.HijrahDate ofEpochDay(java.time.chrono.HijrahChronology, long);
  public static java.time.chrono.HijrahDate now();
  public static java.time.chrono.HijrahDate now(java.time.ZoneId);
  public static java.time.chrono.HijrahDate now(java.time.Clock);
  public static java.time.chrono.HijrahDate of(int, int, int);
  public static java.time.chrono.HijrahDate from(java.time.temporal.TemporalAccessor);
  public java.time.chrono.HijrahChronology getChronology();
  public java.time.chrono.HijrahEra getEra();
  public int lengthOfMonth();
  public int lengthOfYear();
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.chrono.HijrahDate with(java.time.temporal.TemporalField, long);
  public java.time.chrono.HijrahDate with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.HijrahDate withVariant(java.time.chrono.HijrahChronology);
  public java.time.chrono.HijrahDate plus(java.time.temporal.TemporalAmount);
  public java.time.chrono.HijrahDate minus(java.time.temporal.TemporalAmount);
  public long toEpochDay();
  public boolean isLeapYear();
  java.time.chrono.HijrahDate plusYears(long);
  java.time.chrono.HijrahDate plusMonths(long);
  java.time.chrono.HijrahDate plusWeeks(long);
  java.time.chrono.HijrahDate plusDays(long);
  public java.time.chrono.HijrahDate plus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.HijrahDate minus(long, java.time.temporal.TemporalUnit);
  java.time.chrono.HijrahDate minusYears(long);
  java.time.chrono.HijrahDate minusMonths(long);
  java.time.chrono.HijrahDate minusWeeks(long);
  java.time.chrono.HijrahDate minusDays(long);
  public final java.time.chrono.ChronoLocalDateTime<java.time.chrono.HijrahDate> atTime(java.time.LocalTime);
  public java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate);
  public boolean equals(java.lang.Object);
  public int hashCode();
  void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  static java.time.chrono.HijrahDate readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.lang.String toString();
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  java.time.chrono.ChronoLocalDate minusDays(long);
  java.time.chrono.ChronoLocalDate minusWeeks(long);
  java.time.chrono.ChronoLocalDate minusMonths(long);
  java.time.chrono.ChronoLocalDate minusYears(long);
  java.time.chrono.ChronoLocalDate plusDays(long);
  java.time.chrono.ChronoLocalDate plusWeeks(long);
  java.time.chrono.ChronoLocalDate plusMonths(long);
  java.time.chrono.ChronoLocalDate plusYears(long);
  public java.time.chrono.ChronoLocalDate minus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDate plus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalField, long);
  public java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.Era getEra();
  public java.time.chrono.Chronology getChronology();
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
}
