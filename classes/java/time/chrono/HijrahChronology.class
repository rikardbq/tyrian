Compiled from "HijrahChronology.java"
public final class java.time.chrono.HijrahChronology extends java.time.chrono.AbstractChronology implements java.io.Serializable {
  public static final java.time.chrono.HijrahChronology INSTANCE;
  public java.lang.String getId();
  public java.lang.String getCalendarType();
  public java.time.chrono.HijrahDate date(java.time.chrono.Era, int, int, int);
  public java.time.chrono.HijrahDate date(int, int, int);
  public java.time.chrono.HijrahDate dateYearDay(java.time.chrono.Era, int, int);
  public java.time.chrono.HijrahDate dateYearDay(int, int);
  public java.time.chrono.HijrahDate dateEpochDay(long);
  public java.time.chrono.HijrahDate dateNow();
  public java.time.chrono.HijrahDate dateNow(java.time.ZoneId);
  public java.time.chrono.HijrahDate dateNow(java.time.Clock);
  public java.time.chrono.HijrahDate date(java.time.temporal.TemporalAccessor);
  public java.time.chrono.ChronoLocalDateTime<java.time.chrono.HijrahDate> localDateTime(java.time.temporal.TemporalAccessor);
  public java.time.chrono.ChronoZonedDateTime<java.time.chrono.HijrahDate> zonedDateTime(java.time.temporal.TemporalAccessor);
  public java.time.chrono.ChronoZonedDateTime<java.time.chrono.HijrahDate> zonedDateTime(java.time.Instant, java.time.ZoneId);
  public boolean isLeapYear(long);
  public int prolepticYear(java.time.chrono.Era, int);
  public java.time.chrono.HijrahEra eraOf(int);
  public java.util.List<java.time.chrono.Era> eras();
  public java.time.temporal.ValueRange range(java.time.temporal.ChronoField);
  public java.time.chrono.HijrahDate resolveDate(java.util.Map<java.time.temporal.TemporalField, java.lang.Long>, java.time.format.ResolverStyle);
  int checkValidYear(long);
  void checkValidDayOfYear(int);
  void checkValidMonth(int);
  int[] getHijrahDateInfo(int);
  long getEpochDay(int, int, int);
  int getDayOfYear(int, int);
  int getMonthLength(int, int);
  int getYearLength(int);
  int getMinimumYear();
  int getMaximumYear();
  int getMaximumMonthLength();
  int getMinimumMonthLength();
  int getMaximumDayOfYear();
  int getSmallestMaximumDayOfYear();
  java.lang.Object writeReplace();
  public java.time.chrono.ChronoLocalDate resolveDate(java.util.Map, java.time.format.ResolverStyle);
  public java.time.chrono.Era eraOf(int);
  public java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor);
  public java.time.chrono.ChronoLocalDate dateNow(java.time.Clock);
  public java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId);
  public java.time.chrono.ChronoLocalDate dateNow();
  public java.time.chrono.ChronoLocalDate dateEpochDay(long);
  public java.time.chrono.ChronoLocalDate dateYearDay(int, int);
  public java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era, int, int);
  public java.time.chrono.ChronoLocalDate date(int, int, int);
  public java.time.chrono.ChronoLocalDate date(java.time.chrono.Era, int, int, int);
  static {};
}
