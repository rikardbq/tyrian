Compiled from "ChronoZonedDateTimeImpl.java"
final class java.time.chrono.ChronoZonedDateTimeImpl<D extends java.time.chrono.ChronoLocalDate> implements java.time.chrono.ChronoZonedDateTime<D>, java.io.Serializable {
  static <R extends java.time.chrono.ChronoLocalDate> java.time.chrono.ChronoZonedDateTime<R> ofBest(java.time.chrono.ChronoLocalDateTimeImpl<R>, java.time.ZoneId, java.time.ZoneOffset);
  static java.time.chrono.ChronoZonedDateTimeImpl<?> ofInstant(java.time.chrono.Chronology, java.time.Instant, java.time.ZoneId);
  static <R extends java.time.chrono.ChronoLocalDate> java.time.chrono.ChronoZonedDateTimeImpl<R> ensureValid(java.time.chrono.Chronology, java.time.temporal.Temporal);
  public java.time.ZoneOffset getOffset();
  public java.time.chrono.ChronoZonedDateTime<D> withEarlierOffsetAtOverlap();
  public java.time.chrono.ChronoZonedDateTime<D> withLaterOffsetAtOverlap();
  public java.time.chrono.ChronoLocalDateTime<D> toLocalDateTime();
  public java.time.ZoneId getZone();
  public java.time.chrono.ChronoZonedDateTime<D> withZoneSameLocal(java.time.ZoneId);
  public java.time.chrono.ChronoZonedDateTime<D> withZoneSameInstant(java.time.ZoneId);
  public boolean isSupported(java.time.temporal.TemporalField);
  public java.time.chrono.ChronoZonedDateTime<D> with(java.time.temporal.TemporalField, long);
  public java.time.chrono.ChronoZonedDateTime<D> plus(long, java.time.temporal.TemporalUnit);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  static java.time.chrono.ChronoZonedDateTime<?> readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
}
