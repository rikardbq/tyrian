Compiled from "OffsetTime.java"
public final class java.time.OffsetTime implements java.time.temporal.Temporal, java.time.temporal.TemporalAdjuster, java.lang.Comparable<java.time.OffsetTime>, java.io.Serializable {
  public static final java.time.OffsetTime MIN;
  public static final java.time.OffsetTime MAX;
  public static java.time.OffsetTime now();
  public static java.time.OffsetTime now(java.time.ZoneId);
  public static java.time.OffsetTime now(java.time.Clock);
  public static java.time.OffsetTime of(java.time.LocalTime, java.time.ZoneOffset);
  public static java.time.OffsetTime of(int, int, int, int, java.time.ZoneOffset);
  public static java.time.OffsetTime ofInstant(java.time.Instant, java.time.ZoneId);
  public static java.time.OffsetTime from(java.time.temporal.TemporalAccessor);
  public static java.time.OffsetTime parse(java.lang.CharSequence);
  public static java.time.OffsetTime parse(java.lang.CharSequence, java.time.format.DateTimeFormatter);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.ZoneOffset getOffset();
  public java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset);
  public java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset);
  public java.time.LocalTime toLocalTime();
  public int getHour();
  public int getMinute();
  public int getSecond();
  public int getNano();
  public java.time.OffsetTime with(java.time.temporal.TemporalAdjuster);
  public java.time.OffsetTime with(java.time.temporal.TemporalField, long);
  public java.time.OffsetTime withHour(int);
  public java.time.OffsetTime withMinute(int);
  public java.time.OffsetTime withSecond(int);
  public java.time.OffsetTime withNano(int);
  public java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit);
  public java.time.OffsetTime plus(java.time.temporal.TemporalAmount);
  public java.time.OffsetTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.OffsetTime plusHours(long);
  public java.time.OffsetTime plusMinutes(long);
  public java.time.OffsetTime plusSeconds(long);
  public java.time.OffsetTime plusNanos(long);
  public java.time.OffsetTime minus(java.time.temporal.TemporalAmount);
  public java.time.OffsetTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.OffsetTime minusHours(long);
  public java.time.OffsetTime minusMinutes(long);
  public java.time.OffsetTime minusSeconds(long);
  public java.time.OffsetTime minusNanos(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  public java.lang.String format(java.time.format.DateTimeFormatter);
  public java.time.OffsetDateTime atDate(java.time.LocalDate);
  public long toEpochSecond(java.time.LocalDate);
  public int compareTo(java.time.OffsetTime);
  public boolean isAfter(java.time.OffsetTime);
  public boolean isBefore(java.time.OffsetTime);
  public boolean isEqual(java.time.OffsetTime);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  static java.time.OffsetTime readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public int compareTo(java.lang.Object);
  static {};
}
