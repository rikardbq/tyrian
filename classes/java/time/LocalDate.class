Compiled from "LocalDate.java"
public final class java.time.LocalDate implements java.time.temporal.Temporal,java.time.temporal.TemporalAdjuster,java.time.chrono.ChronoLocalDate,java.io.Serializable {
  public static final java.time.LocalDate MIN;
  public static final java.time.LocalDate MAX;
  public static final java.time.LocalDate EPOCH;
  static final long DAYS_0000_TO_1970;
  public static java.time.LocalDate now();
  public static java.time.LocalDate now(java.time.ZoneId);
  public static java.time.LocalDate now(java.time.Clock);
  public static java.time.LocalDate of(int, java.time.Month, int);
  public static java.time.LocalDate of(int, int, int);
  public static java.time.LocalDate ofYearDay(int, int);
  public static java.time.LocalDate ofInstant(java.time.Instant, java.time.ZoneId);
  public static java.time.LocalDate ofEpochDay(long);
  public static java.time.LocalDate from(java.time.temporal.TemporalAccessor);
  public static java.time.LocalDate parse(java.lang.CharSequence);
  public static java.time.LocalDate parse(java.lang.CharSequence, java.time.format.DateTimeFormatter);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.chrono.IsoChronology getChronology();
  public java.time.chrono.IsoEra getEra();
  public int getYear();
  public int getMonthValue();
  public java.time.Month getMonth();
  public int getDayOfMonth();
  public int getDayOfYear();
  public java.time.DayOfWeek getDayOfWeek();
  public boolean isLeapYear();
  public int lengthOfMonth();
  public int lengthOfYear();
  public java.time.LocalDate with(java.time.temporal.TemporalAdjuster);
  public java.time.LocalDate with(java.time.temporal.TemporalField, long);
  public java.time.LocalDate withYear(int);
  public java.time.LocalDate withMonth(int);
  public java.time.LocalDate withDayOfMonth(int);
  public java.time.LocalDate withDayOfYear(int);
  public java.time.LocalDate plus(java.time.temporal.TemporalAmount);
  public java.time.LocalDate plus(long, java.time.temporal.TemporalUnit);
  public java.time.LocalDate plusYears(long);
  public java.time.LocalDate plusMonths(long);
  public java.time.LocalDate plusWeeks(long);
  public java.time.LocalDate plusDays(long);
  public java.time.LocalDate minus(java.time.temporal.TemporalAmount);
  public java.time.LocalDate minus(long, java.time.temporal.TemporalUnit);
  public java.time.LocalDate minusYears(long);
  public java.time.LocalDate minusMonths(long);
  public java.time.LocalDate minusWeeks(long);
  public java.time.LocalDate minusDays(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  long daysUntil(java.time.LocalDate);
  public java.time.Period until(java.time.chrono.ChronoLocalDate);
  public java.util.stream.Stream<java.time.LocalDate> datesUntil(java.time.LocalDate);
  public java.util.stream.Stream<java.time.LocalDate> datesUntil(java.time.LocalDate, java.time.Period);
  public java.lang.String format(java.time.format.DateTimeFormatter);
  public java.time.LocalDateTime atTime(java.time.LocalTime);
  public java.time.LocalDateTime atTime(int, int);
  public java.time.LocalDateTime atTime(int, int, int);
  public java.time.LocalDateTime atTime(int, int, int, int);
  public java.time.OffsetDateTime atTime(java.time.OffsetTime);
  public java.time.LocalDateTime atStartOfDay();
  public java.time.ZonedDateTime atStartOfDay(java.time.ZoneId);
  public long toEpochDay();
  public long toEpochSecond(java.time.LocalTime, java.time.ZoneOffset);
  public int compareTo(java.time.chrono.ChronoLocalDate);
  int compareTo0(java.time.LocalDate);
  public boolean isAfter(java.time.chrono.ChronoLocalDate);
  public boolean isBefore(java.time.chrono.ChronoLocalDate);
  public boolean isEqual(java.time.chrono.ChronoLocalDate);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  void writeExternal(java.io.DataOutput) throws java.io.IOException;
  static java.time.LocalDate readExternal(java.io.DataInput) throws java.io.IOException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime);
  public java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate);
  public java.time.chrono.ChronoLocalDate minus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDate plus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalField, long);
  public java.time.chrono.ChronoLocalDate with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.Era getEra();
  public java.time.chrono.Chronology getChronology();
  public int compareTo(java.lang.Object);
  static {};
}
