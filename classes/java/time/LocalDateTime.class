Compiled from "LocalDateTime.java"
public final class java.time.LocalDateTime implements java.time.temporal.Temporal, java.time.temporal.TemporalAdjuster, java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>, java.io.Serializable {
  public static final java.time.LocalDateTime MIN;
  public static final java.time.LocalDateTime MAX;
  public static java.time.LocalDateTime now();
  public static java.time.LocalDateTime now(java.time.ZoneId);
  public static java.time.LocalDateTime now(java.time.Clock);
  public static java.time.LocalDateTime of(int, java.time.Month, int, int, int);
  public static java.time.LocalDateTime of(int, java.time.Month, int, int, int, int);
  public static java.time.LocalDateTime of(int, java.time.Month, int, int, int, int, int);
  public static java.time.LocalDateTime of(int, int, int, int, int);
  public static java.time.LocalDateTime of(int, int, int, int, int, int);
  public static java.time.LocalDateTime of(int, int, int, int, int, int, int);
  public static java.time.LocalDateTime of(java.time.LocalDate, java.time.LocalTime);
  public static java.time.LocalDateTime ofInstant(java.time.Instant, java.time.ZoneId);
  public static java.time.LocalDateTime ofEpochSecond(long, int, java.time.ZoneOffset);
  public static java.time.LocalDateTime from(java.time.temporal.TemporalAccessor);
  public static java.time.LocalDateTime parse(java.lang.CharSequence);
  public static java.time.LocalDateTime parse(java.lang.CharSequence, java.time.format.DateTimeFormatter);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.LocalDate toLocalDate();
  public int getYear();
  public int getMonthValue();
  public java.time.Month getMonth();
  public int getDayOfMonth();
  public int getDayOfYear();
  public java.time.DayOfWeek getDayOfWeek();
  public java.time.LocalTime toLocalTime();
  public int getHour();
  public int getMinute();
  public int getSecond();
  public int getNano();
  public java.time.LocalDateTime with(java.time.temporal.TemporalAdjuster);
  public java.time.LocalDateTime with(java.time.temporal.TemporalField, long);
  public java.time.LocalDateTime withYear(int);
  public java.time.LocalDateTime withMonth(int);
  public java.time.LocalDateTime withDayOfMonth(int);
  public java.time.LocalDateTime withDayOfYear(int);
  public java.time.LocalDateTime withHour(int);
  public java.time.LocalDateTime withMinute(int);
  public java.time.LocalDateTime withSecond(int);
  public java.time.LocalDateTime withNano(int);
  public java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit);
  public java.time.LocalDateTime plus(java.time.temporal.TemporalAmount);
  public java.time.LocalDateTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.LocalDateTime plusYears(long);
  public java.time.LocalDateTime plusMonths(long);
  public java.time.LocalDateTime plusWeeks(long);
  public java.time.LocalDateTime plusDays(long);
  public java.time.LocalDateTime plusHours(long);
  public java.time.LocalDateTime plusMinutes(long);
  public java.time.LocalDateTime plusSeconds(long);
  public java.time.LocalDateTime plusNanos(long);
  public java.time.LocalDateTime minus(java.time.temporal.TemporalAmount);
  public java.time.LocalDateTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.LocalDateTime minusYears(long);
  public java.time.LocalDateTime minusMonths(long);
  public java.time.LocalDateTime minusWeeks(long);
  public java.time.LocalDateTime minusDays(long);
  public java.time.LocalDateTime minusHours(long);
  public java.time.LocalDateTime minusMinutes(long);
  public java.time.LocalDateTime minusSeconds(long);
  public java.time.LocalDateTime minusNanos(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  public java.lang.String format(java.time.format.DateTimeFormatter);
  public java.time.OffsetDateTime atOffset(java.time.ZoneOffset);
  public java.time.ZonedDateTime atZone(java.time.ZoneId);
  public int compareTo(java.time.chrono.ChronoLocalDateTime<?>);
  public boolean isAfter(java.time.chrono.ChronoLocalDateTime<?>);
  public boolean isBefore(java.time.chrono.ChronoLocalDateTime<?>);
  public boolean isEqual(java.time.chrono.ChronoLocalDateTime<?>);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  void writeExternal(java.io.DataOutput) throws java.io.IOException;
  static java.time.LocalDateTime readExternal(java.io.DataInput) throws java.io.IOException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId);
  public java.time.chrono.ChronoLocalDateTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDateTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount);
  public java.time.chrono.ChronoLocalDateTime with(java.time.temporal.TemporalField, long);
  public java.time.chrono.ChronoLocalDateTime with(java.time.temporal.TemporalAdjuster);
  public java.time.chrono.ChronoLocalDate toLocalDate();
  public int compareTo(java.lang.Object);
  static {};
}
