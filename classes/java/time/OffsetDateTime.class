Compiled from "OffsetDateTime.java"
public final class java.time.OffsetDateTime implements java.time.temporal.Temporal, java.time.temporal.TemporalAdjuster, java.lang.Comparable<java.time.OffsetDateTime>, java.io.Serializable {
  public static final java.time.OffsetDateTime MIN;
  public static final java.time.OffsetDateTime MAX;
  public static java.util.Comparator<java.time.OffsetDateTime> timeLineOrder();
  public static java.time.OffsetDateTime now();
  public static java.time.OffsetDateTime now(java.time.ZoneId);
  public static java.time.OffsetDateTime now(java.time.Clock);
  public static java.time.OffsetDateTime of(java.time.LocalDate, java.time.LocalTime, java.time.ZoneOffset);
  public static java.time.OffsetDateTime of(java.time.LocalDateTime, java.time.ZoneOffset);
  public static java.time.OffsetDateTime of(int, int, int, int, int, int, int, java.time.ZoneOffset);
  public static java.time.OffsetDateTime ofInstant(java.time.Instant, java.time.ZoneId);
  public static java.time.OffsetDateTime from(java.time.temporal.TemporalAccessor);
  public static java.time.OffsetDateTime parse(java.lang.CharSequence);
  public static java.time.OffsetDateTime parse(java.lang.CharSequence, java.time.format.DateTimeFormatter);
  public boolean isSupported(java.time.temporal.TemporalField);
  public boolean isSupported(java.time.temporal.TemporalUnit);
  public java.time.temporal.ValueRange range(java.time.temporal.TemporalField);
  public int get(java.time.temporal.TemporalField);
  public long getLong(java.time.temporal.TemporalField);
  public java.time.ZoneOffset getOffset();
  public java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset);
  public java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset);
  public java.time.LocalDateTime toLocalDateTime();
  public java.time.LocalDate toLocalDate();
  public int getYear();
  public int getMonthValue();
  public java.time.Month getMonth();
  public int getDayOfMonth();
  public int getDayOfYear();
  public java.time.DayOfWeek getDayOfWeek();
  public java.time.LocalTime toLocalTime();
  public int getHour();
  public int getMinute();
  public int getSecond();
  public int getNano();
  public java.time.OffsetDateTime with(java.time.temporal.TemporalAdjuster);
  public java.time.OffsetDateTime with(java.time.temporal.TemporalField, long);
  public java.time.OffsetDateTime withYear(int);
  public java.time.OffsetDateTime withMonth(int);
  public java.time.OffsetDateTime withDayOfMonth(int);
  public java.time.OffsetDateTime withDayOfYear(int);
  public java.time.OffsetDateTime withHour(int);
  public java.time.OffsetDateTime withMinute(int);
  public java.time.OffsetDateTime withSecond(int);
  public java.time.OffsetDateTime withNano(int);
  public java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit);
  public java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount);
  public java.time.OffsetDateTime plus(long, java.time.temporal.TemporalUnit);
  public java.time.OffsetDateTime plusYears(long);
  public java.time.OffsetDateTime plusMonths(long);
  public java.time.OffsetDateTime plusWeeks(long);
  public java.time.OffsetDateTime plusDays(long);
  public java.time.OffsetDateTime plusHours(long);
  public java.time.OffsetDateTime plusMinutes(long);
  public java.time.OffsetDateTime plusSeconds(long);
  public java.time.OffsetDateTime plusNanos(long);
  public java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount);
  public java.time.OffsetDateTime minus(long, java.time.temporal.TemporalUnit);
  public java.time.OffsetDateTime minusYears(long);
  public java.time.OffsetDateTime minusMonths(long);
  public java.time.OffsetDateTime minusWeeks(long);
  public java.time.OffsetDateTime minusDays(long);
  public java.time.OffsetDateTime minusHours(long);
  public java.time.OffsetDateTime minusMinutes(long);
  public java.time.OffsetDateTime minusSeconds(long);
  public java.time.OffsetDateTime minusNanos(long);
  public <R> R query(java.time.temporal.TemporalQuery<R>);
  public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal);
  public long until(java.time.temporal.Temporal, java.time.temporal.TemporalUnit);
  public java.lang.String format(java.time.format.DateTimeFormatter);
  public java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId);
  public java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId);
  public java.time.OffsetTime toOffsetTime();
  public java.time.ZonedDateTime toZonedDateTime();
  public java.time.Instant toInstant();
  public long toEpochSecond();
  public int compareTo(java.time.OffsetDateTime);
  public boolean isAfter(java.time.OffsetDateTime);
  public boolean isBefore(java.time.OffsetDateTime);
  public boolean isEqual(java.time.OffsetDateTime);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public java.lang.String toString();
  void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  static java.time.OffsetDateTime readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.time.temporal.Temporal minus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal plus(long, java.time.temporal.TemporalUnit);
  public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalField, long);
  public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster);
  public int compareTo(java.lang.Object);
  static {};
}
