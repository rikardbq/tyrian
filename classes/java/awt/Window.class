Compiled from "Window.java"
public class java.awt.Window extends java.awt.Container implements javax.accessibility.Accessible {
  java.lang.String warningString;
  transient java.util.List<java.awt.Image> icons;
  static boolean systemSyncLWRequests;
  boolean syncLWRequests;
  transient boolean beforeFirstShow;
  transient java.awt.Window$WindowDisposerRecord disposerRecord;
  static final int OPENED;
  int state;
  transient java.util.Vector<java.lang.ref.WeakReference<java.awt.Window>> ownedWindowList;
  transient boolean showWithParent;
  transient java.awt.Dialog modalBlocker;
  java.awt.Dialog$ModalExclusionType modalExclusionType;
  transient java.awt.event.WindowListener windowListener;
  transient java.awt.event.WindowStateListener windowStateListener;
  transient java.awt.event.WindowFocusListener windowFocusListener;
  transient java.awt.im.InputContext inputContext;
  transient boolean isInShow;
  transient boolean isTrayIconWindow;
  transient java.lang.Object anchor;
  java.awt.Window(java.awt.GraphicsConfiguration);
  java.awt.Window() throws java.awt.HeadlessException;
  public java.awt.Window(java.awt.Frame);
  public java.awt.Window(java.awt.Window);
  public java.awt.Window(java.awt.Window, java.awt.GraphicsConfiguration);
  java.lang.String constructComponentName();
  public java.util.List<java.awt.Image> getIconImages();
  public synchronized void setIconImages(java.util.List<? extends java.awt.Image>);
  public void setIconImage(java.awt.Image);
  public void addNotify();
  public void removeNotify();
  public void pack();
  public void setMinimumSize(java.awt.Dimension);
  public void setSize(java.awt.Dimension);
  public void setSize(int, int);
  public void setLocation(int, int);
  public void setLocation(java.awt.Point);
  public void reshape(int, int, int, int);
  void setClientSize(int, int);
  final void closeSplashScreen();
  public void setVisible(boolean);
  public void show();
  static void updateChildFocusableWindowState(java.awt.Window);
  synchronized void postWindowEvent(int);
  public void hide();
  final void clearMostRecentFocusOwnerOnHide();
  public void dispose();
  void disposeImpl();
  void doDispose();
  void adjustListeningChildrenOnParent(long, int);
  void adjustDescendantsOnParent(int);
  public void toFront();
  final void toFront_NoClientCode();
  public void toBack();
  final void toBack_NoClientCode();
  public java.awt.Toolkit getToolkit();
  public final java.lang.String getWarningString();
  public java.util.Locale getLocale();
  public java.awt.im.InputContext getInputContext();
  public void setCursor(java.awt.Cursor);
  public java.awt.Window getOwner();
  final java.awt.Window getOwner_NoClientCode();
  public java.awt.Window[] getOwnedWindows();
  final java.awt.Window[] getOwnedWindows_NoClientCode();
  boolean isModalBlocked();
  void setModalBlocked(java.awt.Dialog, boolean, boolean);
  java.awt.Dialog getModalBlocker();
  static sun.awt.util.IdentityArrayList<java.awt.Window> getAllWindows();
  static sun.awt.util.IdentityArrayList<java.awt.Window> getAllUnblockedWindows();
  public static java.awt.Window[] getWindows();
  public static java.awt.Window[] getOwnerlessWindows();
  java.awt.Window getDocumentRoot();
  public void setModalExclusionType(java.awt.Dialog$ModalExclusionType);
  public java.awt.Dialog$ModalExclusionType getModalExclusionType();
  boolean isModalExcluded(java.awt.Dialog$ModalExclusionType);
  void updateChildrenBlocking();
  public synchronized void addWindowListener(java.awt.event.WindowListener);
  public synchronized void addWindowStateListener(java.awt.event.WindowStateListener);
  public synchronized void addWindowFocusListener(java.awt.event.WindowFocusListener);
  public synchronized void removeWindowListener(java.awt.event.WindowListener);
  public synchronized void removeWindowStateListener(java.awt.event.WindowStateListener);
  public synchronized void removeWindowFocusListener(java.awt.event.WindowFocusListener);
  public synchronized java.awt.event.WindowListener[] getWindowListeners();
  public synchronized java.awt.event.WindowFocusListener[] getWindowFocusListeners();
  public synchronized java.awt.event.WindowStateListener[] getWindowStateListeners();
  public <T extends java.util.EventListener> T[] getListeners(java.lang.Class<T>);
  boolean eventEnabled(java.awt.AWTEvent);
  protected void processEvent(java.awt.AWTEvent);
  protected void processWindowEvent(java.awt.event.WindowEvent);
  protected void processWindowFocusEvent(java.awt.event.WindowEvent);
  protected void processWindowStateEvent(java.awt.event.WindowEvent);
  void preProcessKeyEvent(java.awt.event.KeyEvent);
  void postProcessKeyEvent(java.awt.event.KeyEvent);
  public final void setAlwaysOnTop(boolean) throws java.lang.SecurityException;
  public boolean isAlwaysOnTopSupported();
  public final boolean isAlwaysOnTop();
  public java.awt.Component getFocusOwner();
  public java.awt.Component getMostRecentFocusOwner();
  public boolean isActive();
  public boolean isFocused();
  public java.util.Set<java.awt.AWTKeyStroke> getFocusTraversalKeys(int);
  public final void setFocusCycleRoot(boolean);
  public final boolean isFocusCycleRoot();
  public final java.awt.Container getFocusCycleRootAncestor();
  public final boolean isFocusableWindow();
  public boolean getFocusableWindowState();
  public void setFocusableWindowState(boolean);
  public void setAutoRequestFocus(boolean);
  public boolean isAutoRequestFocus();
  public void addPropertyChangeListener(java.beans.PropertyChangeListener);
  public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public boolean isValidateRoot();
  void dispatchEventImpl(java.awt.AWTEvent);
  public boolean postEvent(java.awt.Event);
  public boolean isShowing();
  boolean isDisposing();
  public void applyResourceBundle(java.util.ResourceBundle);
  public void applyResourceBundle(java.lang.String);
  void addOwnedWindow(java.lang.ref.WeakReference<java.awt.Window>);
  void removeOwnedWindow(java.lang.ref.WeakReference<java.awt.Window>);
  void connectOwnedWindow(java.awt.Window);
  public void setType(java.awt.Window$Type);
  public java.awt.Window$Type getType();
  public javax.accessibility.AccessibleContext getAccessibleContext();
  void setGraphicsConfiguration(java.awt.GraphicsConfiguration);
  public void setLocationRelativeTo(java.awt.Component);
  void deliverMouseWheelToAncestor(java.awt.event.MouseWheelEvent);
  boolean dispatchMouseWheelToAncestor(java.awt.event.MouseWheelEvent);
  public void createBufferStrategy(int);
  public void createBufferStrategy(int, java.awt.BufferCapabilities) throws java.awt.AWTException;
  public java.awt.image.BufferStrategy getBufferStrategy();
  java.awt.Component getTemporaryLostComponent();
  java.awt.Component setTemporaryLostComponent(java.awt.Component);
  boolean canContainFocusOwner(java.awt.Component);
  public void setLocationByPlatform(boolean);
  public boolean isLocationByPlatform();
  public void setBounds(int, int, int, int);
  public void setBounds(java.awt.Rectangle);
  boolean isRecursivelyVisible();
  public float getOpacity();
  public void setOpacity(float);
  public java.awt.Shape getShape();
  public void setShape(java.awt.Shape);
  public java.awt.Color getBackground();
  public void setBackground(java.awt.Color);
  public boolean isOpaque();
  public void paint(java.awt.Graphics);
  final java.awt.Container getContainer();
  final void applyCompoundShape(sun.java2d.pipe.Region);
  final void applyCurrentShape();
  final void mixOnReshaping();
  final java.awt.Point getLocationOnWindow();
  void updateZOrder();
  static {};
}
