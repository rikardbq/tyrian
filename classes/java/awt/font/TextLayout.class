Compiled from "TextLayout.java"
public final class java.awt.font.TextLayout implements java.lang.Cloneable {
  public static final java.awt.font.TextLayout$CaretPolicy DEFAULT_CARET_POLICY;
  public java.awt.font.TextLayout(java.lang.String, java.awt.Font, java.awt.font.FontRenderContext);
  public java.awt.font.TextLayout(java.lang.String, java.util.Map<? extends java.text.AttributedCharacterIterator$Attribute, ?>, java.awt.font.FontRenderContext);
  public java.awt.font.TextLayout(java.text.AttributedCharacterIterator, java.awt.font.FontRenderContext);
  java.awt.font.TextLayout(java.awt.font.TextLine, byte, float[], float);
  protected java.lang.Object clone();
  public java.awt.font.TextLayout getJustifiedLayout(float);
  protected void handleJustify(float);
  public byte getBaseline();
  public float[] getBaselineOffsets();
  public float getAdvance();
  public float getVisibleAdvance();
  public float getAscent();
  public float getDescent();
  public float getLeading();
  public java.awt.geom.Rectangle2D getBounds();
  public java.awt.Rectangle getPixelBounds(java.awt.font.FontRenderContext, float, float);
  public boolean isLeftToRight();
  public boolean isVertical();
  public int getCharacterCount();
  public float[] getCaretInfo(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D);
  public float[] getCaretInfo(java.awt.font.TextHitInfo);
  public java.awt.font.TextHitInfo getNextRightHit(java.awt.font.TextHitInfo);
  public java.awt.font.TextHitInfo getNextRightHit(int, java.awt.font.TextLayout$CaretPolicy);
  public java.awt.font.TextHitInfo getNextRightHit(int);
  public java.awt.font.TextHitInfo getNextLeftHit(java.awt.font.TextHitInfo);
  public java.awt.font.TextHitInfo getNextLeftHit(int, java.awt.font.TextLayout$CaretPolicy);
  public java.awt.font.TextHitInfo getNextLeftHit(int);
  public java.awt.font.TextHitInfo getVisualOtherHit(java.awt.font.TextHitInfo);
  public java.awt.Shape getCaretShape(java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D);
  public java.awt.Shape getCaretShape(java.awt.font.TextHitInfo);
  public byte getCharacterLevel(int);
  public java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D, java.awt.font.TextLayout$CaretPolicy);
  public java.awt.Shape[] getCaretShapes(int, java.awt.geom.Rectangle2D);
  public java.awt.Shape[] getCaretShapes(int);
  public int[] getLogicalRangesForVisualSelection(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo);
  public java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo, java.awt.geom.Rectangle2D);
  public java.awt.Shape getVisualHighlightShape(java.awt.font.TextHitInfo, java.awt.font.TextHitInfo);
  public java.awt.Shape getLogicalHighlightShape(int, int, java.awt.geom.Rectangle2D);
  public java.awt.Shape getLogicalHighlightShape(int, int);
  public java.awt.Shape getBlackBoxBounds(int, int);
  public java.awt.font.TextHitInfo hitTestChar(float, float, java.awt.geom.Rectangle2D);
  public java.awt.font.TextHitInfo hitTestChar(float, float);
  public boolean equals(java.awt.font.TextLayout);
  public java.lang.String toString();
  public void draw(java.awt.Graphics2D, float, float);
  java.awt.font.TextLine getTextLineForTesting();
  static byte getBaselineFromGraphic(java.awt.font.GraphicAttribute);
  public java.awt.Shape getOutline(java.awt.geom.AffineTransform);
  public java.awt.font.LayoutPath getLayoutPath();
  public void hitToPoint(java.awt.font.TextHitInfo, java.awt.geom.Point2D);
  static {};
}
