Compiled from "DataFlavor.java"
public class java.awt.datatransfer.DataFlavor implements java.io.Externalizable,java.lang.Cloneable {
  public static final java.awt.datatransfer.DataFlavor stringFlavor;
  public static final java.awt.datatransfer.DataFlavor imageFlavor;
  public static final java.awt.datatransfer.DataFlavor plainTextFlavor;
  public static final java.lang.String javaSerializedObjectMimeType;
  public static final java.awt.datatransfer.DataFlavor javaFileListFlavor;
  public static final java.lang.String javaJVMLocalObjectMimeType;
  public static final java.lang.String javaRemoteObjectMimeType;
  public static java.awt.datatransfer.DataFlavor selectionHtmlFlavor;
  public static java.awt.datatransfer.DataFlavor fragmentHtmlFlavor;
  public static java.awt.datatransfer.DataFlavor allHtmlFlavor;
  transient int atom;
  java.awt.datatransfer.MimeType mimeType;
  protected static final java.lang.Class<?> tryToLoadClass(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException;
  public java.awt.datatransfer.DataFlavor();
  public java.awt.datatransfer.DataFlavor(java.lang.Class<?>, java.lang.String);
  public java.awt.datatransfer.DataFlavor(java.lang.String, java.lang.String);
  public java.awt.datatransfer.DataFlavor(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException;
  public java.awt.datatransfer.DataFlavor(java.lang.String) throws java.lang.ClassNotFoundException;
  public java.lang.String toString();
  public static final java.awt.datatransfer.DataFlavor getTextPlainUnicodeFlavor();
  public static final java.awt.datatransfer.DataFlavor selectBestTextFlavor(java.awt.datatransfer.DataFlavor[]);
  public java.io.Reader getReaderForText(java.awt.datatransfer.Transferable) throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException;
  public java.lang.String getMimeType();
  public java.lang.Class<?> getRepresentationClass();
  public java.lang.String getHumanPresentableName();
  public java.lang.String getPrimaryType();
  public java.lang.String getSubType();
  public java.lang.String getParameter(java.lang.String);
  public void setHumanPresentableName(java.lang.String);
  public boolean equals(java.lang.Object);
  public boolean equals(java.awt.datatransfer.DataFlavor);
  public boolean equals(java.lang.String);
  public int hashCode();
  public boolean match(java.awt.datatransfer.DataFlavor);
  public boolean isMimeTypeEqual(java.lang.String);
  public final boolean isMimeTypeEqual(java.awt.datatransfer.DataFlavor);
  public boolean isMimeTypeSerializedObject();
  public final java.lang.Class<?> getDefaultRepresentationClass();
  public final java.lang.String getDefaultRepresentationClassAsString();
  public boolean isRepresentationClassInputStream();
  public boolean isRepresentationClassReader();
  public boolean isRepresentationClassCharBuffer();
  public boolean isRepresentationClassByteBuffer();
  public boolean isRepresentationClassSerializable();
  public boolean isRepresentationClassRemote();
  public boolean isFlavorSerializedObjectType();
  public boolean isFlavorRemoteObjectType();
  public boolean isFlavorJavaFileListType();
  public boolean isFlavorTextType();
  public synchronized void writeExternal(java.io.ObjectOutput) throws java.io.IOException;
  public synchronized void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException;
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  protected java.lang.String normalizeMimeTypeParameter(java.lang.String, java.lang.String);
  protected java.lang.String normalizeMimeType(java.lang.String);
  static {};
}
