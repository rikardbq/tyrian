Compiled from "Toolkit.java"
public abstract class java.awt.Toolkit {
  protected final java.util.Map<java.lang.String, java.lang.Object> desktopProperties;
  protected final java.beans.PropertyChangeSupport desktopPropsSupport;
  static final boolean $assertionsDisabled;
  public java.awt.Toolkit();
  protected void loadSystemColors(int[]) throws java.awt.HeadlessException;
  public void setDynamicLayout(boolean) throws java.awt.HeadlessException;
  protected boolean isDynamicLayoutSet() throws java.awt.HeadlessException;
  public boolean isDynamicLayoutActive() throws java.awt.HeadlessException;
  public abstract java.awt.Dimension getScreenSize() throws java.awt.HeadlessException;
  public abstract int getScreenResolution() throws java.awt.HeadlessException;
  public java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration) throws java.awt.HeadlessException;
  public abstract java.awt.image.ColorModel getColorModel() throws java.awt.HeadlessException;
  public abstract java.lang.String[] getFontList();
  public abstract java.awt.FontMetrics getFontMetrics(java.awt.Font);
  public abstract void sync();
  public static synchronized java.awt.Toolkit getDefaultToolkit();
  public abstract java.awt.Image getImage(java.lang.String);
  public abstract java.awt.Image getImage(java.net.URL);
  public abstract java.awt.Image createImage(java.lang.String);
  public abstract java.awt.Image createImage(java.net.URL);
  public abstract boolean prepareImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  public abstract int checkImage(java.awt.Image, int, int, java.awt.image.ImageObserver);
  public abstract java.awt.Image createImage(java.awt.image.ImageProducer);
  public java.awt.Image createImage(byte[]);
  public abstract java.awt.Image createImage(byte[], int, int);
  public abstract java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.util.Properties);
  public java.awt.PrintJob getPrintJob(java.awt.Frame, java.lang.String, java.awt.JobAttributes, java.awt.PageAttributes);
  public abstract void beep();
  public abstract java.awt.datatransfer.Clipboard getSystemClipboard() throws java.awt.HeadlessException;
  public java.awt.datatransfer.Clipboard getSystemSelection() throws java.awt.HeadlessException;
  public int getMenuShortcutKeyMask() throws java.awt.HeadlessException;
  public int getMenuShortcutKeyMaskEx() throws java.awt.HeadlessException;
  public boolean getLockingKeyState(int) throws java.lang.UnsupportedOperationException;
  public void setLockingKeyState(int, boolean) throws java.lang.UnsupportedOperationException;
  protected static java.awt.Container getNativeContainer(java.awt.Component);
  public java.awt.Cursor createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String) throws java.lang.IndexOutOfBoundsException, java.awt.HeadlessException;
  public java.awt.Dimension getBestCursorSize(int, int) throws java.awt.HeadlessException;
  public int getMaximumCursorColors() throws java.awt.HeadlessException;
  public boolean isFrameStateSupported(int) throws java.awt.HeadlessException;
  static void loadLibraries();
  public static java.lang.String getProperty(java.lang.String, java.lang.String);
  public final java.awt.EventQueue getSystemEventQueue();
  protected abstract java.awt.EventQueue getSystemEventQueueImpl();
  static java.awt.EventQueue getEventQueue();
  public <T extends java.awt.dnd.DragGestureRecognizer> T createDragGestureRecognizer(java.lang.Class<T>, java.awt.dnd.DragSource, java.awt.Component, int, java.awt.dnd.DragGestureListener);
  public final synchronized java.lang.Object getDesktopProperty(java.lang.String);
  protected final void setDesktopProperty(java.lang.String, java.lang.Object);
  protected java.lang.Object lazilyLoadDesktopProperty(java.lang.String);
  protected void initializeDesktopProperties();
  public void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener);
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners();
  public java.beans.PropertyChangeListener[] getPropertyChangeListeners(java.lang.String);
  public boolean isAlwaysOnTopSupported();
  public abstract boolean isModalityTypeSupported(java.awt.Dialog$ModalityType);
  public abstract boolean isModalExclusionTypeSupported(java.awt.Dialog$ModalExclusionType);
  public void addAWTEventListener(java.awt.event.AWTEventListener, long);
  public void removeAWTEventListener(java.awt.event.AWTEventListener);
  static boolean enabledOnToolkit(long);
  synchronized int countAWTEventListeners(long);
  public java.awt.event.AWTEventListener[] getAWTEventListeners();
  public java.awt.event.AWTEventListener[] getAWTEventListeners(long);
  void notifyAWTEventListeners(java.awt.AWTEvent);
  public abstract java.util.Map<java.awt.font.TextAttribute, ?> mapInputMethodHighlight(java.awt.im.InputMethodHighlight) throws java.awt.HeadlessException;
  public boolean areExtraMouseButtonsEnabled() throws java.awt.HeadlessException;
  static {};
}
