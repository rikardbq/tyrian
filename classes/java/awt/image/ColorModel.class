Compiled from "ColorModel.java"
public abstract class java.awt.image.ColorModel implements java.awt.Transparency {
  protected int pixel_bits;
  int[] nBits;
  int transparency;
  boolean supportsAlpha;
  boolean isAlphaPremultiplied;
  int numComponents;
  int numColorComponents;
  java.awt.color.ColorSpace colorSpace;
  int colorSpaceType;
  int maxBits;
  boolean is_sRGB;
  protected int transferType;
  static byte[] l8Tos8;
  static byte[] s8Tol8;
  static byte[] l16Tos8;
  static short[] s8Tol16;
  static java.util.Map<java.awt.color.ICC_ColorSpace, byte[]> g8Tos8Map;
  static java.util.Map<java.awt.color.ICC_ColorSpace, byte[]> lg16Toog8Map;
  static java.util.Map<java.awt.color.ICC_ColorSpace, byte[]> g16Tos8Map;
  static java.util.Map<java.awt.color.ICC_ColorSpace, short[]> lg16Toog16Map;
  static void loadLibraries();
  public static java.awt.image.ColorModel getRGBdefault();
  public java.awt.image.ColorModel(int);
  protected java.awt.image.ColorModel(int, int[], java.awt.color.ColorSpace, boolean, boolean, int, int);
  public final boolean hasAlpha();
  public final boolean isAlphaPremultiplied();
  public final int getTransferType();
  public int getPixelSize();
  public int getComponentSize(int);
  public int[] getComponentSize();
  public int getTransparency();
  public int getNumComponents();
  public int getNumColorComponents();
  public abstract int getRed(int);
  public abstract int getGreen(int);
  public abstract int getBlue(int);
  public abstract int getAlpha(int);
  public int getRGB(int);
  public int getRed(java.lang.Object);
  public int getGreen(java.lang.Object);
  public int getBlue(java.lang.Object);
  public int getAlpha(java.lang.Object);
  public int getRGB(java.lang.Object);
  public java.lang.Object getDataElements(int, java.lang.Object);
  public int[] getComponents(int, int[], int);
  public int[] getComponents(java.lang.Object, int[], int);
  public int[] getUnnormalizedComponents(float[], int, int[], int);
  public float[] getNormalizedComponents(int[], int, float[], int);
  public int getDataElement(int[], int);
  public java.lang.Object getDataElements(int[], int, java.lang.Object);
  public int getDataElement(float[], int);
  public java.lang.Object getDataElements(float[], int, java.lang.Object);
  public float[] getNormalizedComponents(java.lang.Object, float[], int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public final java.awt.color.ColorSpace getColorSpace();
  public java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster, boolean);
  public boolean isCompatibleRaster(java.awt.image.Raster);
  public java.awt.image.WritableRaster createCompatibleWritableRaster(int, int);
  public java.awt.image.SampleModel createCompatibleSampleModel(int, int);
  public boolean isCompatibleSampleModel(java.awt.image.SampleModel);
  public void finalize();
  public java.awt.image.WritableRaster getAlphaRaster(java.awt.image.WritableRaster);
  public java.lang.String toString();
  static int getDefaultTransferType(int);
  static boolean isLinearRGBspace(java.awt.color.ColorSpace);
  static boolean isLinearGRAYspace(java.awt.color.ColorSpace);
  static byte[] getLinearRGB8TosRGB8LUT();
  static byte[] getsRGB8ToLinearRGB8LUT();
  static byte[] getLinearRGB16TosRGB8LUT();
  static short[] getsRGB8ToLinearRGB16LUT();
  static byte[] getGray8TosRGB8LUT(java.awt.color.ICC_ColorSpace);
  static byte[] getLinearGray16ToOtherGray8LUT(java.awt.color.ICC_ColorSpace);
  static byte[] getGray16TosRGB8LUT(java.awt.color.ICC_ColorSpace);
  static short[] getLinearGray16ToOtherGray16LUT(java.awt.color.ICC_ColorSpace);
  static {};
}
