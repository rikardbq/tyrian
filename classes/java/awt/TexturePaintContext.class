Compiled from "TexturePaintContext.java"
abstract class java.awt.TexturePaintContext implements java.awt.PaintContext {
  public static java.awt.image.ColorModel xrgbmodel;
  public static java.awt.image.ColorModel argbmodel;
  java.awt.image.ColorModel colorModel;
  int bWidth;
  int bHeight;
  int maxWidth;
  java.awt.image.WritableRaster outRas;
  double xOrg;
  double yOrg;
  double incXAcross;
  double incYAcross;
  double incXDown;
  double incYDown;
  int colincx;
  int colincy;
  int colincxerr;
  int colincyerr;
  int rowincx;
  int rowincy;
  int rowincxerr;
  int rowincyerr;
  public static java.awt.PaintContext getContext(java.awt.image.BufferedImage, java.awt.geom.AffineTransform, java.awt.RenderingHints, java.awt.Rectangle);
  public static boolean isFilterableICM(java.awt.image.ColorModel);
  public static boolean isFilterableDCM(java.awt.image.ColorModel);
  public static boolean isMaskOK(int, boolean);
  public static java.awt.image.ColorModel getInternedColorModel(java.awt.image.ColorModel);
  java.awt.TexturePaintContext(java.awt.image.ColorModel, java.awt.geom.AffineTransform, int, int, int);
  static int fractAsInt(double);
  static double mod(double, double);
  public void dispose();
  public java.awt.image.ColorModel getColorModel();
  public java.awt.image.Raster getRaster(int, int, int, int);
  static synchronized java.awt.image.WritableRaster makeRaster(java.awt.image.ColorModel, java.awt.image.Raster, int, int);
  static synchronized void dropRaster(java.awt.image.ColorModel, java.awt.image.Raster);
  static synchronized java.awt.image.WritableRaster makeByteRaster(java.awt.image.Raster, int, int);
  static synchronized void dropByteRaster(java.awt.image.Raster);
  public abstract java.awt.image.WritableRaster makeRaster(int, int);
  public abstract void setRaster(int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int);
  public static int blend(int[], int, int);
  static {};
}
