Compiled from "MutableBigInteger.java"
class java.math.MutableBigInteger {
  int[] value;
  int intLen;
  int offset;
  static final java.math.MutableBigInteger ONE;
  static final int KNUTH_POW2_THRESH_LEN;
  static final int KNUTH_POW2_THRESH_ZEROS;
  static final boolean $assertionsDisabled;
  java.math.MutableBigInteger();
  java.math.MutableBigInteger(int);
  java.math.MutableBigInteger(int[]);
  java.math.MutableBigInteger(java.math.BigInteger);
  java.math.MutableBigInteger(java.math.MutableBigInteger);
  java.math.BigInteger toBigInteger(int);
  java.math.BigInteger toBigInteger();
  java.math.BigDecimal toBigDecimal(int, int);
  long toCompactValue(int);
  void clear();
  void reset();
  final int compare(java.math.MutableBigInteger);
  final int compareHalf(java.math.MutableBigInteger);
  final void normalize();
  int[] toIntArray();
  void setInt(int, int);
  void setValue(int[], int);
  void copyValue(java.math.MutableBigInteger);
  void copyValue(int[]);
  boolean isOne();
  boolean isZero();
  boolean isEven();
  boolean isOdd();
  boolean isNormal();
  public java.lang.String toString();
  void safeRightShift(int);
  void rightShift(int);
  void safeLeftShift(int);
  void leftShift(int);
  void add(java.math.MutableBigInteger);
  void addShifted(java.math.MutableBigInteger, int);
  void addDisjoint(java.math.MutableBigInteger, int);
  void addLower(java.math.MutableBigInteger, int);
  int subtract(java.math.MutableBigInteger);
  void multiply(java.math.MutableBigInteger, java.math.MutableBigInteger);
  void mul(int, java.math.MutableBigInteger);
  int divideOneWord(int, java.math.MutableBigInteger);
  java.math.MutableBigInteger divide(java.math.MutableBigInteger, java.math.MutableBigInteger);
  java.math.MutableBigInteger divide(java.math.MutableBigInteger, java.math.MutableBigInteger, boolean);
  java.math.MutableBigInteger divideKnuth(java.math.MutableBigInteger, java.math.MutableBigInteger);
  java.math.MutableBigInteger divideKnuth(java.math.MutableBigInteger, java.math.MutableBigInteger, boolean);
  java.math.MutableBigInteger divideAndRemainderBurnikelZiegler(java.math.MutableBigInteger, java.math.MutableBigInteger);
  long bitLength();
  long divide(long, java.math.MutableBigInteger);
  static long divWord(long, int);
  java.math.MutableBigInteger sqrt();
  java.math.MutableBigInteger hybridGCD(java.math.MutableBigInteger);
  static int binaryGcd(int, int);
  java.math.MutableBigInteger mutableModInverse(java.math.MutableBigInteger);
  java.math.MutableBigInteger modInverseMP2(int);
  static int inverseMod32(int);
  static long inverseMod64(long);
  static java.math.MutableBigInteger modInverseBP2(java.math.MutableBigInteger, int);
  static java.math.MutableBigInteger fixup(java.math.MutableBigInteger, java.math.MutableBigInteger, int);
  java.math.MutableBigInteger euclidModInverse(int);
  static {};
}
