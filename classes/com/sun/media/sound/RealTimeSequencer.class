Compiled from "RealTimeSequencer.java"
final class com.sun.media.sound.RealTimeSequencer extends com.sun.media.sound.AbstractMidiDevice implements javax.sound.midi.Sequencer,com.sun.media.sound.AutoConnectSequencer {
  static final javax.sound.midi.MidiDevice$Info info;
  javax.sound.midi.Receiver autoConnectedReceiver;
  com.sun.media.sound.RealTimeSequencer();
  public synchronized void setSequence(javax.sound.midi.Sequence) throws javax.sound.midi.InvalidMidiDataException;
  public synchronized void setSequence(java.io.InputStream) throws java.io.IOException, javax.sound.midi.InvalidMidiDataException;
  public javax.sound.midi.Sequence getSequence();
  public synchronized void start();
  public synchronized void stop();
  public boolean isRunning();
  public void startRecording();
  public void stopRecording();
  public boolean isRecording();
  public void recordEnable(javax.sound.midi.Track, int);
  public void recordDisable(javax.sound.midi.Track);
  public float getTempoInBPM();
  public void setTempoInBPM(float);
  public float getTempoInMPQ();
  public void setTempoInMPQ(float);
  public void setTempoFactor(float);
  public float getTempoFactor();
  public long getTickLength();
  public synchronized long getTickPosition();
  public synchronized void setTickPosition(long);
  public long getMicrosecondLength();
  public long getMicrosecondPosition();
  public void setMicrosecondPosition(long);
  public void setMasterSyncMode(javax.sound.midi.Sequencer$SyncMode);
  public javax.sound.midi.Sequencer$SyncMode getMasterSyncMode();
  public javax.sound.midi.Sequencer$SyncMode[] getMasterSyncModes();
  public void setSlaveSyncMode(javax.sound.midi.Sequencer$SyncMode);
  public javax.sound.midi.Sequencer$SyncMode getSlaveSyncMode();
  public javax.sound.midi.Sequencer$SyncMode[] getSlaveSyncModes();
  int getTrackCount();
  public synchronized void setTrackMute(int, boolean);
  public synchronized boolean getTrackMute(int);
  public synchronized void setTrackSolo(int, boolean);
  public synchronized boolean getTrackSolo(int);
  public boolean addMetaEventListener(javax.sound.midi.MetaEventListener);
  public void removeMetaEventListener(javax.sound.midi.MetaEventListener);
  public int[] addControllerEventListener(javax.sound.midi.ControllerEventListener, int[]);
  public int[] removeControllerEventListener(javax.sound.midi.ControllerEventListener, int[]);
  public void setLoopStartPoint(long);
  public long getLoopStartPoint();
  public void setLoopEndPoint(long);
  public long getLoopEndPoint();
  public void setLoopCount(int);
  public int getLoopCount();
  protected void implOpen() throws javax.sound.midi.MidiUnavailableException;
  protected synchronized void implClose();
  void implStart();
  void implStop();
  void sendMetaEvents(javax.sound.midi.MidiMessage);
  void sendControllerEvents(javax.sound.midi.MidiMessage);
  protected boolean hasReceivers();
  protected javax.sound.midi.Receiver createReceiver() throws javax.sound.midi.MidiUnavailableException;
  protected boolean hasTransmitters();
  protected javax.sound.midi.Transmitter createTransmitter() throws javax.sound.midi.MidiUnavailableException;
  public void setAutoConnect(javax.sound.midi.Receiver);
  static {};
}
