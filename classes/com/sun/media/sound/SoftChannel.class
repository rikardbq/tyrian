Compiled from "SoftChannel.java"
public final class com.sun.media.sound.SoftChannel implements javax.sound.midi.MidiChannel,com.sun.media.sound.ModelDirectedPlayer {
  double portamento_time;
  int[] portamento_lastnote;
  int portamento_lastnote_ix;
  com.sun.media.sound.SoftTuning tuning;
  int tuning_bank;
  int tuning_program;
  com.sun.media.sound.SoftInstrument current_instrument;
  com.sun.media.sound.ModelChannelMixer current_mixer;
  com.sun.media.sound.ModelDirector current_director;
  int cds_control_number;
  com.sun.media.sound.ModelConnectionBlock[] cds_control_connections;
  com.sun.media.sound.ModelConnectionBlock[] cds_channelpressure_connections;
  com.sun.media.sound.ModelConnectionBlock[] cds_polypressure_connections;
  boolean sustain;
  boolean[][] keybasedcontroller_active;
  double[][] keybasedcontroller_value;
  java.util.Map<java.lang.Integer, int[]> co_midi_rpn_rpn_i;
  java.util.Map<java.lang.Integer, double[]> co_midi_rpn_rpn;
  java.util.Map<java.lang.Integer, int[]> co_midi_nrpn_nrpn_i;
  java.util.Map<java.lang.Integer, double[]> co_midi_nrpn_nrpn;
  public com.sun.media.sound.SoftChannel(com.sun.media.sound.SoftSynthesizer, int);
  void initVoice(com.sun.media.sound.SoftVoice, com.sun.media.sound.SoftPerformer, int, int, int, int, com.sun.media.sound.ModelConnectionBlock[], com.sun.media.sound.ModelChannelMixer, boolean);
  public void noteOn(int, int);
  void noteOn(int, int, int);
  public void noteOff(int, int);
  public void play(int, com.sun.media.sound.ModelConnectionBlock[]);
  public void noteOff(int);
  public void setPolyPressure(int, int);
  public int getPolyPressure(int);
  public void setChannelPressure(int);
  public int getChannelPressure();
  void applyInstrumentCustomization();
  public void mapPolyPressureToDestination(int[], int[]);
  public void mapChannelPressureToDestination(int[], int[]);
  public void mapControlToDestination(int, int[], int[]);
  public void controlChangePerNote(int, int, int);
  public int getControlPerNote(int, int);
  public void controlChange(int, int);
  public int getController(int);
  public void tuningChange(int);
  public void tuningChange(int, int);
  public void programChange(int);
  public void programChange(int, int);
  public int getProgram();
  public void setPitchBend(int);
  public int getPitchBend();
  public void nrpnChange(int, int);
  public void rpnChange(int, int);
  public void resetAllControllers();
  public void resetAllControllers(boolean);
  public void allNotesOff();
  public void allSoundOff();
  public boolean localControl(boolean);
  public void setMono(boolean);
  public boolean getMono();
  public void setOmni(boolean);
  public boolean getOmni();
  public void setMute(boolean);
  public boolean getMute();
  public void setSolo(boolean);
  public boolean getSolo();
  static {};
}
