Compiled from "SoftVoice.java"
public final class com.sun.media.sound.SoftVoice extends javax.sound.midi.VoiceStatus {
  public int exclusiveClass;
  public boolean releaseTriggered;
  com.sun.media.sound.ModelChannelMixer channelmixer;
  double tunedKey;
  com.sun.media.sound.SoftTuning tuning;
  com.sun.media.sound.SoftChannel stealer_channel;
  com.sun.media.sound.ModelConnectionBlock[] stealer_extendedConnectionBlocks;
  com.sun.media.sound.SoftPerformer stealer_performer;
  com.sun.media.sound.ModelChannelMixer stealer_channelmixer;
  int stealer_voiceID;
  int stealer_noteNumber;
  int stealer_velocity;
  boolean stealer_releaseTriggered;
  int voiceID;
  boolean sustain;
  boolean sostenuto;
  boolean portamento;
  final java.util.Map<java.lang.String, com.sun.media.sound.SoftControl> objects;
  com.sun.media.sound.SoftSynthesizer synthesizer;
  com.sun.media.sound.SoftInstrument instrument;
  com.sun.media.sound.SoftPerformer performer;
  com.sun.media.sound.SoftChannel softchannel;
  boolean on;
  com.sun.media.sound.ModelConnectionBlock[] extendedConnectionBlocks;
  double[] co_noteon_keynumber;
  double[] co_noteon_velocity;
  double[] co_noteon_on;
  com.sun.media.sound.SoftResamplerStreamer resampler;
  public com.sun.media.sound.SoftVoice(com.sun.media.sound.SoftSynthesizer);
  void updateTuning(com.sun.media.sound.SoftTuning);
  void setNote(int);
  void noteOn(int, int, int);
  void setPolyPressure(int);
  void setChannelPressure(int);
  void controlChange(int, int);
  void nrpnChange(int, int);
  void rpnChange(int, int);
  void setPitchBend(int);
  void setMute(boolean);
  void setSoloMute(boolean);
  void shutdown();
  void soundOff();
  void noteOff(int);
  void redamp();
  void processControlLogic();
  void mixAudioStream(com.sun.media.sound.SoftAudioBuffer, com.sun.media.sound.SoftAudioBuffer, com.sun.media.sound.SoftAudioBuffer, float, float);
  void processAudioLogic(com.sun.media.sound.SoftAudioBuffer[]);
}
