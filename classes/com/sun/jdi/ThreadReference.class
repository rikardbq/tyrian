Compiled from "ThreadReference.java"
public interface com.sun.jdi.ThreadReference extends com.sun.jdi.ObjectReference {
  public static final int THREAD_STATUS_UNKNOWN;
  public static final int THREAD_STATUS_ZOMBIE;
  public static final int THREAD_STATUS_RUNNING;
  public static final int THREAD_STATUS_SLEEPING;
  public static final int THREAD_STATUS_MONITOR;
  public static final int THREAD_STATUS_WAIT;
  public static final int THREAD_STATUS_NOT_STARTED;
  public abstract java.lang.String name();
  public abstract void suspend();
  public abstract void resume();
  public abstract int suspendCount();
  public abstract void stop(com.sun.jdi.ObjectReference) throws com.sun.jdi.InvalidTypeException;
  public abstract void interrupt();
  public abstract int status();
  public abstract boolean isSuspended();
  public abstract boolean isAtBreakpoint();
  public abstract com.sun.jdi.ThreadGroupReference threadGroup();
  public abstract int frameCount() throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract java.util.List<com.sun.jdi.StackFrame> frames() throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract com.sun.jdi.StackFrame frame(int) throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract java.util.List<com.sun.jdi.StackFrame> frames(int, int) throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract java.util.List<com.sun.jdi.ObjectReference> ownedMonitors() throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract java.util.List<com.sun.jdi.MonitorInfo> ownedMonitorsAndFrames() throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract com.sun.jdi.ObjectReference currentContendedMonitor() throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract void popFrames(com.sun.jdi.StackFrame) throws com.sun.jdi.IncompatibleThreadStateException;
  public abstract void forceEarlyReturn(com.sun.jdi.Value) throws com.sun.jdi.InvalidTypeException, com.sun.jdi.ClassNotLoadedException, com.sun.jdi.IncompatibleThreadStateException;
}
