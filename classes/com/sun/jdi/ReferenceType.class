Compiled from "ReferenceType.java"
public interface com.sun.jdi.ReferenceType extends com.sun.jdi.Type, java.lang.Comparable<com.sun.jdi.ReferenceType>, com.sun.jdi.Accessible {
  public abstract java.lang.String name();
  public abstract java.lang.String genericSignature();
  public abstract com.sun.jdi.ClassLoaderReference classLoader();
  public default com.sun.jdi.ModuleReference module();
  public abstract java.lang.String sourceName() throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<java.lang.String> sourceNames(java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<java.lang.String> sourcePaths(java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public abstract java.lang.String sourceDebugExtension() throws com.sun.jdi.AbsentInformationException;
  public abstract boolean isStatic();
  public abstract boolean isAbstract();
  public abstract boolean isFinal();
  public abstract boolean isPrepared();
  public abstract boolean isVerified();
  public abstract boolean isInitialized();
  public abstract boolean failedToInitialize();
  public abstract java.util.List<com.sun.jdi.Field> fields();
  public abstract java.util.List<com.sun.jdi.Field> visibleFields();
  public abstract java.util.List<com.sun.jdi.Field> allFields();
  public abstract com.sun.jdi.Field fieldByName(java.lang.String);
  public abstract java.util.List<com.sun.jdi.Method> methods();
  public abstract java.util.List<com.sun.jdi.Method> visibleMethods();
  public abstract java.util.List<com.sun.jdi.Method> allMethods();
  public abstract java.util.List<com.sun.jdi.Method> methodsByName(java.lang.String);
  public abstract java.util.List<com.sun.jdi.Method> methodsByName(java.lang.String, java.lang.String);
  public abstract java.util.List<com.sun.jdi.ReferenceType> nestedTypes();
  public abstract com.sun.jdi.Value getValue(com.sun.jdi.Field);
  public abstract java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value> getValues(java.util.List<? extends com.sun.jdi.Field>);
  public abstract com.sun.jdi.ClassObjectReference classObject();
  public abstract java.util.List<com.sun.jdi.Location> allLineLocations() throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<com.sun.jdi.Location> allLineLocations(java.lang.String, java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<com.sun.jdi.Location> locationsOfLine(int) throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<com.sun.jdi.Location> locationsOfLine(java.lang.String, java.lang.String, int) throws com.sun.jdi.AbsentInformationException;
  public abstract java.util.List<java.lang.String> availableStrata();
  public abstract java.lang.String defaultStratum();
  public abstract java.util.List<com.sun.jdi.ObjectReference> instances(long);
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public abstract int majorVersion();
  public abstract int minorVersion();
  public abstract int constantPoolCount();
  public abstract byte[] constantPool();
}
