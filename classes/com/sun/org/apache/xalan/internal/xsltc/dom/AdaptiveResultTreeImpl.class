Compiled from "AdaptiveResultTreeImpl.java"
public class com.sun.org.apache.xalan.internal.xsltc.dom.AdaptiveResultTreeImpl extends com.sun.org.apache.xalan.internal.xsltc.dom.SimpleResultTreeImpl {
  public com.sun.org.apache.xalan.internal.xsltc.dom.AdaptiveResultTreeImpl(com.sun.org.apache.xalan.internal.xsltc.dom.XSLTCDTMManager, int, com.sun.org.apache.xml.internal.dtm.DTMWSFilter, int, boolean);
  public com.sun.org.apache.xalan.internal.xsltc.DOM getNestedDOM();
  public int getDocument();
  public java.lang.String getStringValue();
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getIterator();
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getChildren(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getTypedChildren(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getAxisIterator(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getTypedAxisIterator(int, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNthDescendant(int, int, boolean);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNamespaceAxisIterator(int, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNodeValueIterator(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, int, java.lang.String, boolean);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator orderNodes(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, int);
  public java.lang.String getNodeName(int);
  public java.lang.String getNodeNameX(int);
  public java.lang.String getNamespaceName(int);
  public int getExpandedTypeID(int);
  public int getNamespaceType(int);
  public int getParent(int);
  public int getAttributeNode(int, int);
  public java.lang.String getStringValueX(int);
  public void copy(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public void copy(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public java.lang.String shallowCopy(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public boolean lessThan(int, int);
  public void characters(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public org.w3c.dom.Node makeNode(int);
  public org.w3c.dom.Node makeNode(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator);
  public org.w3c.dom.NodeList makeNodeList(int);
  public org.w3c.dom.NodeList makeNodeList(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator);
  public java.lang.String getLanguage(int);
  public int getSize();
  public java.lang.String getDocumentURI(int);
  public void setFilter(com.sun.org.apache.xalan.internal.xsltc.StripFilter);
  public void setupMapping(java.lang.String[], java.lang.String[], int[], java.lang.String[]);
  public boolean isElement(int);
  public boolean isAttribute(int);
  public java.lang.String lookupNamespace(int, java.lang.String) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public final int getNodeIdent(int);
  public final int getNodeHandle(int);
  public com.sun.org.apache.xalan.internal.xsltc.DOM getResultTreeFrag(int, int);
  public com.sun.org.apache.xml.internal.serializer.SerializationHandler getOutputDomBuilder();
  public int getNSType(int);
  public java.lang.String getUnparsedEntityURI(java.lang.String);
  public java.util.Map<java.lang.String, java.lang.Integer> getElementsWithIDs();
  public void startDocument() throws org.xml.sax.SAXException;
  public void endDocument() throws org.xml.sax.SAXException;
  public void characters(java.lang.String) throws org.xml.sax.SAXException;
  public void characters(char[], int, int) throws org.xml.sax.SAXException;
  public boolean setEscaping(boolean) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void addAttribute(java.lang.String, java.lang.String);
  public void addUniqueAttribute(java.lang.String, java.lang.String, int) throws org.xml.sax.SAXException;
  public void addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void namespaceAfterStartElement(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void comment(java.lang.String) throws org.xml.sax.SAXException;
  public void comment(char[], int, int) throws org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void setFeature(java.lang.String, boolean);
  public void setProperty(java.lang.String, java.lang.Object);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser getAxisTraverser(int);
  public boolean hasChildNodes(int);
  public int getFirstChild(int);
  public int getLastChild(int);
  public int getAttributeNode(int, java.lang.String, java.lang.String);
  public int getFirstAttribute(int);
  public int getFirstNamespaceNode(int, boolean);
  public int getNextSibling(int);
  public int getPreviousSibling(int);
  public int getNextAttribute(int);
  public int getNextNamespaceNode(int, int, boolean);
  public int getOwnerDocument(int);
  public int getDocumentRoot(int);
  public com.sun.org.apache.xml.internal.utils.XMLString getStringValue(int);
  public int getStringValueChunkCount(int);
  public char[] getStringValueChunk(int, int, int[]);
  public int getExpandedTypeID(java.lang.String, java.lang.String, int);
  public java.lang.String getLocalNameFromExpandedNameID(int);
  public java.lang.String getNamespaceFromExpandedNameID(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getPrefix(int);
  public java.lang.String getNamespaceURI(int);
  public java.lang.String getNodeValue(int);
  public short getNodeType(int);
  public short getLevel(int);
  public boolean isSupported(java.lang.String, java.lang.String);
  public java.lang.String getDocumentBaseURI();
  public void setDocumentBaseURI(java.lang.String);
  public java.lang.String getDocumentSystemIdentifier(int);
  public java.lang.String getDocumentEncoding(int);
  public java.lang.String getDocumentStandalone(int);
  public java.lang.String getDocumentVersion(int);
  public boolean getDocumentAllDeclarationsProcessed();
  public java.lang.String getDocumentTypeDeclarationSystemIdentifier();
  public java.lang.String getDocumentTypeDeclarationPublicIdentifier();
  public int getElementById(java.lang.String);
  public boolean supportsPreStripping();
  public boolean isNodeAfter(int, int);
  public boolean isCharacterElementContentWhitespace(int);
  public boolean isDocumentAllDeclarationsProcessed(int);
  public boolean isAttributeSpecified(int);
  public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException;
  public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException;
  public org.w3c.dom.Node getNode(int);
  public boolean needsTwoThreads();
  public org.xml.sax.ContentHandler getContentHandler();
  public org.xml.sax.ext.LexicalHandler getLexicalHandler();
  public org.xml.sax.EntityResolver getEntityResolver();
  public org.xml.sax.DTDHandler getDTDHandler();
  public org.xml.sax.ErrorHandler getErrorHandler();
  public org.xml.sax.ext.DeclHandler getDeclHandler();
  public void appendChild(int, boolean, boolean);
  public void appendTextChild(java.lang.String);
  public javax.xml.transform.SourceLocator getSourceLocatorFor(int);
  public void documentRegistration();
  public void documentRelease();
  public void release();
  static {};
}
