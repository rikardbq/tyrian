Compiled from "SAXImpl.java"
public final class com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl extends com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM2 implements com.sun.org.apache.xalan.internal.xsltc.DOMEnhancedForDTM,com.sun.org.apache.xalan.internal.xsltc.dom.DOMBuilder {
  public void setDocumentURI(java.lang.String);
  public java.lang.String getDocumentURI();
  public java.lang.String getDocumentURI(int);
  public void setupMapping(java.lang.String[], java.lang.String[], int[], java.lang.String[]);
  public java.lang.String lookupNamespace(int, java.lang.String) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public boolean isElement(int);
  public boolean isAttribute(int);
  public int getSize();
  public void setFilter(com.sun.org.apache.xalan.internal.xsltc.StripFilter);
  public boolean lessThan(int, int);
  public org.w3c.dom.Node makeNode(int);
  public org.w3c.dom.Node makeNode(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator);
  public org.w3c.dom.NodeList makeNodeList(int);
  public org.w3c.dom.NodeList makeNodeList(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNodeValueIterator(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, int, java.lang.String, boolean);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator orderNodes(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getIterator();
  public int getNSType(int);
  public int getNamespaceType(int);
  public int getGeneralizedType(java.lang.String);
  public int getGeneralizedType(java.lang.String, boolean);
  public short[] getMapping(java.lang.String[], java.lang.String[], int[]);
  public int[] getReverseMapping(java.lang.String[], java.lang.String[], int[]);
  public short[] getNamespaceMapping(java.lang.String[]);
  public short[] getReverseNamespaceMapping(java.lang.String[]);
  public com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl(com.sun.org.apache.xalan.internal.xsltc.dom.XSLTCDTMManager, javax.xml.transform.Source, int, com.sun.org.apache.xml.internal.dtm.DTMWSFilter, com.sun.org.apache.xml.internal.utils.XMLStringFactory, boolean, boolean);
  public com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl(com.sun.org.apache.xalan.internal.xsltc.dom.XSLTCDTMManager, javax.xml.transform.Source, int, com.sun.org.apache.xml.internal.dtm.DTMWSFilter, com.sun.org.apache.xml.internal.utils.XMLStringFactory, boolean, int, boolean, boolean);
  public void migrateTo(com.sun.org.apache.xml.internal.dtm.DTMManager);
  public int getElementById(java.lang.String);
  public boolean hasDOMSource();
  protected boolean getShouldStripWhitespace();
  public void characters(char[], int, int) throws org.xml.sax.SAXException;
  public void startDocument() throws org.xml.sax.SAXException;
  public void endDocument() throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes, org.w3c.dom.Node) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void comment(char[], int, int) throws org.xml.sax.SAXException;
  public boolean setEscaping(boolean);
  public void print(int, int);
  public java.lang.String getNodeName(int);
  public java.lang.String getNamespaceName(int);
  public int getAttributeNode(int, int);
  public java.lang.String getAttributeValue(int, int);
  public java.lang.String getAttributeValue(java.lang.String, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getChildren(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getTypedChildren(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getAxisIterator(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getTypedAxisIterator(int, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNamespaceAxisIterator(int, int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getTypedDescendantIterator(int);
  public com.sun.org.apache.xml.internal.dtm.DTMAxisIterator getNthDescendant(int, int, boolean);
  public void characters(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public void copy(com.sun.org.apache.xml.internal.dtm.DTMAxisIterator, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public void copy(com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public void copy(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public java.lang.String shallowCopy(int, com.sun.org.apache.xml.internal.serializer.SerializationHandler) throws com.sun.org.apache.xalan.internal.xsltc.TransletException;
  public java.lang.String getLanguage(int);
  public com.sun.org.apache.xalan.internal.xsltc.dom.DOMBuilder getBuilder();
  public com.sun.org.apache.xml.internal.serializer.SerializationHandler getOutputDomBuilder();
  public com.sun.org.apache.xalan.internal.xsltc.DOM getResultTreeFrag(int, int);
  public com.sun.org.apache.xalan.internal.xsltc.DOM getResultTreeFrag(int, int, boolean);
  public java.util.Map<java.lang.String, java.lang.Integer> getElementsWithIDs();
  public java.lang.String getUnparsedEntityURI(java.lang.String);
  public void release();
  static com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable access$000(com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl);
  static com.sun.org.apache.xml.internal.dtm.ref.ExpandedNameTable access$100(com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl);
  static int access$200(com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl, int);
  static int access$300(com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl, int);
  static int access$400(com.sun.org.apache.xalan.internal.xsltc.dom.SAXImpl, int);
  static {};
}
