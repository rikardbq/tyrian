Compiled from "WalkerFactory.java"
public class com.sun.org.apache.xpath.internal.axes.WalkerFactory {
  static final boolean DEBUG_PATTERN_CREATION;
  static final boolean DEBUG_WALKER_CREATION;
  static final boolean DEBUG_ITERATOR_CREATION;
  public static final int BITS_COUNT;
  public static final int BITS_RESERVED;
  public static final int BIT_PREDICATE;
  public static final int BIT_ANCESTOR;
  public static final int BIT_ANCESTOR_OR_SELF;
  public static final int BIT_ATTRIBUTE;
  public static final int BIT_CHILD;
  public static final int BIT_DESCENDANT;
  public static final int BIT_DESCENDANT_OR_SELF;
  public static final int BIT_FOLLOWING;
  public static final int BIT_FOLLOWING_SIBLING;
  public static final int BIT_NAMESPACE;
  public static final int BIT_PARENT;
  public static final int BIT_PRECEDING;
  public static final int BIT_PRECEDING_SIBLING;
  public static final int BIT_SELF;
  public static final int BIT_FILTER;
  public static final int BIT_ROOT;
  public static final int BITMASK_TRAVERSES_OUTSIDE_SUBTREE;
  public static final int BIT_BACKWARDS_SELF;
  public static final int BIT_ANY_DESCENDANT_FROM_ROOT;
  public static final int BIT_NODETEST_ANY;
  public static final int BIT_MATCH_PATTERN;
  public com.sun.org.apache.xpath.internal.axes.WalkerFactory();
  static com.sun.org.apache.xpath.internal.axes.AxesWalker loadOneWalker(com.sun.org.apache.xpath.internal.axes.WalkingIterator, com.sun.org.apache.xpath.internal.compiler.Compiler, int) throws javax.xml.transform.TransformerException;
  static com.sun.org.apache.xpath.internal.axes.AxesWalker loadWalkers(com.sun.org.apache.xpath.internal.axes.WalkingIterator, com.sun.org.apache.xpath.internal.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException;
  public static boolean isSet(int, int);
  public static void diagnoseIterator(java.lang.String, int, com.sun.org.apache.xpath.internal.compiler.Compiler);
  public static com.sun.org.apache.xml.internal.dtm.DTMIterator newDTMIterator(com.sun.org.apache.xpath.internal.compiler.Compiler, int, boolean) throws javax.xml.transform.TransformerException;
  public static int getAxisFromStep(com.sun.org.apache.xpath.internal.compiler.Compiler, int) throws javax.xml.transform.TransformerException;
  public static int getAnalysisBitFromAxes(int);
  static boolean functionProximateOrContainsProximate(com.sun.org.apache.xpath.internal.compiler.Compiler, int);
  static boolean isProximateInnerExpr(com.sun.org.apache.xpath.internal.compiler.Compiler, int);
  public static boolean mightBeProximate(com.sun.org.apache.xpath.internal.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException;
  public static boolean isDownwardAxisOfMany(int);
  static com.sun.org.apache.xpath.internal.patterns.StepPattern loadSteps(com.sun.org.apache.xpath.internal.axes.MatchPatternIterator, com.sun.org.apache.xpath.internal.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException;
  static boolean analyzePredicate(com.sun.org.apache.xpath.internal.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException;
  public static java.lang.String getAnalysisString(int);
  public static boolean hasPredicate(int);
  public static boolean isWild(int);
  public static boolean walksAncestors(int);
  public static boolean walksAttributes(int);
  public static boolean walksNamespaces(int);
  public static boolean walksChildren(int);
  public static boolean walksDescendants(int);
  public static boolean walksSubtree(int);
  public static boolean walksSubtreeOnlyMaybeAbsolute(int);
  public static boolean walksSubtreeOnly(int);
  public static boolean walksFilteredList(int);
  public static boolean walksSubtreeOnlyFromRootOrContext(int);
  public static boolean walksInDocOrder(int);
  public static boolean walksFollowingOnlyMaybeAbsolute(int);
  public static boolean walksUp(int);
  public static boolean walksSideways(int);
  public static boolean walksExtraNodes(int);
  public static boolean walksExtraNodesOnly(int);
  public static boolean isAbsolute(int);
  public static boolean walksChildrenOnly(int);
  public static boolean walksChildrenAndExtraAndSelfOnly(int);
  public static boolean walksDescendantsAndExtraAndSelfOnly(int);
  public static boolean walksSelfOnly(int);
  public static boolean walksUpOnly(int);
  public static boolean walksDownOnly(int);
  public static boolean walksDownExtraOnly(int);
  public static boolean canSkipSubtrees(int);
  public static boolean canCrissCross(int);
  public static boolean isNaturalDocOrder(int);
  public static boolean isOneStep(int);
  public static int getStepCount(int);
}
