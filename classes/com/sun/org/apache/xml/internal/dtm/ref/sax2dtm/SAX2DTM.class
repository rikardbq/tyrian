Compiled from "SAX2DTM.java"
public class com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM extends com.sun.org.apache.xml.internal.dtm.ref.DTMDefaultBaseIterators implements org.xml.sax.EntityResolver,org.xml.sax.DTDHandler,org.xml.sax.ContentHandler,org.xml.sax.ErrorHandler,org.xml.sax.ext.DeclHandler,org.xml.sax.ext.LexicalHandler {
  protected com.sun.org.apache.xml.internal.utils.FastStringBuffer m_chars;
  protected com.sun.org.apache.xml.internal.utils.SuballocatedIntVector m_data;
  protected transient com.sun.org.apache.xml.internal.utils.IntStack m_parents;
  protected transient int m_previous;
  protected transient java.util.Vector<java.lang.String> m_prefixMappings;
  protected transient com.sun.org.apache.xml.internal.utils.IntStack m_contextIndexes;
  protected transient int m_textType;
  protected transient int m_coalescedTextType;
  protected transient org.xml.sax.Locator m_locator;
  protected transient boolean m_insideDTD;
  protected com.sun.org.apache.xml.internal.dtm.ref.DTMTreeWalker m_walker;
  protected com.sun.org.apache.xml.internal.dtm.ref.DTMStringPool m_valuesOrPrefixes;
  protected boolean m_endDocumentOccured;
  protected com.sun.org.apache.xml.internal.utils.SuballocatedIntVector m_dataOrQName;
  protected java.util.Map<java.lang.String, java.lang.Integer> m_idAttributes;
  protected int m_textPendingStart;
  protected boolean m_useSourceLocationProperty;
  protected com.sun.org.apache.xml.internal.utils.StringVector m_sourceSystemId;
  protected com.sun.org.apache.xml.internal.utils.IntVector m_sourceLine;
  protected com.sun.org.apache.xml.internal.utils.IntVector m_sourceColumn;
  boolean m_pastFirstElement;
  public com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM(com.sun.org.apache.xml.internal.dtm.DTMManager, javax.xml.transform.Source, int, com.sun.org.apache.xml.internal.dtm.DTMWSFilter, com.sun.org.apache.xml.internal.utils.XMLStringFactory, boolean);
  public com.sun.org.apache.xml.internal.dtm.ref.sax2dtm.SAX2DTM(com.sun.org.apache.xml.internal.dtm.DTMManager, javax.xml.transform.Source, int, com.sun.org.apache.xml.internal.dtm.DTMWSFilter, com.sun.org.apache.xml.internal.utils.XMLStringFactory, boolean, int, boolean, boolean);
  public void setUseSourceLocation(boolean);
  protected int _dataOrQName(int);
  public void clearCoRoutine();
  public void clearCoRoutine(boolean);
  public void setIncrementalSAXSource(com.sun.org.apache.xml.internal.dtm.ref.IncrementalSAXSource);
  public org.xml.sax.ContentHandler getContentHandler();
  public org.xml.sax.ext.LexicalHandler getLexicalHandler();
  public org.xml.sax.EntityResolver getEntityResolver();
  public org.xml.sax.DTDHandler getDTDHandler();
  public org.xml.sax.ErrorHandler getErrorHandler();
  public org.xml.sax.ext.DeclHandler getDeclHandler();
  public boolean needsTwoThreads();
  public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException;
  public java.lang.String getNodeName(int);
  public java.lang.String getNodeNameX(int);
  public boolean isAttributeSpecified(int);
  public java.lang.String getDocumentTypeDeclarationSystemIdentifier();
  protected int getNextNodeIdentity(int);
  public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException;
  public int getNumberOfNodes();
  protected boolean nextNode();
  protected int addNode(int, int, int, int, int, boolean);
  protected void addNewDTMID(int);
  public void migrateTo(com.sun.org.apache.xml.internal.dtm.DTMManager);
  protected void setSourceLocation();
  public java.lang.String getNodeValue(int);
  public java.lang.String getLocalName(int);
  public java.lang.String getUnparsedEntityURI(java.lang.String);
  public java.lang.String getPrefix(int);
  public int getAttributeNode(int, java.lang.String, java.lang.String);
  public java.lang.String getDocumentTypeDeclarationPublicIdentifier();
  public java.lang.String getNamespaceURI(int);
  public com.sun.org.apache.xml.internal.utils.XMLString getStringValue(int);
  public boolean isWhitespace(int);
  public int getElementById(java.lang.String);
  public java.lang.String getPrefix(java.lang.String, java.lang.String);
  public int getIdForNamespace(java.lang.String);
  public java.lang.String getNamespaceURI(java.lang.String);
  public void setIDAttribute(java.lang.String, int);
  protected void charactersFlush();
  public org.xml.sax.InputSource resolveEntity(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void setDocumentLocator(org.xml.sax.Locator);
  public void startDocument() throws org.xml.sax.SAXException;
  public void endDocument() throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException;
  protected boolean declAlreadyDeclared(java.lang.String);
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void characters(char[], int, int) throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException;
  public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException;
  public void warning(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  public void error(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  public void fatalError(org.xml.sax.SAXParseException) throws org.xml.sax.SAXException;
  public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void endDTD() throws org.xml.sax.SAXException;
  public void startEntity(java.lang.String) throws org.xml.sax.SAXException;
  public void endEntity(java.lang.String) throws org.xml.sax.SAXException;
  public void startCDATA() throws org.xml.sax.SAXException;
  public void endCDATA() throws org.xml.sax.SAXException;
  public void comment(char[], int, int) throws org.xml.sax.SAXException;
  public void setProperty(java.lang.String, java.lang.Object);
  public javax.xml.transform.SourceLocator getSourceLocatorFor(int);
  public java.lang.String getFixedNames(int);
  static {};
}
