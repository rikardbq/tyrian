Compiled from "ToStream.java"
public abstract class com.sun.org.apache.xml.internal.serializer.ToStream extends com.sun.org.apache.xml.internal.serializer.SerializerBase {
  protected com.sun.org.apache.xml.internal.serializer.ToStream$BoolStack m_disableOutputEscapingStates;
  com.sun.org.apache.xml.internal.serializer.EncodingInfo m_encodingInfo;
  java.lang.reflect.Method m_canConvertMeth;
  boolean m_triedToGetConverter;
  java.lang.Object m_charToByteConverter;
  protected com.sun.org.apache.xml.internal.serializer.ToStream$CharacterBuffer m_charactersBuffer;
  protected java.util.List<java.lang.Integer> m_childNodeNumStack;
  protected int m_childNodeNum;
  protected com.sun.org.apache.xml.internal.serializer.ToStream$BoolStack m_preserveSpaces;
  protected boolean m_ispreserveSpace;
  protected boolean m_isprevtext;
  protected int m_maxCharacter;
  protected char[] m_lineSep;
  protected boolean m_lineSepUse;
  protected int m_lineSepLen;
  protected com.sun.org.apache.xml.internal.serializer.CharInfo m_charInfo;
  boolean m_shouldFlush;
  protected boolean m_spaceBeforeClose;
  boolean m_startNewLine;
  protected boolean m_inDoctype;
  boolean m_isUTF8;
  protected boolean m_cdataStartCalled;
  java.io.OutputStream m_outputStream;
  public com.sun.org.apache.xml.internal.serializer.ToStream();
  protected void closeCDATA() throws org.xml.sax.SAXException;
  public void serialize(org.w3c.dom.Node) throws java.io.IOException;
  static final boolean isUTF16Surrogate(char);
  protected final void flushWriter() throws org.xml.sax.SAXException;
  public java.io.OutputStream getOutputStream();
  public void elementDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void internalEntityDecl(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  void outputEntityDecl(java.lang.String, java.lang.String) throws java.io.IOException;
  protected final void outputLineSep() throws java.io.IOException;
  void setProp(java.lang.String, java.lang.String, boolean);
  public void setOutputFormat(java.util.Properties);
  public java.util.Properties getOutputFormat();
  public void setWriter(java.io.Writer);
  public boolean setLineSepUse(boolean);
  public void setOutputStream(java.io.OutputStream);
  public boolean setEscaping(boolean);
  protected void indent(int) throws java.io.IOException;
  protected void indent() throws java.io.IOException;
  public void attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public java.io.Writer getWriter();
  public void externalEntityDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  protected boolean escapingNotNeeded(char);
  protected int writeUTF16Surrogate(char, char[], int, int) throws java.io.IOException, org.xml.sax.SAXException;
  protected int accumDefaultEntity(java.io.Writer, char, int, char[], int, boolean, boolean) throws java.io.IOException;
  void writeNormalizedChars(char[], int, int, boolean, boolean) throws java.io.IOException, org.xml.sax.SAXException;
  public void endNonEscaping() throws org.xml.sax.SAXException;
  public void startNonEscaping() throws org.xml.sax.SAXException;
  protected void cdata(char[], int, int) throws org.xml.sax.SAXException;
  protected void charactersRaw(char[], int, int) throws org.xml.sax.SAXException;
  public void characters(char[], int, int) throws org.xml.sax.SAXException;
  protected boolean shouldFormatOutput();
  public boolean getIndent();
  protected final void flushCharactersBuffer() throws org.xml.sax.SAXException;
  protected boolean shouldIndentForText();
  public void characters(java.lang.String) throws org.xml.sax.SAXException;
  protected int accumDefaultEscape(java.io.Writer, char, int, char[], int, boolean, boolean) throws java.io.IOException, org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void startElement(java.lang.String) throws org.xml.sax.SAXException;
  void outputDocTypeDecl(java.lang.String, boolean) throws org.xml.sax.SAXException;
  public void processAttributes(java.io.Writer, int) throws java.io.IOException, org.xml.sax.SAXException;
  public void writeAttrString(java.io.Writer, java.lang.String, java.lang.String) throws java.io.IOException, org.xml.sax.SAXException;
  public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void endElement(java.lang.String) throws org.xml.sax.SAXException;
  public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public boolean startPrefixMapping(java.lang.String, java.lang.String, boolean) throws org.xml.sax.SAXException;
  public void comment(char[], int, int) throws org.xml.sax.SAXException;
  public void endCDATA() throws org.xml.sax.SAXException;
  public void endDTD() throws org.xml.sax.SAXException;
  public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException;
  public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException;
  public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException;
  public void startCDATA() throws org.xml.sax.SAXException;
  public void startEntity(java.lang.String) throws org.xml.sax.SAXException;
  protected void closeStartTag() throws org.xml.sax.SAXException;
  public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public int getIndentAmount();
  public void setIndentAmount(int);
  protected boolean shouldIndent();
  public void setCdataSectionElements(java.util.List<java.lang.String>);
  protected java.lang.String ensureAttributesNamespaceIsDeclared(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  void ensurePrefixIsDeclared(java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void flushPending() throws org.xml.sax.SAXException;
  public void setContentHandler(org.xml.sax.ContentHandler);
  public boolean addAttributeAlways(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean);
  protected void firePseudoAttributes();
  public void setTransformer(javax.xml.transform.Transformer);
  public boolean reset();
  public void setEncoding(java.lang.String);
  public void notationDecl(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException;
  public void setDTDEntityExpansion(boolean);
  public void addCdataSectionElements(java.lang.String);
}
