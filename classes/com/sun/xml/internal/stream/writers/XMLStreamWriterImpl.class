Compiled from "XMLStreamWriterImpl.java"
public final class com.sun.xml.internal.stream.writers.XMLStreamWriterImpl extends java.util.AbstractMap<java.lang.Object, java.lang.Object> implements com.sun.xml.internal.stream.writers.XMLStreamWriterBase {
  public static final java.lang.String START_COMMENT;
  public static final java.lang.String END_COMMENT;
  public static final java.lang.String DEFAULT_ENCODING;
  public static final java.lang.String DEFAULT_XMLDECL;
  public static final java.lang.String DEFAULT_XML_VERSION;
  public static final char CLOSE_START_TAG;
  public static final char OPEN_START_TAG;
  public static final java.lang.String OPEN_END_TAG;
  public static final char CLOSE_END_TAG;
  public static final java.lang.String START_CDATA;
  public static final java.lang.String END_CDATA;
  public static final java.lang.String CLOSE_EMPTY_ELEMENT;
  public static final java.lang.String SPACE;
  public static final java.lang.String UTF_8;
  public static final java.lang.String OUTPUTSTREAM_PROPERTY;
  boolean fEscapeCharacters;
  java.util.Map<java.lang.String, java.lang.String> fAttrNamespace;
  public com.sun.xml.internal.stream.writers.XMLStreamWriterImpl(java.io.OutputStream, com.sun.org.apache.xerces.internal.impl.PropertyManager) throws java.io.IOException;
  public com.sun.xml.internal.stream.writers.XMLStreamWriterImpl(java.io.OutputStream, java.lang.String, com.sun.org.apache.xerces.internal.impl.PropertyManager) throws java.io.IOException;
  public com.sun.xml.internal.stream.writers.XMLStreamWriterImpl(java.io.Writer, com.sun.org.apache.xerces.internal.impl.PropertyManager) throws java.io.IOException;
  public com.sun.xml.internal.stream.writers.XMLStreamWriterImpl(javax.xml.transform.stream.StreamResult, java.lang.String, com.sun.org.apache.xerces.internal.impl.PropertyManager) throws java.io.IOException;
  public void reset();
  void reset(boolean);
  public void setOutput(javax.xml.transform.stream.StreamResult, java.lang.String) throws java.io.IOException;
  public boolean canReuse();
  public void setEscapeCharacters(boolean);
  public boolean getEscapeCharacters();
  public void close() throws javax.xml.stream.XMLStreamException;
  public void flush() throws javax.xml.stream.XMLStreamException;
  public javax.xml.namespace.NamespaceContext getNamespaceContext();
  public java.lang.String getPrefix(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public java.lang.Object getProperty(java.lang.String) throws java.lang.IllegalArgumentException;
  public void setDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void setNamespaceContext(javax.xml.namespace.NamespaceContext) throws javax.xml.stream.XMLStreamException;
  public void setPrefix(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeAttribute(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeCData(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeCharacters(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeCharacters(char[], int, int) throws javax.xml.stream.XMLStreamException;
  public void writeComment(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeDTD(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeDefaultNamespace(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeEmptyElement(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeEmptyElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeEmptyElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeEndDocument() throws javax.xml.stream.XMLStreamException;
  public void writeEndElement() throws javax.xml.stream.XMLStreamException;
  public void writeEntityRef(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeNamespace(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeProcessingInstruction(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeProcessingInstruction(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeStartDocument() throws javax.xml.stream.XMLStreamException;
  public void writeStartDocument(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeStartDocument(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeStartDocument(java.lang.String, java.lang.String, boolean, boolean) throws javax.xml.stream.XMLStreamException;
  public void writeStartElement(java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeStartElement(java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  public void writeStartElement(java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException;
  protected void repair();
  void correctPrefix(com.sun.org.apache.xerces.internal.xni.QName, com.sun.org.apache.xerces.internal.xni.QName);
  void checkForNull(com.sun.org.apache.xerces.internal.xni.QName);
  void removeDuplicateDecls();
  void repairNamespaceDecl(com.sun.org.apache.xerces.internal.xni.QName);
  boolean isDeclared(com.sun.org.apache.xerces.internal.xni.QName);
  public int size();
  public boolean isEmpty();
  public boolean containsKey(java.lang.Object);
  public java.lang.Object get(java.lang.Object);
  public java.util.Set<java.util.Map$Entry<java.lang.Object, java.lang.Object>> entrySet();
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
}
