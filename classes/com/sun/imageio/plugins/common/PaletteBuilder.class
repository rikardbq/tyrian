Compiled from "PaletteBuilder.java"
public class com.sun.imageio.plugins.common.PaletteBuilder {
  protected static final int MAXLEVEL;
  protected java.awt.image.RenderedImage src;
  protected java.awt.image.ColorModel srcColorModel;
  protected java.awt.image.Raster srcRaster;
  protected int requiredSize;
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode root;
  protected int numNodes;
  protected int maxNodes;
  protected int currLevel;
  protected int currSize;
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode[] reduceList;
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode[] palette;
  protected int transparency;
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode transColor;
  public static java.awt.image.RenderedImage createIndexedImage(java.awt.image.RenderedImage);
  public static java.awt.image.IndexColorModel createIndexColorModel(java.awt.image.RenderedImage);
  public static boolean canCreatePalette(javax.imageio.ImageTypeSpecifier);
  public static boolean canCreatePalette(java.awt.image.RenderedImage);
  protected java.awt.image.RenderedImage getIndexedImage();
  protected com.sun.imageio.plugins.common.PaletteBuilder(java.awt.image.RenderedImage);
  protected com.sun.imageio.plugins.common.PaletteBuilder(java.awt.image.RenderedImage, int);
  protected int findColorIndex(com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, java.awt.Color);
  protected void buildPalette();
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode insertNode(com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, java.awt.Color, int);
  protected java.awt.image.IndexColorModel getIndexColorModel();
  protected int findPaletteEntry(com.sun.imageio.plugins.common.PaletteBuilder$ColorNode, int, byte[], byte[], byte[]);
  protected int getBranchIndex(java.awt.Color, int);
  protected void reduceTree();
  protected com.sun.imageio.plugins.common.PaletteBuilder$ColorNode freeTree(com.sun.imageio.plugins.common.PaletteBuilder$ColorNode);
}
