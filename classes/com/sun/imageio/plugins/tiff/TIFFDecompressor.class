Compiled from "TIFFDecompressor.java"
public abstract class com.sun.imageio.plugins.tiff.TIFFDecompressor {
  protected javax.imageio.ImageReader reader;
  protected javax.imageio.metadata.IIOMetadata metadata;
  protected int photometricInterpretation;
  protected int compression;
  protected boolean planar;
  protected int planarBand;
  protected int samplesPerPixel;
  protected int[] bitsPerSample;
  protected int[] sampleFormat;
  protected int[] extraSamples;
  protected char[] colorMap;
  protected javax.imageio.stream.ImageInputStream stream;
  protected long offset;
  protected int byteCount;
  protected int srcMinX;
  protected int srcMinY;
  protected int srcWidth;
  protected int srcHeight;
  protected int sourceXOffset;
  protected int dstXOffset;
  protected int sourceYOffset;
  protected int dstYOffset;
  protected int subsampleX;
  protected int subsampleY;
  protected int[] sourceBands;
  protected int[] destinationBands;
  protected java.awt.image.BufferedImage rawImage;
  protected java.awt.image.BufferedImage image;
  protected int dstMinX;
  protected int dstMinY;
  protected int dstWidth;
  protected int dstHeight;
  protected int activeSrcMinX;
  protected int activeSrcMinY;
  protected int activeSrcWidth;
  protected int activeSrcHeight;
  protected com.sun.imageio.plugins.tiff.TIFFColorConverter colorConverter;
  public com.sun.imageio.plugins.tiff.TIFFDecompressor();
  static java.awt.image.SampleModel createInterleavedSM(int, int);
  static java.awt.image.ColorModel createComponentCM(java.awt.color.ColorSpace, int, int[], int, boolean, boolean);
  public static javax.imageio.ImageTypeSpecifier getRawImageTypeSpecifier(int, int, int, int[], int[], int[], char[]);
  public void setReader(javax.imageio.ImageReader);
  public void setMetadata(javax.imageio.metadata.IIOMetadata);
  public void setPhotometricInterpretation(int);
  public void setCompression(int);
  public void setPlanar(boolean);
  public void setPlanarBand(int);
  public void setSamplesPerPixel(int);
  public void setBitsPerSample(int[]);
  public void setSampleFormat(int[]);
  public void setExtraSamples(int[]);
  public void setColorMap(char[]);
  public void setStream(javax.imageio.stream.ImageInputStream);
  public void setOffset(long);
  public void setByteCount(int);
  public void setSrcMinX(int);
  public void setSrcMinY(int);
  public void setSrcWidth(int);
  public void setSrcHeight(int);
  public void setSourceXOffset(int);
  public void setDstXOffset(int);
  public void setSourceYOffset(int);
  public void setDstYOffset(int);
  public void setSubsampleX(int);
  public void setSubsampleY(int);
  public void setSourceBands(int[]);
  public void setDestinationBands(int[]);
  public void setImage(java.awt.image.BufferedImage);
  public void setDstMinX(int);
  public void setDstMinY(int);
  public void setDstWidth(int);
  public void setDstHeight(int);
  public void setActiveSrcMinX(int);
  public void setActiveSrcMinY(int);
  public void setActiveSrcWidth(int);
  public void setActiveSrcHeight(int);
  public void setColorConverter(com.sun.imageio.plugins.tiff.TIFFColorConverter);
  public javax.imageio.ImageTypeSpecifier getRawImageType();
  public java.awt.image.BufferedImage createRawImage();
  public abstract void decodeRaw(byte[], int, int, int) throws java.io.IOException;
  public void decodeRaw(short[], int, int, int) throws java.io.IOException;
  public void decodeRaw(int[], int, int, int) throws java.io.IOException;
  public void decodeRaw(float[], int, int, int) throws java.io.IOException;
  public void decodeRaw(double[], int, int, int) throws java.io.IOException;
  public void beginDecoding();
  public void decode() throws java.io.IOException;
}
