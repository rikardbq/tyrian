Compiled from "Scan.java"
public class com.sun.tools.jdeprscan.scan.Scan {
  final java.io.PrintStream out;
  final java.io.PrintStream err;
  final java.util.List<java.lang.String> classPath;
  final com.sun.tools.jdeprscan.DeprDB db;
  final boolean verbose;
  final com.sun.tools.jdeprscan.scan.ClassFinder finder;
  final java.util.Set<java.lang.String> classesNotFound;
  boolean errorOccurred;
  java.util.regex.Pattern descTypePattern;
  java.util.regex.Pattern refTypePattern;
  public com.sun.tools.jdeprscan.scan.Scan(java.io.PrintStream, java.io.PrintStream, java.util.List<java.lang.String>, com.sun.tools.jdeprscan.DeprDB, boolean);
  java.lang.String nameFromDescType(java.lang.String);
  java.lang.String nameFromRefType(java.lang.String);
  java.lang.String typeKind(com.sun.tools.classfile.ClassFile);
  java.lang.String dep(boolean);
  void printType(java.lang.String, com.sun.tools.classfile.ClassFile, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printMethod(java.lang.String, com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printField(java.lang.String, com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printFieldType(java.lang.String, com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printHasField(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printHasMethodParmType(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printHasMethodRetType(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void printHasOverriddenMethod(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void errorException(java.lang.Exception);
  void errorNoClass(java.lang.String);
  void errorNoFile(java.lang.String);
  void errorNoMethod(java.lang.String, java.lang.String, java.lang.String);
  boolean isMemberPresent(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void addInterfaces(java.util.Deque<java.lang.String>, com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  java.lang.String resolveMember(com.sun.tools.classfile.ClassFile, java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws com.sun.tools.classfile.ConstantPoolException;
  void checkSuper(com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  void checkInterfaces(com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  void checkClasses(com.sun.tools.classfile.ClassFile, com.sun.tools.jdeprscan.scan.CPEntries) throws com.sun.tools.classfile.ConstantPoolException;
  void checkMethodRef(com.sun.tools.classfile.ClassFile, java.lang.String, com.sun.tools.classfile.ConstantPool$CONSTANT_NameAndType_info, java.lang.String) throws com.sun.tools.classfile.ConstantPoolException;
  void checkFieldRef(com.sun.tools.classfile.ClassFile, com.sun.tools.classfile.ConstantPool$CONSTANT_Fieldref_info) throws com.sun.tools.classfile.ConstantPoolException;
  void checkFields(com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  void checkMethods(com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  void processClass(com.sun.tools.classfile.ClassFile) throws com.sun.tools.classfile.ConstantPoolException;
  public boolean scanJar(java.lang.String);
  public boolean scanDir(java.lang.String);
  public boolean processClassName(java.lang.String);
  public boolean processClassFile(java.lang.String);
}
