Compiled from "Commands.java"
class com.sun.tools.example.debug.tty.Commands {
  static java.lang.String methodTraceCommand;
  com.sun.tools.example.debug.tty.Commands();
  java.lang.String typedName(com.sun.jdi.Method);
  void commandConnectors(com.sun.jdi.VirtualMachineManager);
  void commandClasses();
  void commandClass(java.util.StringTokenizer);
  void commandMethods(java.util.StringTokenizer);
  void commandFields(java.util.StringTokenizer);
  void commandThreads(java.util.StringTokenizer);
  void commandThreadGroups();
  void commandThread(java.util.StringTokenizer);
  void commandThreadGroup(java.util.StringTokenizer);
  void commandRun(java.util.StringTokenizer);
  void commandLoad(java.util.StringTokenizer);
  void commandSuspend(java.util.StringTokenizer);
  void commandResume(java.util.StringTokenizer);
  void commandCont();
  void clearPreviousStep(com.sun.jdi.ThreadReference);
  void commandStep(java.util.StringTokenizer);
  void commandStepi();
  void commandNext();
  void doKill(com.sun.jdi.ThreadReference, java.util.StringTokenizer);
  void doKillThread(com.sun.jdi.ThreadReference, java.util.StringTokenizer);
  void commandKill(java.util.StringTokenizer);
  void listCaughtExceptions();
  void commandCatchException(java.util.StringTokenizer);
  void commandIgnoreException(java.util.StringTokenizer);
  void commandUp(java.util.StringTokenizer);
  void commandDown(java.util.StringTokenizer);
  void commandWhere(java.util.StringTokenizer, boolean);
  void commandInterrupt(java.util.StringTokenizer);
  void commandMemory();
  void commandGC();
  static java.lang.String locationString(com.sun.jdi.Location);
  void listBreakpoints();
  protected com.sun.tools.example.debug.tty.BreakpointSpec parseBreakpointSpec(java.util.StringTokenizer, java.lang.String, java.lang.String);
  void commandStop(java.util.StringTokenizer);
  void commandClear(java.util.StringTokenizer);
  void commandWatch(java.util.StringTokenizer);
  void commandUnwatch(java.util.StringTokenizer);
  void turnOnExitTrace(com.sun.tools.example.debug.tty.ThreadInfo, int);
  void commandTrace(java.util.StringTokenizer);
  void commandUntrace(java.util.StringTokenizer);
  void commandList(java.util.StringTokenizer);
  void commandLines(java.util.StringTokenizer);
  void commandClasspath(java.util.StringTokenizer);
  void commandUse(java.util.StringTokenizer);
  void commandLocals();
  void doPrint(java.util.StringTokenizer, boolean);
  void commandPrint(java.util.StringTokenizer, boolean);
  void commandSet(java.util.StringTokenizer);
  void doLock(java.util.StringTokenizer);
  void commandLock(java.util.StringTokenizer);
  void commandThreadlocks(java.util.StringTokenizer);
  void doDisableGC(java.util.StringTokenizer);
  void commandDisableGC(java.util.StringTokenizer);
  void doEnableGC(java.util.StringTokenizer);
  void commandEnableGC(java.util.StringTokenizer);
  void doSave(java.util.StringTokenizer);
  void commandSave(java.util.StringTokenizer);
  void commandBytecodes(java.util.StringTokenizer);
  void commandExclude(java.util.StringTokenizer);
  void commandRedefine(java.util.StringTokenizer);
  void commandPopFrames(java.util.StringTokenizer, boolean);
  void commandExtension(java.util.StringTokenizer);
  void commandVersion(java.lang.String, com.sun.jdi.VirtualMachineManager);
  static {};
}
