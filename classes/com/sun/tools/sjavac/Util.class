Compiled from "Util.java"
public class com.sun.tools.sjavac.Util {
  public com.sun.tools.sjavac.Util();
  public static java.lang.String toFileSystemPath(java.lang.String);
  public static java.lang.String justPackageName(java.lang.String);
  public static java.lang.String extractStringOption(java.lang.String, java.lang.String);
  public static java.lang.String extractStringOption(java.lang.String, java.lang.String, java.lang.String);
  public static boolean extractBooleanOption(java.lang.String, java.lang.String, boolean);
  public static int extractIntOption(java.lang.String, java.lang.String);
  public static int extractIntOption(java.lang.String, java.lang.String, int);
  public static java.lang.String pkgNameOfClassName(java.lang.String);
  public static java.lang.String cleanSubOptions(java.util.Set<java.lang.String>, java.lang.String);
  public static java.util.Set<java.lang.String> set(java.lang.String...);
  public static java.lang.String normalizeDriveLetter(java.lang.String);
  public static java.lang.String findServerSettings(java.lang.String[]);
  public static <E> java.util.Set<E> union(java.util.Set<? extends E>, java.util.Set<? extends E>);
  public static <E> java.util.Set<E> subtract(java.util.Set<? extends E>, java.util.Set<? extends E>);
  public static java.lang.String getStackTrace(java.lang.Throwable);
  public static java.io.File pathToFile(java.nio.file.Path);
  public static <E> java.util.Set<E> intersection(java.util.Collection<? extends E>, java.util.Collection<? extends E>);
  public static <I, T> java.util.Map<I, T> indexBy(java.util.Collection<? extends T>, java.util.function.Function<? super T, ? extends I>);
  public static java.lang.String fileSuffix(java.nio.file.Path);
  public static java.util.stream.Stream<java.lang.String> getLines(java.lang.String);
}
