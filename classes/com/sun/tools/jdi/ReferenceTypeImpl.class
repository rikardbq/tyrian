Compiled from "ReferenceTypeImpl.java"
public abstract class com.sun.tools.jdi.ReferenceTypeImpl extends com.sun.tools.jdi.TypeImpl implements com.sun.jdi.ReferenceType {
  protected long ref;
  protected int modifiers;
  static final com.sun.tools.jdi.SDE NO_SDE_INFO_MARK;
  protected com.sun.tools.jdi.ReferenceTypeImpl(com.sun.jdi.VirtualMachine, long);
  void noticeRedefineClass();
  com.sun.jdi.Method getMethodMirror(long);
  com.sun.jdi.Field getFieldMirror(long);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public int compareTo(com.sun.jdi.ReferenceType);
  public java.lang.String signature();
  public java.lang.String genericSignature();
  public com.sun.jdi.ClassLoaderReference classLoader();
  public com.sun.jdi.ModuleReference module();
  public boolean isPublic();
  public boolean isProtected();
  public boolean isPrivate();
  public boolean isPackagePrivate();
  public boolean isAbstract();
  public boolean isFinal();
  public boolean isStatic();
  public boolean isPrepared();
  public boolean isVerified();
  public boolean isInitialized();
  public boolean failedToInitialize();
  public java.util.List<com.sun.jdi.Field> fields();
  abstract java.util.List<? extends com.sun.jdi.ReferenceType> inheritedTypes();
  void addVisibleFields(java.util.List<com.sun.jdi.Field>, java.util.Map<java.lang.String, com.sun.jdi.Field>, java.util.List<java.lang.String>);
  public java.util.List<com.sun.jdi.Field> visibleFields();
  void addAllFields(java.util.List<com.sun.jdi.Field>, java.util.Set<com.sun.jdi.ReferenceType>);
  public java.util.List<com.sun.jdi.Field> allFields();
  public com.sun.jdi.Field fieldByName(java.lang.String);
  public java.util.List<com.sun.jdi.Method> methods();
  void addToMethodMap(java.util.Map<java.lang.String, com.sun.jdi.Method>, java.util.List<com.sun.jdi.Method>);
  abstract void addVisibleMethods(java.util.Map<java.lang.String, com.sun.jdi.Method>, java.util.Set<com.sun.jdi.InterfaceType>);
  public java.util.List<com.sun.jdi.Method> visibleMethods();
  public abstract java.util.List<com.sun.jdi.Method> allMethods();
  public java.util.List<com.sun.jdi.Method> methodsByName(java.lang.String);
  public java.util.List<com.sun.jdi.Method> methodsByName(java.lang.String, java.lang.String);
  java.util.List<com.sun.jdi.InterfaceType> getInterfaces();
  public java.util.List<com.sun.jdi.ReferenceType> nestedTypes();
  public com.sun.jdi.Value getValue(com.sun.jdi.Field);
  void validateFieldAccess(com.sun.jdi.Field);
  void validateFieldSet(com.sun.jdi.Field);
  public java.util.Map<com.sun.jdi.Field, com.sun.jdi.Value> getValues(java.util.List<? extends com.sun.jdi.Field>);
  public com.sun.jdi.ClassObjectReference classObject();
  com.sun.tools.jdi.SDE$Stratum stratum(java.lang.String);
  public java.lang.String sourceName() throws com.sun.jdi.AbsentInformationException;
  public java.util.List<java.lang.String> sourceNames(java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public java.util.List<java.lang.String> sourcePaths(java.lang.String) throws com.sun.jdi.AbsentInformationException;
  java.lang.String baseSourceName() throws com.sun.jdi.AbsentInformationException;
  java.lang.String baseSourcePath() throws com.sun.jdi.AbsentInformationException;
  java.lang.String baseSourceDir();
  public java.lang.String sourceDebugExtension() throws com.sun.jdi.AbsentInformationException;
  public java.util.List<java.lang.String> availableStrata();
  public java.lang.String defaultStratum();
  public int modifiers();
  public java.util.List<com.sun.jdi.Location> allLineLocations() throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.Location> allLineLocations(java.lang.String, java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.Location> locationsOfLine(int) throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.Location> locationsOfLine(java.lang.String, java.lang.String, int) throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.ObjectReference> instances(long);
  public int majorVersion();
  public int minorVersion();
  public int constantPoolCount();
  public byte[] constantPool();
  void getModifiers();
  void decodeStatus(int);
  void updateStatus();
  void markPrepared();
  long ref();
  int indexOf(com.sun.jdi.Method);
  int indexOf(com.sun.jdi.Field);
  abstract boolean isAssignableTo(com.sun.jdi.ReferenceType);
  boolean isAssignableFrom(com.sun.jdi.ReferenceType);
  boolean isAssignableFrom(com.sun.jdi.ObjectReference);
  void setStatus(int);
  void setSignature(java.lang.String);
  void setGenericSignature(java.lang.String);
  com.sun.jdi.Type findType(java.lang.String) throws com.sun.jdi.ClassNotLoadedException;
  java.lang.String loaderString();
  public int compareTo(java.lang.Object);
  static {};
}
