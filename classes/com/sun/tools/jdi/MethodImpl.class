Compiled from "MethodImpl.java"
public abstract class com.sun.tools.jdi.MethodImpl extends com.sun.tools.jdi.TypeComponentImpl implements com.sun.jdi.Method {
  com.sun.tools.jdi.MethodImpl$ReturnContainer retValContainer;
  abstract int argSlotCount() throws com.sun.jdi.AbsentInformationException;
  abstract java.util.List<com.sun.jdi.Location> allLineLocations(com.sun.tools.jdi.SDE$Stratum, java.lang.String) throws com.sun.jdi.AbsentInformationException;
  abstract java.util.List<com.sun.jdi.Location> locationsOfLine(com.sun.tools.jdi.SDE$Stratum, java.lang.String, int) throws com.sun.jdi.AbsentInformationException;
  com.sun.tools.jdi.MethodImpl(com.sun.jdi.VirtualMachine, com.sun.tools.jdi.ReferenceTypeImpl, long, java.lang.String, java.lang.String, java.lang.String, int);
  static com.sun.tools.jdi.MethodImpl createMethodImpl(com.sun.jdi.VirtualMachine, com.sun.tools.jdi.ReferenceTypeImpl, long, java.lang.String, java.lang.String, java.lang.String, int);
  public boolean equals(java.lang.Object);
  public int hashCode();
  public final java.util.List<com.sun.jdi.Location> allLineLocations() throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.Location> allLineLocations(java.lang.String, java.lang.String) throws com.sun.jdi.AbsentInformationException;
  public final java.util.List<com.sun.jdi.Location> locationsOfLine(int) throws com.sun.jdi.AbsentInformationException;
  public java.util.List<com.sun.jdi.Location> locationsOfLine(java.lang.String, java.lang.String, int) throws com.sun.jdi.AbsentInformationException;
  com.sun.tools.jdi.LineInfo codeIndexToLineInfo(com.sun.tools.jdi.SDE$Stratum, long);
  public java.lang.String returnTypeName();
  public com.sun.jdi.Type returnType() throws com.sun.jdi.ClassNotLoadedException;
  public com.sun.jdi.Type findType(java.lang.String) throws com.sun.jdi.ClassNotLoadedException;
  public java.util.List<java.lang.String> argumentTypeNames();
  public java.util.List<java.lang.String> argumentSignatures();
  com.sun.jdi.Type argumentType(int) throws com.sun.jdi.ClassNotLoadedException;
  public java.util.List<com.sun.jdi.Type> argumentTypes() throws com.sun.jdi.ClassNotLoadedException;
  public int compareTo(com.sun.jdi.Method);
  public boolean isAbstract();
  public boolean isDefault();
  public boolean isSynchronized();
  public boolean isNative();
  public boolean isVarArgs();
  public boolean isBridge();
  public boolean isConstructor();
  public boolean isStaticInitializer();
  public boolean isObsolete();
  com.sun.tools.jdi.MethodImpl$ReturnContainer getReturnValueContainer();
  void handleVarArgs(java.util.List<com.sun.jdi.Value>) throws com.sun.jdi.ClassNotLoadedException, com.sun.jdi.InvalidTypeException;
  java.util.List<com.sun.jdi.Value> validateAndPrepareArgumentsForInvoke(java.util.List<? extends com.sun.jdi.Value>) throws com.sun.jdi.ClassNotLoadedException, com.sun.jdi.InvalidTypeException;
  public java.lang.String toString();
  public int compareTo(java.lang.Object);
}
