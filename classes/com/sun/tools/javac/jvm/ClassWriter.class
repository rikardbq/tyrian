Compiled from "ClassWriter.java"
public class com.sun.tools.javac.jvm.ClassWriter extends com.sun.tools.javac.jvm.ClassFile {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.ClassWriter> classWriterKey;
  public boolean multiModuleMode;
  static final int DATA_BUF_SIZE;
  static final int POOL_BUF_SIZE;
  com.sun.tools.javac.util.ByteBuffer databuf;
  com.sun.tools.javac.util.ByteBuffer poolbuf;
  com.sun.tools.javac.jvm.Pool pool;
  java.util.Set<com.sun.tools.javac.code.Symbol$ClassSymbol> innerClasses;
  com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Symbol$ClassSymbol> innerClassesQueue;
  java.util.Map<com.sun.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsKey, com.sun.tools.javac.jvm.Pool$DynamicMethod$BootstrapMethodsValue> bootstrapMethods;
  static final int SAME_FRAME_SIZE;
  static final int SAME_LOCALS_1_STACK_ITEM_EXTENDED;
  static final int SAME_FRAME_EXTENDED;
  static final int FULL_FRAME;
  static final int MAX_LOCAL_LENGTH_DIFF;
  com.sun.tools.javac.jvm.ClassWriter$AttributeWriter awriter;
  public static com.sun.tools.javac.jvm.ClassWriter instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.jvm.ClassWriter(com.sun.tools.javac.util.Context);
  public static java.lang.String flagNames(long);
  void putChar(com.sun.tools.javac.util.ByteBuffer, int, int);
  void putInt(com.sun.tools.javac.util.ByteBuffer, int, int);
  com.sun.tools.javac.util.Name typeSig(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.util.Name xClassName(com.sun.tools.javac.code.Type);
  void writePool(com.sun.tools.javac.jvm.Pool) throws com.sun.tools.javac.jvm.ClassWriter$PoolOverflow, com.sun.tools.javac.jvm.ClassWriter$StringOverflow;
  com.sun.tools.javac.jvm.ClassFile$NameAndType nameType(com.sun.tools.javac.code.Symbol);
  int writeAttr(com.sun.tools.javac.util.Name);
  void endAttr(int);
  int beginAttrs();
  void endAttrs(int, int);
  int writeEnclosingMethodAttribute(com.sun.tools.javac.code.Symbol$ClassSymbol);
  protected int writeEnclosingMethodAttribute(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$ClassSymbol);
  int writeFlagAttrs(long);
  int writeMemberAttrs(com.sun.tools.javac.code.Symbol);
  int writeMethodParametersAttr(com.sun.tools.javac.code.Symbol$MethodSymbol);
  int writeParameterAttrs(com.sun.tools.javac.code.Symbol$MethodSymbol);
  int writeJavaAnnotations(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>);
  int writeTypeAnnotations(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>, boolean);
  void writeCompoundAttribute(com.sun.tools.javac.code.Attribute$Compound);
  void writeTypeAnnotation(com.sun.tools.javac.code.Attribute$TypeCompound);
  void writePosition(com.sun.tools.javac.code.TypeAnnotationPosition);
  int writeModuleAttribute(com.sun.tools.javac.code.Symbol$ClassSymbol);
  void enterInner(com.sun.tools.javac.code.Symbol$ClassSymbol);
  void writeInnerClasses();
  int writeNestMembersIfNeeded(com.sun.tools.javac.code.Symbol$ClassSymbol);
  int writeNestHostIfNeeded(com.sun.tools.javac.code.Symbol$ClassSymbol);
  void writeBootstrapMethods();
  void writeField(com.sun.tools.javac.code.Symbol$VarSymbol);
  void writeMethod(com.sun.tools.javac.code.Symbol$MethodSymbol);
  void writeCode(com.sun.tools.javac.jvm.Code);
  void writeStackMap(com.sun.tools.javac.jvm.Code);
  void writeStackMapType(com.sun.tools.javac.code.Type);
  void writeFields(com.sun.tools.javac.code.Scope);
  void writeMethods(com.sun.tools.javac.code.Scope);
  public javax.tools.JavaFileObject writeClass(com.sun.tools.javac.code.Symbol$ClassSymbol) throws java.io.IOException, com.sun.tools.javac.jvm.ClassWriter$PoolOverflow, com.sun.tools.javac.jvm.ClassWriter$StringOverflow;
  public void writeClassFile(java.io.OutputStream, com.sun.tools.javac.code.Symbol$ClassSymbol) throws java.io.IOException, com.sun.tools.javac.jvm.ClassWriter$PoolOverflow, com.sun.tools.javac.jvm.ClassWriter$StringOverflow;
  protected int writeExtraClassAttributes(com.sun.tools.javac.code.Symbol$ClassSymbol);
  int adjustFlags(long);
  long getLastModified(javax.tools.FileObject);
  static {};
}
