Compiled from "Code.java"
public class com.sun.tools.javac.jvm.Code {
  public final boolean debugCode;
  public final boolean needStackMap;
  final com.sun.tools.javac.code.Types types;
  final com.sun.tools.javac.code.Symtab syms;
  public int max_stack;
  public int max_locals;
  public byte[] code;
  public int cp;
  com.sun.tools.javac.util.ListBuffer<char[]> catchInfo;
  com.sun.tools.javac.util.List<char[]> lineInfo;
  public com.sun.tools.javac.jvm.CRTable crt;
  public boolean fatcode;
  com.sun.tools.javac.jvm.Code$State state;
  public int nextreg;
  com.sun.tools.javac.jvm.Code$Chain pendingJumps;
  int pendingStatPos;
  boolean pendingStackMap;
  com.sun.tools.javac.jvm.Code$StackMapFormat stackMap;
  boolean varDebugInfo;
  boolean lineDebugInfo;
  com.sun.tools.javac.util.Position$LineMap lineMap;
  final com.sun.tools.javac.jvm.Pool pool;
  final com.sun.tools.javac.code.Symbol$MethodSymbol meth;
  com.sun.tools.javac.jvm.Code$StackMapFrame[] stackMapBuffer;
  com.sun.tools.javac.jvm.ClassWriter$StackMapTableFrame[] stackMapTableBuffer;
  int stackMapBufferSize;
  int lastStackMapPC;
  com.sun.tools.javac.jvm.Code$StackMapFrame lastFrame;
  com.sun.tools.javac.jvm.Code$StackMapFrame frameBeforeLast;
  static final com.sun.tools.javac.code.Type jsrReturnValue;
  com.sun.tools.javac.jvm.Code$LocalVar[] lvar;
  com.sun.tools.javac.jvm.Code$LocalVar[] varBuffer;
  int varBufferSize;
  public boolean checkLimits(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.util.Log);
  public com.sun.tools.javac.jvm.Code(com.sun.tools.javac.code.Symbol$MethodSymbol, boolean, com.sun.tools.javac.util.Position$LineMap, boolean, com.sun.tools.javac.jvm.Code$StackMapFormat, boolean, com.sun.tools.javac.jvm.CRTable, com.sun.tools.javac.code.Symtab, com.sun.tools.javac.code.Types, com.sun.tools.javac.jvm.Pool);
  public static int typecode(com.sun.tools.javac.code.Type);
  public static int truncate(int);
  public static int width(int);
  public static int width(com.sun.tools.javac.code.Type);
  public static int width(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public static int arraycode(com.sun.tools.javac.code.Type);
  public int curCP();
  public void emit4(int);
  void postop();
  public void emitLdc(int);
  public void emitMultianewarray(int, int, com.sun.tools.javac.code.Type);
  public void emitNewarray(int, com.sun.tools.javac.code.Type);
  public void emitAnewarray(int, com.sun.tools.javac.code.Type);
  public void emitInvokeinterface(int, com.sun.tools.javac.code.Type);
  public void emitInvokespecial(int, com.sun.tools.javac.code.Type);
  public void emitInvokestatic(int, com.sun.tools.javac.code.Type);
  public void emitInvokevirtual(int, com.sun.tools.javac.code.Type);
  public void emitInvokedynamic(int, com.sun.tools.javac.code.Type);
  public void emitop0(int);
  public void emitop1(int, int);
  public void emitop1w(int, int);
  public void emitop1w(int, int, int);
  public void emitop2(int, int);
  public void emitop4(int, int);
  public void align(int);
  public void put4(int, int);
  public int get4(int);
  public boolean isAlive();
  public void markDead();
  public int entryPoint();
  public int entryPoint(com.sun.tools.javac.jvm.Code$State);
  public int entryPoint(com.sun.tools.javac.jvm.Code$State, com.sun.tools.javac.code.Type);
  public void emitStackMap();
  void emitCLDCStackMap(int, int);
  void emitStackMapFrame(int, int);
  com.sun.tools.javac.jvm.Code$StackMapFrame getInitialFrame();
  public static int negate(int);
  public int emitJump(int);
  public com.sun.tools.javac.jvm.Code$Chain branch(int);
  public void resolve(com.sun.tools.javac.jvm.Code$Chain, int);
  public void resolve(com.sun.tools.javac.jvm.Code$Chain);
  public void resolvePending();
  public static com.sun.tools.javac.jvm.Code$Chain mergeChains(com.sun.tools.javac.jvm.Code$Chain, com.sun.tools.javac.jvm.Code$Chain);
  public void addCatch(char, char, char, char);
  public void compressCatchTable();
  public void addLineNumber(char, char);
  public void statBegin(int);
  public void markStatBegin();
  void adjustAliveRanges(int, int);
  public int getLVTSize();
  public void setDefined(com.sun.tools.javac.util.Bits);
  public void setDefined(int);
  public void setUndefined(int);
  public void fillExceptionParameterPositions();
  void putVar(com.sun.tools.javac.jvm.Code$LocalVar);
  public int newLocal(com.sun.tools.javac.code.Symbol$VarSymbol);
  public void newRegSegment();
  public void endScopes(int);
  public static java.lang.String mnem(int);
  static {};
}
