Compiled from "Gen.java"
public class com.sun.tools.javac.jvm.Gen extends com.sun.tools.javac.tree.JCTree$Visitor {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.Gen> genKey;
  com.sun.tools.javac.tree.EndPosTable endPosTable;
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext> env;
  com.sun.tools.javac.code.Type pt;
  com.sun.tools.javac.jvm.Items$Item result;
  public static com.sun.tools.javac.jvm.Gen instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.jvm.Gen(com.sun.tools.javac.util.Context);
  void loadIntConst(int);
  public static int zero(int);
  public static int one(int);
  void emitMinusOne(int);
  com.sun.tools.javac.code.Symbol binaryQualifier(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type);
  int makeRef(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.jvm.Items$LocalItem makeTemp(com.sun.tools.javac.code.Type);
  void callMethod(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean);
  void genFinalizer(com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext> unwind(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  void endFinalizerGap(com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  void endFinalizerGaps(com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  boolean hasFinally(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> normalizeDefs(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, com.sun.tools.javac.code.Symbol$ClassSymbol);
  void normalizeMethod(com.sun.tools.javac.tree.JCTree$JCMethodDecl, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public void genDef(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  public void genStat(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, int);
  public void genStat(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  public void genStats(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, int);
  public void genStats(com.sun.tools.javac.util.List<? extends com.sun.tools.javac.tree.JCTree>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  public com.sun.tools.javac.jvm.Items$CondItem genCond(com.sun.tools.javac.tree.JCTree, int);
  public com.sun.tools.javac.jvm.Items$CondItem genCond(com.sun.tools.javac.tree.JCTree, boolean);
  public com.sun.tools.javac.jvm.Code getCode();
  public com.sun.tools.javac.jvm.Items getItems();
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> getAttrEnv();
  public com.sun.tools.javac.jvm.Items$Item genExpr(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type);
  public void genArgs(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public void visitMethodDef(com.sun.tools.javac.tree.JCTree$JCMethodDecl);
  void genMethod(com.sun.tools.javac.tree.JCTree$JCMethodDecl, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, boolean);
  public void visitVarDef(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  public void visitSkip(com.sun.tools.javac.tree.JCTree$JCSkip);
  public void visitBlock(com.sun.tools.javac.tree.JCTree$JCBlock);
  public void visitDoLoop(com.sun.tools.javac.tree.JCTree$JCDoWhileLoop);
  public void visitWhileLoop(com.sun.tools.javac.tree.JCTree$JCWhileLoop);
  public void visitForLoop(com.sun.tools.javac.tree.JCTree$JCForLoop);
  public void visitForeachLoop(com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop);
  public void visitLabelled(com.sun.tools.javac.tree.JCTree$JCLabeledStatement);
  public void visitSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  static void qsort2(int[], int[], int, int);
  public void visitSynchronized(com.sun.tools.javac.tree.JCTree$JCSynchronized);
  public void visitTry(com.sun.tools.javac.tree.JCTree$JCTry);
  void genTry(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>);
  void genCatch(com.sun.tools.javac.tree.JCTree$JCCatch, com.sun.tools.javac.comp.Env<com.sun.tools.javac.jvm.Gen$GenContext>, int, int, com.sun.tools.javac.util.List<java.lang.Integer>);
  com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>, com.sun.tools.javac.tree.JCTree$JCExpression>> catchTypesWithAnnotations(com.sun.tools.javac.tree.JCTree$JCCatch);
  com.sun.tools.javac.util.List<com.sun.tools.javac.util.Pair<com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>, com.sun.tools.javac.tree.JCTree$JCExpression>> catchTypesWithAnnotationsFromMulticatch(com.sun.tools.javac.tree.JCTree$JCTypeUnion, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  void registerCatch(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, int, int, int, int);
  public void visitIf(com.sun.tools.javac.tree.JCTree$JCIf);
  public void visitExec(com.sun.tools.javac.tree.JCTree$JCExpressionStatement);
  public void visitBreak(com.sun.tools.javac.tree.JCTree$JCBreak);
  public void visitContinue(com.sun.tools.javac.tree.JCTree$JCContinue);
  public void visitReturn(com.sun.tools.javac.tree.JCTree$JCReturn);
  public void visitThrow(com.sun.tools.javac.tree.JCTree$JCThrow);
  public void visitApply(com.sun.tools.javac.tree.JCTree$JCMethodInvocation);
  public void visitConditional(com.sun.tools.javac.tree.JCTree$JCConditional);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  public void visitNewArray(com.sun.tools.javac.tree.JCTree$JCNewArray);
  com.sun.tools.javac.jvm.Items$Item makeNewArray(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, int);
  public void visitParens(com.sun.tools.javac.tree.JCTree$JCParens);
  public void visitAssign(com.sun.tools.javac.tree.JCTree$JCAssign);
  public void visitAssignop(com.sun.tools.javac.tree.JCTree$JCAssignOp);
  public void visitUnary(com.sun.tools.javac.tree.JCTree$JCUnary);
  public void visitBinary(com.sun.tools.javac.tree.JCTree$JCBinary);
  com.sun.tools.javac.jvm.Items$Item completeBinop(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol$OperatorSymbol);
  public void visitTypeCast(com.sun.tools.javac.tree.JCTree$JCTypeCast);
  public void visitWildcard(com.sun.tools.javac.tree.JCTree$JCWildcard);
  public void visitTypeTest(com.sun.tools.javac.tree.JCTree$JCInstanceOf);
  public void visitIndexed(com.sun.tools.javac.tree.JCTree$JCArrayAccess);
  public void visitIdent(com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitSelect(com.sun.tools.javac.tree.JCTree$JCFieldAccess);
  public boolean isInvokeDynamic(com.sun.tools.javac.code.Symbol);
  public void visitLiteral(com.sun.tools.javac.tree.JCTree$JCLiteral);
  public void visitLetExpr(com.sun.tools.javac.tree.JCTree$LetExpr);
  public boolean genClass(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl);
  static {};
}
