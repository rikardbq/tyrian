Compiled from "JNIWriter.java"
public class com.sun.tools.javac.jvm.JNIWriter {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.JNIWriter> jniWriterKey;
  com.sun.tools.javac.code.Types types;
  com.sun.tools.javac.code.Symtab syms;
  public boolean multiModuleMode;
  public static com.sun.tools.javac.jvm.JNIWriter instance(com.sun.tools.javac.util.Context);
  static boolean isSynthetic(com.sun.tools.javac.code.Symbol);
  static boolean isStatic(com.sun.tools.javac.code.Symbol);
  static boolean isFinal(com.sun.tools.javac.code.Symbol);
  static boolean isNative(com.sun.tools.javac.code.Symbol);
  public boolean needsHeader(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public javax.tools.FileObject write(com.sun.tools.javac.code.Symbol$ClassSymbol) throws java.io.IOException;
  public void write(java.io.PrintWriter, com.sun.tools.javac.code.Symbol$ClassSymbol) throws java.io.IOException;
  protected void writeStatics(java.io.PrintWriter, com.sun.tools.javac.code.Symbol$ClassSymbol) throws java.io.IOException;
  static void printStaticDefines(java.io.PrintWriter, com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.code.Symbol$VarSymbol>);
  protected void writeMethods(java.io.PrintWriter, com.sun.tools.javac.code.Symbol$ClassSymbol, java.lang.String) throws java.io.IOException, com.sun.tools.javac.jvm.JNIWriter$TypeSignature$SignatureException;
  protected final java.lang.String jniType(com.sun.tools.javac.code.Type);
  protected void fileTop(java.io.PrintWriter);
  protected void includes(java.io.PrintWriter);
  protected void cppGuardBegin(java.io.PrintWriter);
  protected void cppGuardEnd(java.io.PrintWriter);
  protected void guardBegin(java.io.PrintWriter, java.lang.String);
  protected void guardEnd(java.io.PrintWriter);
  java.lang.String encodeMethod(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol$ClassSymbol, boolean) throws com.sun.tools.javac.jvm.JNIWriter$TypeSignature$SignatureException;
  static java.lang.String encode(java.lang.CharSequence, com.sun.tools.javac.jvm.JNIWriter$EncoderType);
  static java.lang.String encodeChar(char);
  static {};
}
