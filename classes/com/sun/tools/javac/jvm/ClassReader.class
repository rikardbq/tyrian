Compiled from "ClassReader.java"
public class com.sun.tools.javac.jvm.ClassReader {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.jvm.ClassReader> classReaderKey;
  public static final int INITIAL_BUFFER_SIZE;
  boolean verbose;
  public boolean readAllOfClassFile;
  boolean allowSimplifiedVarargs;
  boolean allowModules;
  boolean lintClassfile;
  public boolean saveParameterNames;
  public final com.sun.tools.javac.jvm.Profile profile;
  final com.sun.tools.javac.util.Log log;
  com.sun.tools.javac.code.Symtab syms;
  com.sun.tools.javac.code.Types types;
  final com.sun.tools.javac.util.Names names;
  com.sun.tools.javac.util.JCDiagnostic$Factory diagFactory;
  com.sun.tools.javac.code.DeferredCompletionFailureHandler dcfh;
  com.sun.tools.javac.code.Preview preview;
  protected com.sun.tools.javac.code.Scope$WriteableScope typevars;
  protected javax.tools.JavaFileObject currentClassFile;
  protected com.sun.tools.javac.code.Symbol currentOwner;
  protected com.sun.tools.javac.code.Symbol$ModuleSymbol currentModule;
  byte[] buf;
  protected int bp;
  java.lang.Object[] poolObj;
  int[] poolIdx;
  int majorVersion;
  int minorVersion;
  int[] parameterNameIndices;
  com.sun.tools.javac.jvm.ClassReader$ParameterAnnotations[] parameterAnnotations;
  boolean haveParameterNameIndices;
  boolean sawMethodParameters;
  java.util.Set<com.sun.tools.javac.util.Name> warnedAttrs;
  com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy target;
  com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy repeatable;
  byte[] signature;
  int sigp;
  int siglimit;
  boolean sigEnterPhase;
  byte[] signatureBuffer;
  int sbp;
  protected java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind> CLASS_ATTRIBUTE;
  protected java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind> MEMBER_ATTRIBUTE;
  protected java.util.Set<com.sun.tools.javac.jvm.ClassReader$AttributeKind> CLASS_OR_MEMBER_ATTRIBUTE;
  protected java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.jvm.ClassReader$AttributeReader> attributeReaders;
  public boolean filling;
  public static com.sun.tools.javac.jvm.ClassReader instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.jvm.ClassReader(com.sun.tools.javac.util.Context);
  public com.sun.tools.javac.code.ClassFinder$BadClassFile badClassFile(java.lang.String, java.lang.Object...);
  public com.sun.tools.javac.code.ClassFinder$BadEnclosingMethodAttr badEnclosingMethod(com.sun.tools.javac.code.Symbol);
  char nextChar();
  int nextByte();
  int nextInt();
  char getChar(int);
  int getInt(int);
  long getLong(int);
  float getFloat(int);
  double getDouble(int);
  void indexPool();
  java.lang.Object readPool(int);
  com.sun.tools.javac.code.Type readType(int);
  java.lang.Object readClassOrType(int);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> readTypeParams(int);
  com.sun.tools.javac.code.Symbol$ClassSymbol readClassSymbol(int);
  com.sun.tools.javac.util.Name readClassName(int);
  com.sun.tools.javac.util.Name readName(int);
  com.sun.tools.javac.jvm.ClassFile$NameAndType readNameAndType(int);
  com.sun.tools.javac.util.Name readModuleName(int);
  java.util.Set<com.sun.tools.javac.code.Symbol$ModuleFlags> readModuleFlags(int);
  java.util.Set<com.sun.tools.javac.code.Symbol$ModuleResolutionFlags> readModuleResolutionFlags(int);
  java.util.Set<com.sun.tools.javac.code.Directive$ExportsFlag> readExportsFlags(int);
  java.util.Set<com.sun.tools.javac.code.Directive$OpensFlag> readOpensFlags(int);
  java.util.Set<com.sun.tools.javac.code.Directive$RequiresFlag> readRequiresFlags(int);
  com.sun.tools.javac.code.Type sigToType(byte[], int, int);
  com.sun.tools.javac.code.Type sigToType();
  com.sun.tools.javac.code.Type classSigToType();
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> sigToTypes(char);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> sigToTypeParams(byte[], int, int);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> sigToTypeParams();
  com.sun.tools.javac.code.Type sigToTypeParam();
  com.sun.tools.javac.code.Type findTypeVar(com.sun.tools.javac.util.Name);
  protected void readEnclosingMethodAttr(com.sun.tools.javac.code.Symbol);
  void readMemberAttrs(com.sun.tools.javac.code.Symbol);
  void readAttrs(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.jvm.ClassReader$AttributeKind);
  void readClassAttrs(com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.jvm.Code readCode(com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy> readAnnotations();
  void attachAnnotations(com.sun.tools.javac.code.Symbol);
  void attachAnnotations(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.List<com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy>);
  void readParameterAnnotations(com.sun.tools.javac.code.Symbol);
  void attachTypeAnnotations(com.sun.tools.javac.code.Symbol);
  void attachAnnotationDefault(com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.code.Type readTypeOrClassSymbol(int);
  com.sun.tools.javac.code.Type readEnumType(int);
  com.sun.tools.javac.code.Type readTypeToProxy(int);
  com.sun.tools.javac.jvm.ClassReader$CompoundAnnotationProxy readCompoundAnnotation();
  com.sun.tools.javac.jvm.ClassReader$TypeAnnotationProxy readTypeAnnotation();
  com.sun.tools.javac.code.TypeAnnotationPosition readPosition();
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.TypeAnnotationPosition$TypePathEntry> readTypePath();
  com.sun.tools.javac.code.Attribute readAttributeValue();
  com.sun.tools.javac.code.Symbol$VarSymbol readField();
  com.sun.tools.javac.code.Symbol$MethodSymbol readMethod();
  void initParameterNames(com.sun.tools.javac.code.Symbol$MethodSymbol);
  void setParameters(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Type);
  void skipBytes(int);
  void skipMember();
  void skipInnerClasses();
  protected void enterTypevars(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type);
  protected com.sun.tools.javac.code.Symbol$ClassSymbol enterClass(com.sun.tools.javac.util.Name);
  protected com.sun.tools.javac.code.Symbol$ClassSymbol enterClass(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  void readClass(com.sun.tools.javac.code.Symbol$ClassSymbol);
  void readInnerClasses(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public void readClassFile(com.sun.tools.javac.code.Symbol$ClassSymbol);
  long adjustFieldFlags(long);
  long adjustMethodFlags(long);
  long adjustClassFlags(long);
  static {};
}
