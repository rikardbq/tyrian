Compiled from "JavaCompiler.java"
public class com.sun.tools.javac.main.JavaCompiler {
  public static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.main.JavaCompiler> compilerKey;
  public com.sun.tools.javac.util.Log log;
  com.sun.tools.javac.util.JCDiagnostic$Factory diagFactory;
  protected com.sun.tools.javac.tree.TreeMaker make;
  protected com.sun.tools.javac.code.ClassFinder finder;
  protected com.sun.tools.javac.jvm.ClassReader reader;
  protected com.sun.tools.javac.jvm.ClassWriter writer;
  protected com.sun.tools.javac.jvm.JNIWriter jniWriter;
  protected com.sun.tools.javac.comp.Enter enter;
  protected com.sun.tools.javac.code.Symtab syms;
  protected com.sun.tools.javac.code.Source source;
  protected com.sun.tools.javac.code.Preview preview;
  protected com.sun.tools.javac.jvm.Gen gen;
  protected com.sun.tools.javac.util.Names names;
  protected com.sun.tools.javac.comp.Attr attr;
  protected com.sun.tools.javac.comp.Analyzer analyzer;
  protected com.sun.tools.javac.comp.Check chk;
  protected com.sun.tools.javac.comp.Flow flow;
  protected com.sun.tools.javac.comp.Modules modules;
  protected com.sun.tools.javac.code.ModuleFinder moduleFinder;
  protected com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  protected com.sun.tools.javac.code.DeferredCompletionFailureHandler dcfh;
  protected com.sun.tools.javac.comp.TransTypes transTypes;
  protected com.sun.tools.javac.comp.Lower lower;
  protected com.sun.tools.javac.comp.Annotate annotate;
  protected final com.sun.tools.javac.util.Name completionFailureName;
  protected com.sun.tools.javac.code.Types types;
  protected javax.tools.JavaFileManager fileManager;
  protected com.sun.tools.javac.parser.ParserFactory parserFactory;
  protected com.sun.tools.javac.api.MultiTaskListener taskListener;
  protected final com.sun.tools.javac.code.Symbol$Completer sourceCompleter;
  protected com.sun.tools.javac.util.Options options;
  protected com.sun.tools.javac.util.Context context;
  protected boolean annotationProcessingOccurred;
  protected boolean implicitSourceFilesRead;
  protected com.sun.tools.javac.comp.CompileStates compileStates;
  public boolean verbose;
  public boolean sourceOutput;
  public boolean lineDebugInfo;
  public boolean genEndPos;
  protected boolean devVerbose;
  protected boolean processPcks;
  protected boolean werror;
  protected boolean explicitAnnotationProcessingRequested;
  protected com.sun.tools.javac.main.JavaCompiler$CompilePolicy compilePolicy;
  protected com.sun.tools.javac.main.JavaCompiler$ImplicitSourcePolicy implicitSourcePolicy;
  public boolean verboseCompilePolicy;
  public com.sun.tools.javac.comp.CompileStates$CompileState shouldStopPolicyIfError;
  public com.sun.tools.javac.comp.CompileStates$CompileState shouldStopPolicyIfNoError;
  public com.sun.tools.javac.comp.Todo todo;
  public com.sun.tools.javac.util.List<java.io.Closeable> closeables;
  protected java.util.Set<javax.tools.JavaFileObject> inputFiles;
  public boolean keepComments;
  public long elapsed_msec;
  boolean processAnnotations;
  com.sun.tools.javac.util.Log$DeferredDiagnosticHandler deferredDiagnosticHandler;
  java.util.HashMap<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>>> desugaredEnvs;
  public static com.sun.tools.javac.main.JavaCompiler instance(com.sun.tools.javac.util.Context);
  public static java.lang.String version();
  public static java.lang.String fullVersion();
  public com.sun.tools.javac.main.JavaCompiler(com.sun.tools.javac.util.Context);
  protected boolean shouldStop(com.sun.tools.javac.comp.CompileStates$CompileState);
  public int errorCount();
  protected final <T> java.util.Queue<T> stopIfError(com.sun.tools.javac.comp.CompileStates$CompileState, java.util.Queue<T>);
  protected final <T> com.sun.tools.javac.util.List<T> stopIfError(com.sun.tools.javac.comp.CompileStates$CompileState, com.sun.tools.javac.util.List<T>);
  public int warningCount();
  public java.lang.CharSequence readSource(javax.tools.JavaFileObject);
  protected com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(javax.tools.JavaFileObject, java.lang.CharSequence);
  protected boolean keepComments();
  public com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String);
  public com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(javax.tools.JavaFileObject);
  public com.sun.tools.javac.code.Symbol resolveBinaryNameOrIdent(java.lang.String);
  public com.sun.tools.javac.code.Symbol resolveBinaryNameOrIdent(com.sun.tools.javac.code.Symbol$ModuleSymbol, java.lang.String);
  public com.sun.tools.javac.code.Symbol resolveIdent(com.sun.tools.javac.code.Symbol$ModuleSymbol, java.lang.String);
  javax.tools.JavaFileObject genCode(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl) throws java.io.IOException;
  javax.tools.JavaFileObject printSource(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl) throws java.io.IOException;
  public void readSourceFile(com.sun.tools.javac.tree.JCTree$JCCompilationUnit, com.sun.tools.javac.code.Symbol$ClassSymbol) throws com.sun.tools.javac.code.Symbol$CompletionFailure;
  public void compile(com.sun.tools.javac.util.List<javax.tools.JavaFileObject>) throws java.lang.Throwable;
  public void compile(java.util.Collection<javax.tools.JavaFileObject>, java.util.Collection<java.lang.String>, java.lang.Iterable<? extends javax.annotation.processing.Processor>, java.util.Collection<java.lang.String>);
  protected void checkReusable();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit> parseFiles(java.lang.Iterable<javax.tools.JavaFileObject>);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit> enterTreesIfNeeded(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit> initModules(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit> enterTrees(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>);
  public void initProcessAnnotations(java.lang.Iterable<? extends javax.annotation.processing.Processor>, java.util.Collection<? extends javax.tools.JavaFileObject>, java.util.Collection<java.lang.String>);
  public void processAnnotations(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>);
  public void processAnnotations(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, java.util.Collection<java.lang.String>);
  boolean explicitAnnotationProcessingRequested();
  static boolean explicitAnnotationProcessingRequested(com.sun.tools.javac.util.Options);
  public void setDeferredDiagnosticHandler(com.sun.tools.javac.util.Log$DeferredDiagnosticHandler);
  public java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> attribute(java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> attribute(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> flow(java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>);
  public java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> flow(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  protected void flow(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>);
  public java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>> desugar(java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>);
  protected void desugar(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>>);
  public void generate(java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>>);
  public void generate(java.util.Queue<com.sun.tools.javac.util.Pair<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCClassDecl>>, java.util.Queue<javax.tools.JavaFileObject>);
  java.util.Map<com.sun.tools.javac.tree.JCTree$JCCompilationUnit, java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>> groupByFile(java.util.Queue<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>>);
  com.sun.tools.javac.tree.JCTree$JCClassDecl removeMethodBodies(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public void reportDeferredDiagnostics();
  public void enterDone();
  public boolean isEnterDone();
  public void close();
  protected void printNote(java.lang.String);
  public void printCount(java.lang.String, int);
  public void newRound();
  static {};
}
