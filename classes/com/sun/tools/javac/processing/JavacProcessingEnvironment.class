Compiled from "JavacProcessingEnvironment.java"
public class com.sun.tools.javac.processing.JavacProcessingEnvironment implements javax.annotation.processing.ProcessingEnvironment,java.io.Closeable {
  final com.sun.tools.javac.util.Log log;
  com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  com.sun.tools.javac.code.Source source;
  public static final java.util.regex.Pattern noMatches;
  public static com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.processing.JavacProcessingEnvironment(com.sun.tools.javac.util.Context);
  public void setProcessors(java.lang.Iterable<? extends javax.annotation.processing.Processor>);
  public <S> java.util.ServiceLoader<S> getServiceLoader(java.lang.Class<S>);
  public boolean atLeastOneProcessor();
  public boolean doProcessing(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ClassSymbol>, java.lang.Iterable<? extends com.sun.tools.javac.code.Symbol$PackageSymbol>, com.sun.tools.javac.util.Log$DeferredDiagnosticHandler);
  public void close();
  public java.util.Map<java.lang.String, java.lang.String> getOptions();
  public javax.annotation.processing.Messager getMessager();
  public com.sun.tools.javac.processing.JavacFiler getFiler();
  public com.sun.tools.javac.model.JavacElements getElementUtils();
  public com.sun.tools.javac.model.JavacTypes getTypeUtils();
  public javax.lang.model.SourceVersion getSourceVersion();
  public java.util.Locale getLocale();
  public java.util.Set<com.sun.tools.javac.code.Symbol$PackageSymbol> getSpecifiedPackages();
  public com.sun.tools.javac.util.Context getContext();
  public java.lang.ClassLoader getProcessorClassLoader();
  public java.lang.String toString();
  public static boolean isValidOptionName(java.lang.String);
  public javax.lang.model.util.Types getTypeUtils();
  public javax.lang.model.util.Elements getElementUtils();
  public javax.annotation.processing.Filer getFiler();
  static {};
}
