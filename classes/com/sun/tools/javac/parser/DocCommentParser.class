Compiled from "DocCommentParser.java"
public class com.sun.tools.javac.parser.DocCommentParser {
  final com.sun.tools.javac.parser.ParserFactory fac;
  final com.sun.tools.javac.util.DiagnosticSource diagSource;
  final com.sun.tools.javac.parser.Tokens$Comment comment;
  final com.sun.tools.javac.tree.DocTreeMaker m;
  final com.sun.tools.javac.util.Names names;
  final boolean isFileContent;
  java.text.BreakIterator sentenceBreaker;
  protected char[] buf;
  protected int bp;
  protected int buflen;
  protected char ch;
  int textStart;
  int lastNonWhite;
  boolean newline;
  java.util.Map<com.sun.tools.javac.util.Name, com.sun.tools.javac.parser.DocCommentParser$TagParser> tagParsers;
  public com.sun.tools.javac.parser.DocCommentParser(com.sun.tools.javac.parser.ParserFactory, com.sun.tools.javac.util.DiagnosticSource, com.sun.tools.javac.parser.Tokens$Comment, boolean);
  public com.sun.tools.javac.parser.DocCommentParser(com.sun.tools.javac.parser.ParserFactory, com.sun.tools.javac.util.DiagnosticSource, com.sun.tools.javac.parser.Tokens$Comment);
  public com.sun.tools.javac.parser.DocCommentParser(com.sun.tools.javac.parser.ParserFactory);
  public com.sun.tools.javac.tree.DCTree$DCDocComment parse();
  void nextChar();
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree> blockContent();
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree> blockContent(com.sun.tools.javac.parser.DocCommentParser$Phase);
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree> blockTags();
  protected com.sun.tools.javac.tree.DCTree blockTag();
  protected void inlineTag(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>);
  protected com.sun.tools.javac.tree.DCTree inlineTag();
  protected com.sun.tools.javac.tree.DCTree$DCReference reference(boolean) throws com.sun.tools.javac.parser.DocCommentParser$ParseException;
  com.sun.tools.javac.tree.JCTree parseType(java.lang.String) throws com.sun.tools.javac.parser.DocCommentParser$ParseException;
  com.sun.tools.javac.util.Name parseMember(java.lang.String) throws com.sun.tools.javac.parser.DocCommentParser$ParseException;
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> parseParams(java.lang.String) throws com.sun.tools.javac.parser.DocCommentParser$ParseException;
  protected com.sun.tools.javac.tree.DCTree$DCIdentifier identifier() throws com.sun.tools.javac.parser.DocCommentParser$ParseException;
  protected com.sun.tools.javac.tree.DCTree$DCText quotedString();
  protected com.sun.tools.javac.tree.DCTree$DCText inlineWord();
  protected void entity(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>);
  protected com.sun.tools.javac.tree.DCTree entity();
  boolean peek(java.lang.String);
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.DCTree> htmlAttrs();
  protected void attrValueChar(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>);
  protected void addPendingText(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.DCTree>, int);
  protected com.sun.tools.javac.tree.DCTree$DCErroneous erroneous(java.lang.String, int);
  protected boolean isIdentifierStart(char);
  protected com.sun.tools.javac.util.Name readIdentifier();
  protected com.sun.tools.javac.util.Name readAttributeName();
  protected com.sun.tools.javac.util.Name readTagName();
  protected boolean isJavaIdentifierStart(char);
  protected com.sun.tools.javac.util.Name readJavaIdentifier();
  protected boolean isDecimalDigit(char);
  protected boolean isHexDigit(char);
  protected boolean isUnquotedAttrValueTerminator(char);
  protected boolean isWhitespace(char);
  protected void skipWhitespace();
  java.lang.String newString(int, int);
}
