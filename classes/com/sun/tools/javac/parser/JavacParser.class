Compiled from "JavacParser.java"
public class com.sun.tools.javac.parser.JavacParser implements com.sun.tools.javac.parser.Parser {
  protected com.sun.tools.javac.parser.Lexer S;
  protected com.sun.tools.javac.tree.TreeMaker F;
  protected final com.sun.tools.javac.parser.JavacParser$AbstractEndPosTable endPosTable;
  boolean allowStringFolding;
  boolean keepDocComments;
  boolean keepLineMap;
  boolean allowThisIdent;
  com.sun.tools.javac.tree.JCTree$JCVariableDecl receiverParam;
  protected static final int EXPR;
  protected static final int TYPE;
  protected static final int NOPARAMS;
  protected static final int TYPEARG;
  protected static final int DIAMOND;
  protected int mode;
  protected int lastmode;
  protected com.sun.tools.javac.parser.Tokens$Token token;
  java.util.ArrayList<com.sun.tools.javac.tree.JCTree$JCExpression[]> odStackSupply;
  java.util.ArrayList<com.sun.tools.javac.parser.Tokens$Token[]> opStackSupply;
  protected com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind> LAX_IDENTIFIER;
  static final boolean $assertionsDisabled;
  protected com.sun.tools.javac.parser.JavacParser(com.sun.tools.javac.parser.ParserFactory, com.sun.tools.javac.parser.Lexer, boolean, boolean, boolean);
  protected com.sun.tools.javac.parser.JavacParser(com.sun.tools.javac.parser.ParserFactory, com.sun.tools.javac.parser.Lexer, boolean, boolean, boolean, boolean);
  protected com.sun.tools.javac.parser.JavacParser$AbstractEndPosTable newEndPosTable(boolean);
  protected com.sun.tools.javac.tree.DocCommentTable newDocCommentTable(boolean, com.sun.tools.javac.parser.ParserFactory);
  public com.sun.tools.javac.parser.Tokens$Token token();
  public void nextToken();
  protected boolean peekToken(com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(int, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(int, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(int, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>);
  protected boolean peekToken(com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>...);
  protected boolean peekToken(int, com.sun.tools.javac.util.Filter<com.sun.tools.javac.parser.Tokens$TokenKind>...);
  protected void skip(boolean, boolean, boolean, boolean);
  protected com.sun.tools.javac.tree.JCTree$JCErroneous syntaxError(int, com.sun.tools.javac.util.JCDiagnostic$Error);
  protected com.sun.tools.javac.tree.JCTree$JCErroneous syntaxError(int, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, com.sun.tools.javac.util.JCDiagnostic$Error);
  protected void reportSyntaxError(int, com.sun.tools.javac.util.JCDiagnostic$Error);
  protected void reportSyntaxError(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.util.JCDiagnostic$Error);
  public void accept(com.sun.tools.javac.parser.Tokens$TokenKind);
  com.sun.tools.javac.tree.JCTree$JCExpression illegal(int);
  com.sun.tools.javac.tree.JCTree$JCExpression illegal();
  protected void checkNoMods(long);
  protected void attach(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.parser.Tokens$Comment);
  protected void setErrorEndPos(int);
  protected void storeEnd(com.sun.tools.javac.tree.JCTree, int);
  protected <T extends com.sun.tools.javac.tree.JCTree> T to(T);
  protected <T extends com.sun.tools.javac.tree.JCTree> T toP(T);
  public int getStartPos(com.sun.tools.javac.tree.JCTree);
  public int getEndPos(com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.util.Name ident();
  protected com.sun.tools.javac.util.Name ident(boolean);
  public com.sun.tools.javac.tree.JCTree$JCExpression qualident(boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression literal(com.sun.tools.javac.util.Name);
  com.sun.tools.javac.tree.JCTree$JCExpression literal(com.sun.tools.javac.util.Name, int);
  boolean isZero(java.lang.String);
  java.lang.String strval(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.tree.JCTree$JCExpression parseExpression();
  public com.sun.tools.javac.tree.JCTree$JCExpression parseType();
  public com.sun.tools.javac.tree.JCTree$JCExpression parseType(boolean);
  public com.sun.tools.javac.tree.JCTree$JCExpression parseType(boolean, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>);
  public com.sun.tools.javac.tree.JCTree$JCExpression unannotatedType(boolean);
  protected com.sun.tools.javac.tree.JCTree$JCExpression term(int);
  com.sun.tools.javac.tree.JCTree$JCExpression term();
  com.sun.tools.javac.tree.JCTree$JCExpression termRest(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression term1();
  com.sun.tools.javac.tree.JCTree$JCExpression term1Rest(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression term2();
  com.sun.tools.javac.tree.JCTree$JCExpression term2Rest(com.sun.tools.javac.tree.JCTree$JCExpression, int);
  protected com.sun.tools.javac.tree.JCTree$JCExpression foldStrings(com.sun.tools.javac.tree.JCTree$JCExpression);
  boolean merge(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree$JCLiteral>, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree$JCExpression>);
  protected com.sun.tools.javac.tree.JCTree$JCExpression term3();
  com.sun.tools.javac.tree.JCTree$JCExpression term3Rest(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  boolean isUnboundMemberRef();
  com.sun.tools.javac.parser.JavacParser$ParensResult analyzeParens();
  com.sun.tools.javac.tree.JCTree$JCExpression lambdaExpressionOrStatement(boolean, boolean, int);
  com.sun.tools.javac.tree.JCTree$JCExpression lambdaExpressionOrStatementRest(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, int);
  com.sun.tools.javac.tree.JCTree$JCExpression lambdaStatement(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, int, int);
  com.sun.tools.javac.tree.JCTree$JCExpression lambdaExpression(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, int);
  com.sun.tools.javac.tree.JCTree$JCExpression superSuffix(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree basicType();
  com.sun.tools.javac.tree.JCTree$JCExpression argumentsOpt(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> arguments();
  com.sun.tools.javac.tree.JCTree$JCMethodInvocation arguments(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression typeArgumentsOpt(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> typeArgumentsOpt();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> typeArgumentsOpt(int);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> typeArguments(boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression typeArgument();
  com.sun.tools.javac.tree.JCTree$JCTypeApply typeArguments(com.sun.tools.javac.tree.JCTree$JCExpression, boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression bracketsSuffix(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression memberReferenceSuffix(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression memberReferenceSuffix(int, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression creator(int, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  com.sun.tools.javac.tree.JCTree$JCExpression innerCreator(int, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression arrayCreatorRest(int, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCNewClass classCreatorRest(int, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression arrayInitializer(int, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> arrayInitializerElements(int, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCExpression variableInitializer();
  com.sun.tools.javac.tree.JCTree$JCExpression parExpression();
  com.sun.tools.javac.tree.JCTree$JCBlock block(int, long);
  public com.sun.tools.javac.tree.JCTree$JCBlock block();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement> blockStatements();
  com.sun.tools.javac.tree.JCTree$JCStatement parseStatementAsBlock();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement> blockStatement();
  public com.sun.tools.javac.tree.JCTree$JCStatement parseSimpleStatement();
  public com.sun.tools.javac.tree.JCTree$JCStatement parseStatement();
  protected com.sun.tools.javac.tree.JCTree$JCCatch catchClause();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> catchTypes();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase> switchBlockStatementGroups();
  protected com.sun.tools.javac.tree.JCTree$JCCase switchBlockStatementGroup();
  <T extends com.sun.tools.javac.util.ListBuffer<? super com.sun.tools.javac.tree.JCTree$JCExpressionStatement>> T moreStatementExpressions(int, com.sun.tools.javac.tree.JCTree$JCExpression, T);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement> forInit();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement> forUpdate();
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation> annotationsOpt(com.sun.tools.javac.tree.JCTree$Tag);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation> typeAnnotationsOpt();
  protected com.sun.tools.javac.tree.JCTree$JCModifiers modifiersOpt();
  protected com.sun.tools.javac.tree.JCTree$JCModifiers modifiersOpt(com.sun.tools.javac.tree.JCTree$JCModifiers);
  com.sun.tools.javac.tree.JCTree$JCAnnotation annotation(int, com.sun.tools.javac.tree.JCTree$Tag);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> annotationFieldValuesOpt();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> annotationFieldValues();
  com.sun.tools.javac.tree.JCTree$JCExpression annotationFieldValue();
  com.sun.tools.javac.tree.JCTree$JCExpression annotationValue();
  public <T extends com.sun.tools.javac.util.ListBuffer<? super com.sun.tools.javac.tree.JCTree$JCVariableDecl>> T variableDeclarators(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, T, boolean);
  protected <T extends com.sun.tools.javac.util.ListBuffer<? super com.sun.tools.javac.tree.JCTree$JCVariableDecl>> T variableDeclaratorsRest(int, com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.Name, boolean, com.sun.tools.javac.parser.Tokens$Comment, T, boolean);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl variableDeclarator(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, boolean, com.sun.tools.javac.parser.Tokens$Comment, boolean);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorRest(int, com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.Name, boolean, com.sun.tools.javac.parser.Tokens$Comment, boolean, boolean);
  boolean isRestrictedLocalVarTypeName(com.sun.tools.javac.tree.JCTree$JCExpression, boolean);
  boolean isRestrictedLocalVarTypeName(com.sun.tools.javac.util.Name, int, boolean);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorId(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl variableDeclaratorId(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, boolean);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> resources();
  protected com.sun.tools.javac.tree.JCTree resource();
  public com.sun.tools.javac.tree.JCTree$JCCompilationUnit parseCompilationUnit();
  com.sun.tools.javac.tree.JCTree$JCModuleDecl moduleDecl(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.source.tree.ModuleTree$ModuleKind, com.sun.tools.javac.parser.Tokens$Comment);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCDirective> moduleDirectiveList();
  protected com.sun.tools.javac.tree.JCTree importDeclaration();
  com.sun.tools.javac.tree.JCTree typeDeclaration(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.parser.Tokens$Comment);
  protected com.sun.tools.javac.tree.JCTree$JCStatement classOrInterfaceOrEnumDeclaration(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.parser.Tokens$Comment);
  protected com.sun.tools.javac.tree.JCTree$JCClassDecl classDeclaration(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.parser.Tokens$Comment);
  com.sun.tools.javac.util.Name typeName();
  protected com.sun.tools.javac.tree.JCTree$JCClassDecl interfaceDeclaration(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.parser.Tokens$Comment);
  protected com.sun.tools.javac.tree.JCTree$JCClassDecl enumDeclaration(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.parser.Tokens$Comment);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> enumBody(com.sun.tools.javac.util.Name);
  com.sun.tools.javac.tree.JCTree enumeratorDeclaration(com.sun.tools.javac.util.Name);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> typeList();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> classOrInterfaceBody(com.sun.tools.javac.util.Name, boolean);
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> classOrInterfaceBodyDeclaration(com.sun.tools.javac.util.Name, boolean);
  protected com.sun.tools.javac.tree.JCTree methodDeclaratorRest(int, com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, boolean, boolean, com.sun.tools.javac.parser.Tokens$Comment);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> qualidentList(boolean);
  protected com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter> typeParametersOpt();
  com.sun.tools.javac.tree.JCTree$JCTypeParameter typeParameter();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> formalParameters();
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> formalParameters(boolean);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> implicitParameters(boolean);
  com.sun.tools.javac.tree.JCTree$JCModifiers optFinal(long);
  protected com.sun.tools.javac.tree.JCTree$JCVariableDecl formalParameter();
  protected com.sun.tools.javac.tree.JCTree$JCVariableDecl formalParameter(boolean);
  protected com.sun.tools.javac.tree.JCTree$JCVariableDecl implicitParameter();
  protected com.sun.tools.javac.tree.JCTree$JCExpression checkExprStat(com.sun.tools.javac.tree.JCTree$JCExpression);
  static int prec(com.sun.tools.javac.parser.Tokens$TokenKind);
  static int earlier(int, int);
  static com.sun.tools.javac.tree.JCTree$Tag optag(com.sun.tools.javac.parser.Tokens$TokenKind);
  static com.sun.tools.javac.tree.JCTree$Tag unoptag(com.sun.tools.javac.parser.Tokens$TokenKind);
  static com.sun.tools.javac.code.TypeTag typetag(com.sun.tools.javac.parser.Tokens$TokenKind);
  void checkSourceLevel(com.sun.tools.javac.code.Source$Feature);
  protected void checkSourceLevel(int, com.sun.tools.javac.code.Source$Feature);
  static {};
}
