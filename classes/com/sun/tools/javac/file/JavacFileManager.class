Compiled from "JavacFileManager.java"
public class com.sun.tools.javac.file.JavacFileManager extends com.sun.tools.javac.file.BaseFileManager implements javax.tools.StandardJavaFileManager {
  protected boolean symbolFileEnabled;
  protected com.sun.tools.javac.file.JavacFileManager$SortFiles sortFiles;
  public static char[] toArray(java.nio.CharBuffer);
  public static void preRegister(com.sun.tools.javac.util.Context);
  public com.sun.tools.javac.file.JavacFileManager(com.sun.tools.javac.util.Context, boolean, java.nio.charset.Charset);
  public void setContext(com.sun.tools.javac.util.Context);
  public void setPathFactory(javax.tools.StandardJavaFileManager$PathFactory);
  public void setSymbolFileEnabled(boolean);
  public boolean isSymbolFileEnabled();
  public javax.tools.JavaFileObject getJavaFileObject(java.lang.String);
  public javax.tools.JavaFileObject getJavaFileObject(java.nio.file.Path);
  public javax.tools.JavaFileObject getFileForOutput(java.lang.String, javax.tools.JavaFileObject$Kind, javax.tools.JavaFileObject) throws java.io.IOException;
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjectsFromStrings(java.lang.Iterable<java.lang.String>);
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjects(java.lang.String...);
  public static void testName(java.lang.String, boolean, boolean);
  synchronized com.sun.tools.javac.file.JavacFileManager$Container getContainer(java.nio.file.Path) throws java.io.IOException;
  public void flush();
  public void close() throws java.io.IOException;
  public java.lang.ClassLoader getClassLoader(javax.tools.JavaFileManager$Location);
  public java.lang.Iterable<javax.tools.JavaFileObject> list(javax.tools.JavaFileManager$Location, java.lang.String, java.util.Set<javax.tools.JavaFileObject$Kind>, boolean) throws java.io.IOException;
  public java.lang.String inferBinaryName(javax.tools.JavaFileManager$Location, javax.tools.JavaFileObject);
  public boolean isSameFile(javax.tools.FileObject, javax.tools.FileObject);
  public boolean hasLocation(javax.tools.JavaFileManager$Location);
  protected boolean hasExplicitLocation(javax.tools.JavaFileManager$Location);
  public javax.tools.JavaFileObject getJavaFileForInput(javax.tools.JavaFileManager$Location, java.lang.String, javax.tools.JavaFileObject$Kind) throws java.io.IOException;
  public javax.tools.FileObject getFileForInput(javax.tools.JavaFileManager$Location, java.lang.String, java.lang.String) throws java.io.IOException;
  public javax.tools.JavaFileObject getJavaFileForOutput(javax.tools.JavaFileManager$Location, java.lang.String, javax.tools.JavaFileObject$Kind, javax.tools.FileObject) throws java.io.IOException;
  public javax.tools.FileObject getFileForOutput(javax.tools.JavaFileManager$Location, java.lang.String, java.lang.String, javax.tools.FileObject) throws java.io.IOException;
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjectsFromFiles(java.lang.Iterable<? extends java.io.File>);
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjectsFromPaths(java.lang.Iterable<? extends java.nio.file.Path>);
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjects(java.io.File...);
  public java.lang.Iterable<? extends javax.tools.JavaFileObject> getJavaFileObjects(java.nio.file.Path...);
  public void setLocation(javax.tools.JavaFileManager$Location, java.lang.Iterable<? extends java.io.File>) throws java.io.IOException;
  public void setLocationFromPaths(javax.tools.JavaFileManager$Location, java.util.Collection<? extends java.nio.file.Path>) throws java.io.IOException;
  public java.lang.Iterable<? extends java.io.File> getLocation(javax.tools.JavaFileManager$Location);
  public java.lang.Iterable<? extends java.nio.file.Path> getLocationAsPaths(javax.tools.JavaFileManager$Location);
  public boolean contains(javax.tools.JavaFileManager$Location, javax.tools.FileObject) throws java.io.IOException;
  public javax.tools.JavaFileManager$Location getLocationForModule(javax.tools.JavaFileManager$Location, java.lang.String) throws java.io.IOException;
  public <S> java.util.ServiceLoader<S> getServiceLoader(javax.tools.JavaFileManager$Location, java.lang.Class<S>) throws java.io.IOException;
  public javax.tools.JavaFileManager$Location getLocationForModule(javax.tools.JavaFileManager$Location, javax.tools.JavaFileObject) throws java.io.IOException;
  public void setLocationForModule(javax.tools.JavaFileManager$Location, java.lang.String, java.util.Collection<? extends java.nio.file.Path>) throws java.io.IOException;
  public java.lang.String inferModuleName(javax.tools.JavaFileManager$Location);
  public java.lang.Iterable<java.util.Set<javax.tools.JavaFileManager$Location>> listLocationsForModules(javax.tools.JavaFileManager$Location) throws java.io.IOException;
  public java.nio.file.Path asPath(javax.tools.FileObject);
  protected static boolean isRelativeUri(java.net.URI);
  protected static boolean isRelativeUri(java.lang.String);
  public static java.lang.String getRelativeName(java.io.File);
  public static java.lang.String getMessage(java.io.IOException);
  static {};
}
