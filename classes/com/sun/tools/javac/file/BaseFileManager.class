Compiled from "BaseFileManager.java"
public abstract class com.sun.tools.javac.file.BaseFileManager implements javax.tools.JavaFileManager {
  public com.sun.tools.javac.util.Log log;
  protected java.nio.charset.Charset charset;
  protected com.sun.tools.javac.util.Options options;
  protected java.lang.String classLoaderClass;
  protected final com.sun.tools.javac.file.Locations locations;
  public boolean autoClose;
  protected long deferredCloseTimeout;
  protected java.lang.String multiReleaseValue;
  protected final java.util.Map<javax.tools.JavaFileObject, com.sun.tools.javac.file.BaseFileManager$ContentCacheEntry> contentCache;
  protected com.sun.tools.javac.file.BaseFileManager(java.nio.charset.Charset);
  public void setContext(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.file.Locations createLocations();
  protected void deferredClose();
  synchronized void updateLastUsedTime();
  protected java.lang.ClassLoader getClassLoader(java.net.URL[]);
  public boolean isDefaultBootClassPath();
  public boolean handleOption(java.lang.String, java.util.Iterator<java.lang.String>);
  public int isSupportedOption(java.lang.String);
  public boolean handleOption(com.sun.tools.javac.main.Option, java.lang.String);
  public boolean handleOptions(java.util.Map<com.sun.tools.javac.main.Option, java.lang.String>);
  public java.lang.String getEncodingName();
  public java.nio.CharBuffer decode(java.nio.ByteBuffer, boolean);
  public java.nio.charset.CharsetDecoder getDecoder(java.lang.String, boolean);
  public java.nio.ByteBuffer makeByteBuffer(java.io.InputStream) throws java.io.IOException;
  public void recycleByteBuffer(java.nio.ByteBuffer);
  public java.nio.CharBuffer getCachedContent(javax.tools.JavaFileObject);
  public void cache(javax.tools.JavaFileObject, java.nio.CharBuffer);
  public void flushCache(javax.tools.JavaFileObject);
  public static javax.tools.JavaFileObject$Kind getKind(java.nio.file.Path);
  public static javax.tools.JavaFileObject$Kind getKind(java.lang.String);
  protected static <T> T nullCheck(T);
  protected static <T> java.util.Collection<T> nullCheck(java.util.Collection<T>);
  static {};
}
