Compiled from "Symbol.java"
public abstract class com.sun.tools.javac.code.Symbol extends com.sun.tools.javac.code.AnnoConstruct implements javax.lang.model.element.Element {
  public com.sun.tools.javac.code.Kinds$Kind kind;
  public long flags_field;
  public com.sun.tools.javac.util.Name name;
  public com.sun.tools.javac.code.Type type;
  public com.sun.tools.javac.code.Symbol owner;
  public com.sun.tools.javac.code.Symbol$Completer completer;
  public com.sun.tools.javac.code.Type erasure_field;
  protected com.sun.tools.javac.code.SymbolMetadata metadata;
  public long flags();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound> getRawAttributes();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound> getRawTypeAttributes();
  public com.sun.tools.javac.code.Attribute$Compound attribute(com.sun.tools.javac.code.Symbol);
  public boolean annotationsPendingCompletion();
  public void appendAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>);
  public void appendClassInitTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public void appendInitTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public void appendUniqueTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound> getClassInitTypeAttributes();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound> getInitTypeAttributes();
  public void setInitTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public void setClassInitTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound> getDeclarationAttributes();
  public boolean hasAnnotations();
  public boolean hasTypeAnnotations();
  public boolean isCompleted();
  public void prependAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>);
  public void resetAnnotations();
  public void setAttributes(com.sun.tools.javac.code.Symbol);
  public void setDeclarationAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>);
  public void setTypeAttributes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public com.sun.tools.javac.code.SymbolMetadata getMetadata();
  public com.sun.tools.javac.code.Symbol(com.sun.tools.javac.code.Kinds$Kind, long, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.code.Symbol clone(com.sun.tools.javac.code.Symbol);
  public <R, P> R accept(com.sun.tools.javac.code.Symbol$Visitor<R, P>, P);
  public java.lang.String toString();
  public com.sun.tools.javac.code.Symbol location();
  public com.sun.tools.javac.code.Symbol location(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Types);
  public com.sun.tools.javac.code.Symbol baseSymbol();
  public com.sun.tools.javac.code.Type erasure(com.sun.tools.javac.code.Types);
  public com.sun.tools.javac.code.Type externalType(com.sun.tools.javac.code.Types);
  public boolean isDeprecated();
  public boolean hasDeprecatedAnnotation();
  public boolean isDeprecatedForRemoval();
  public boolean isDeprecatableViaAnnotation();
  public boolean isStatic();
  public boolean isInterface();
  public boolean isPrivate();
  public boolean isEnum();
  public boolean isLocal();
  public boolean isAnonymous();
  public boolean isConstructor();
  public com.sun.tools.javac.util.Name getQualifiedName();
  public com.sun.tools.javac.util.Name flatName();
  public com.sun.tools.javac.code.Scope$WriteableScope members();
  public boolean isInner();
  public boolean hasOuterInstance();
  public com.sun.tools.javac.code.Symbol$ClassSymbol enclClass();
  public com.sun.tools.javac.code.Symbol$ClassSymbol outermostClass();
  public com.sun.tools.javac.code.Symbol$PackageSymbol packge();
  public boolean isSubClass(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Types);
  public boolean isMemberOf(com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.code.Types);
  public boolean isEnclosedBy(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public final boolean isAccessibleIn(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Types);
  public boolean isInheritedIn(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Types);
  public com.sun.tools.javac.code.Symbol asMemberOf(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Types);
  public boolean overrides(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.code.Types, boolean);
  public void complete() throws com.sun.tools.javac.code.Symbol$CompletionFailure;
  public void apiComplete() throws com.sun.tools.javac.code.Symbol$CompletionFailure;
  public boolean exists();
  public com.sun.tools.javac.code.Type asType();
  public com.sun.tools.javac.code.Symbol getEnclosingElement();
  public javax.lang.model.element.ElementKind getKind();
  public java.util.Set<javax.lang.model.element.Modifier> getModifiers();
  public com.sun.tools.javac.util.Name getSimpleName();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound> getAnnotationMirrors();
  public java.util.List<com.sun.tools.javac.code.Symbol> getEnclosedElements();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$TypeVariableSymbol> getTypeParameters();
  public java.util.List getAnnotationMirrors();
  public javax.lang.model.element.Element getEnclosingElement();
  public javax.lang.model.element.Name getSimpleName();
  public javax.lang.model.type.TypeMirror asType();
}
