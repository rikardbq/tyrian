Compiled from "Scope.java"
public abstract class com.sun.tools.javac.code.Scope {
  public final com.sun.tools.javac.code.Symbol owner;
  com.sun.tools.javac.code.Scope$ScopeListenerList listeners;
  protected com.sun.tools.javac.code.Scope(com.sun.tools.javac.code.Symbol);
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbols();
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbols(com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>);
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbols(com.sun.tools.javac.code.Scope$LookupKind);
  public abstract java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbols(com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>, com.sun.tools.javac.code.Scope$LookupKind);
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbolsByName(com.sun.tools.javac.util.Name);
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbolsByName(com.sun.tools.javac.util.Name, com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>);
  public final java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbolsByName(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Scope$LookupKind);
  public abstract java.lang.Iterable<com.sun.tools.javac.code.Symbol> getSymbolsByName(com.sun.tools.javac.util.Name, com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>, com.sun.tools.javac.code.Scope$LookupKind);
  public final com.sun.tools.javac.code.Symbol findFirst(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol findFirst(com.sun.tools.javac.util.Name, com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>);
  public boolean anyMatch(com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Symbol>);
  public boolean includes(com.sun.tools.javac.code.Symbol);
  public boolean includes(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Scope$LookupKind);
  public boolean isEmpty();
  public abstract com.sun.tools.javac.code.Scope getOrigin(com.sun.tools.javac.code.Symbol);
  public abstract boolean isStaticallyImported(com.sun.tools.javac.code.Symbol);
  static {};
}
