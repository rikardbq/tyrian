Compiled from "Symtab.java"
public class com.sun.tools.javac.code.Symtab {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.code.Symtab> symtabKey;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType byteType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType charType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType shortType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType intType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType longType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType floatType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType doubleType;
  public final com.sun.tools.javac.code.Type$JCPrimitiveType booleanType;
  public final com.sun.tools.javac.code.Type botType;
  public final com.sun.tools.javac.code.Type$JCVoidType voidType;
  public final com.sun.tools.javac.code.Symbol$ModuleSymbol unnamedModule;
  public final com.sun.tools.javac.code.Symbol$ModuleSymbol errModule;
  public final com.sun.tools.javac.code.Symbol$ModuleSymbol noModule;
  public final com.sun.tools.javac.code.Symbol$PackageSymbol rootPackage;
  public final com.sun.tools.javac.code.Symbol$TypeSymbol noSymbol;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol errSymbol;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol unknownSymbol;
  public final com.sun.tools.javac.code.Type errType;
  public final com.sun.tools.javac.code.Type unknownType;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol arrayClass;
  public final com.sun.tools.javac.code.Symbol$MethodSymbol arrayCloneMethod;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol boundClass;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol methodClass;
  public final com.sun.tools.javac.code.Symbol$ModuleSymbol java_base;
  public final com.sun.tools.javac.code.Type objectType;
  public final com.sun.tools.javac.code.Type objectsType;
  public final com.sun.tools.javac.code.Type classType;
  public final com.sun.tools.javac.code.Type classLoaderType;
  public final com.sun.tools.javac.code.Type stringType;
  public final com.sun.tools.javac.code.Type stringBufferType;
  public final com.sun.tools.javac.code.Type stringBuilderType;
  public final com.sun.tools.javac.code.Type cloneableType;
  public final com.sun.tools.javac.code.Type serializableType;
  public final com.sun.tools.javac.code.Type serializedLambdaType;
  public final com.sun.tools.javac.code.Type varHandleType;
  public final com.sun.tools.javac.code.Type methodHandleType;
  public final com.sun.tools.javac.code.Type methodHandleLookupType;
  public final com.sun.tools.javac.code.Type methodTypeType;
  public final com.sun.tools.javac.code.Type nativeHeaderType;
  public final com.sun.tools.javac.code.Type throwableType;
  public final com.sun.tools.javac.code.Type errorType;
  public final com.sun.tools.javac.code.Type interruptedExceptionType;
  public final com.sun.tools.javac.code.Type illegalArgumentExceptionType;
  public final com.sun.tools.javac.code.Type exceptionType;
  public final com.sun.tools.javac.code.Type runtimeExceptionType;
  public final com.sun.tools.javac.code.Type classNotFoundExceptionType;
  public final com.sun.tools.javac.code.Type noClassDefFoundErrorType;
  public final com.sun.tools.javac.code.Type noSuchFieldErrorType;
  public final com.sun.tools.javac.code.Type assertionErrorType;
  public final com.sun.tools.javac.code.Type cloneNotSupportedExceptionType;
  public final com.sun.tools.javac.code.Type annotationType;
  public final com.sun.tools.javac.code.Symbol$TypeSymbol enumSym;
  public final com.sun.tools.javac.code.Type listType;
  public final com.sun.tools.javac.code.Type collectionsType;
  public final com.sun.tools.javac.code.Type comparableType;
  public final com.sun.tools.javac.code.Type comparatorType;
  public final com.sun.tools.javac.code.Type arraysType;
  public final com.sun.tools.javac.code.Type iterableType;
  public final com.sun.tools.javac.code.Type iteratorType;
  public final com.sun.tools.javac.code.Type annotationTargetType;
  public final com.sun.tools.javac.code.Type overrideType;
  public final com.sun.tools.javac.code.Type retentionType;
  public final com.sun.tools.javac.code.Type deprecatedType;
  public final com.sun.tools.javac.code.Type suppressWarningsType;
  public final com.sun.tools.javac.code.Type supplierType;
  public final com.sun.tools.javac.code.Type inheritedType;
  public final com.sun.tools.javac.code.Type profileType;
  public final com.sun.tools.javac.code.Type proprietaryType;
  public final com.sun.tools.javac.code.Type systemType;
  public final com.sun.tools.javac.code.Type autoCloseableType;
  public final com.sun.tools.javac.code.Type trustMeType;
  public final com.sun.tools.javac.code.Type lambdaMetafactory;
  public final com.sun.tools.javac.code.Type stringConcatFactory;
  public final com.sun.tools.javac.code.Type repeatableType;
  public final com.sun.tools.javac.code.Type documentedType;
  public final com.sun.tools.javac.code.Type elementTypeType;
  public final com.sun.tools.javac.code.Type functionalInterfaceType;
  public final com.sun.tools.javac.code.Symbol$VarSymbol lengthVar;
  public final com.sun.tools.javac.code.Symbol$MethodSymbol enumFinalFinalize;
  public final com.sun.tools.javac.code.Symbol$MethodSymbol autoCloseableClose;
  public final com.sun.tools.javac.code.Type[] typeOfTag;
  public final com.sun.tools.javac.util.Name[] boxedName;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol predefClass;
  public static com.sun.tools.javac.code.Symtab instance(com.sun.tools.javac.util.Context);
  public com.sun.tools.javac.code.Symbol$VarSymbol getClassField(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Types);
  public void initType(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol$ClassSymbol);
  public void initType(com.sun.tools.javac.code.Type, java.lang.String);
  public void initType(com.sun.tools.javac.code.Type, java.lang.String, java.lang.String);
  public void synthesizeEmptyInterfaceIfMissing(com.sun.tools.javac.code.Type);
  public void synthesizeBoxTypeIfMissing(com.sun.tools.javac.code.Type);
  protected com.sun.tools.javac.code.Symtab(com.sun.tools.javac.util.Context) throws com.sun.tools.javac.code.Symbol$CompletionFailure;
  public com.sun.tools.javac.code.Symbol$ClassSymbol defineClass(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.code.Symbol$ClassSymbol enterClass(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  public com.sun.tools.javac.code.Symbol$ClassSymbol getClass(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$PackageSymbol lookupPackage(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public void removeClass(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public java.lang.Iterable<com.sun.tools.javac.code.Symbol$ClassSymbol> getAllClasses();
  public com.sun.tools.javac.code.Symbol$ClassSymbol enterClass(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public boolean packageExists(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$PackageSymbol enterPackage(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$PackageSymbol getPackage(com.sun.tools.javac.code.Symbol$ModuleSymbol, com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$ModuleSymbol enterModule(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$ModuleSymbol getModule(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.code.Symbol$ModuleSymbol inferModule(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$ModuleSymbol> listPackageModules(com.sun.tools.javac.util.Name);
  public java.util.Collection<com.sun.tools.javac.code.Symbol$ModuleSymbol> getAllModules();
  public java.lang.Iterable<com.sun.tools.javac.code.Symbol$ClassSymbol> getClassesForName(com.sun.tools.javac.util.Name);
  public java.lang.Iterable<com.sun.tools.javac.code.Symbol$PackageSymbol> getPackagesForName(com.sun.tools.javac.util.Name);
  static {};
}
