Compiled from "Type.java"
public abstract class com.sun.tools.javac.code.Type extends com.sun.tools.javac.code.AnnoConstruct implements javax.lang.model.type.TypeMirror {
  protected final com.sun.tools.javac.code.TypeMetadata metadata;
  public static final com.sun.tools.javac.code.Type$JCNoType noType;
  public static final com.sun.tools.javac.code.Type$JCNoType recoveryType;
  public static final com.sun.tools.javac.code.Type$JCNoType stuckType;
  public static boolean moreInfo;
  public com.sun.tools.javac.code.Symbol$TypeSymbol tsym;
  public com.sun.tools.javac.code.TypeMetadata getMetadata();
  public com.sun.tools.javac.code.TypeMetadata$Entry getMetadataOfKind(com.sun.tools.javac.code.TypeMetadata$Entry$Kind);
  public boolean hasTag(com.sun.tools.javac.code.TypeTag);
  public abstract com.sun.tools.javac.code.TypeTag getTag();
  public boolean isNumeric();
  public boolean isIntegral();
  public boolean isPrimitive();
  public boolean isPrimitiveOrVoid();
  public boolean isReference();
  public boolean isNullOrReference();
  public boolean isPartial();
  public java.lang.Object constValue();
  public boolean isFalse();
  public boolean isTrue();
  public com.sun.tools.javac.code.Type getModelType();
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> getModelTypes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public com.sun.tools.javac.code.Type getOriginalType();
  public <R, S> R accept(com.sun.tools.javac.code.Type$Visitor<R, S>, S);
  public com.sun.tools.javac.code.Type(com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.code.TypeMetadata);
  public <Z> com.sun.tools.javac.code.Type map(com.sun.tools.javac.code.Types$TypeMapping<Z>, Z);
  public <Z> com.sun.tools.javac.code.Type map(com.sun.tools.javac.code.Types$TypeMapping<Z>);
  public com.sun.tools.javac.code.Type constType(java.lang.Object);
  public com.sun.tools.javac.code.Type baseType();
  protected com.sun.tools.javac.code.Type typeNoMetadata();
  public abstract com.sun.tools.javac.code.Type cloneWithMetadata(com.sun.tools.javac.code.TypeMetadata);
  protected boolean needsStripping();
  public com.sun.tools.javac.code.Type stripMetadataIfNeeded();
  public com.sun.tools.javac.code.Type stripMetadata();
  public com.sun.tools.javac.code.Type annotatedType(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound>);
  public boolean isAnnotated();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$TypeCompound> getAnnotationMirrors();
  public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A>);
  public <A extends java.lang.annotation.Annotation> A[] getAnnotationsByType(java.lang.Class<A>);
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> baseTypes(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  protected void appendAnnotationsString(java.lang.StringBuilder, boolean);
  protected void appendAnnotationsString(java.lang.StringBuilder);
  public java.lang.String toString();
  public static java.lang.String toString(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public java.lang.String stringValue();
  public boolean equals(java.lang.Object);
  public boolean equalsIgnoreMetadata(com.sun.tools.javac.code.Type);
  public int hashCode();
  public java.lang.String argtypes(boolean);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> getTypeArguments();
  public com.sun.tools.javac.code.Type getEnclosingType();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> getParameterTypes();
  public com.sun.tools.javac.code.Type getReturnType();
  public com.sun.tools.javac.code.Type getReceiverType();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> getThrownTypes();
  public com.sun.tools.javac.code.Type getUpperBound();
  public com.sun.tools.javac.code.Type getLowerBound();
  public com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> allparams();
  public boolean isErroneous();
  public static boolean isErroneous(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public boolean isParameterized();
  public boolean isRaw();
  public boolean isCompound();
  public boolean isIntersection();
  public boolean isUnion();
  public boolean isInterface();
  public boolean isFinal();
  public boolean contains(com.sun.tools.javac.code.Type);
  public static boolean contains(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type);
  public boolean containsAny(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public static boolean containsAny(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> filter(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.Filter<com.sun.tools.javac.code.Type>);
  public boolean isSuperBound();
  public boolean isExtendsBound();
  public boolean isUnbound();
  public com.sun.tools.javac.code.Type withTypeVar(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.code.Type$MethodType asMethodType();
  public void complete();
  public com.sun.tools.javac.code.Symbol$TypeSymbol asElement();
  public javax.lang.model.type.TypeKind getKind();
  public <R, P> R accept(javax.lang.model.type.TypeVisitor<R, P>, P);
  public java.util.List getAnnotationMirrors();
  static {};
}
