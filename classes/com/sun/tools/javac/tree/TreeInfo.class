Compiled from "TreeInfo.java"
public class com.sun.tools.javac.tree.TreeInfo {
  public static final int notExpression;
  public static final int noPrec;
  public static final int assignPrec;
  public static final int assignopPrec;
  public static final int condPrec;
  public static final int orPrec;
  public static final int andPrec;
  public static final int bitorPrec;
  public static final int bitxorPrec;
  public static final int bitandPrec;
  public static final int eqPrec;
  public static final int ordPrec;
  public static final int shiftPrec;
  public static final int addPrec;
  public static final int mulPrec;
  public static final int prefixPrec;
  public static final int postfixPrec;
  public static final int precCount;
  public com.sun.tools.javac.tree.TreeInfo();
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> args(com.sun.tools.javac.tree.JCTree);
  public static boolean isConstructor(com.sun.tools.javac.tree.JCTree);
  public static boolean isReceiverParam(com.sun.tools.javac.tree.JCTree);
  public static boolean hasConstructors(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  public static boolean isMultiCatch(com.sun.tools.javac.tree.JCTree$JCCatch);
  public static boolean isSyntheticInit(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.util.Name calledMethodName(com.sun.tools.javac.tree.JCTree);
  public static boolean isSelfCall(com.sun.tools.javac.tree.JCTree);
  public static boolean isThisQualifier(com.sun.tools.javac.tree.JCTree);
  public static boolean isIdentOrThisDotIdent(com.sun.tools.javac.tree.JCTree);
  public static boolean isSuperCall(com.sun.tools.javac.tree.JCTree);
  public static boolean isInitialConstructor(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.tree.JCTree$JCMethodInvocation firstConstructorCall(com.sun.tools.javac.tree.JCTree);
  public static boolean isDiamond(com.sun.tools.javac.tree.JCTree);
  public static boolean isEnumInit(com.sun.tools.javac.tree.JCTree);
  public static void setPolyKind(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCPolyExpression$PolyKind);
  public static void setVarargsElement(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type);
  public static boolean isExpressionStatement(com.sun.tools.javac.tree.JCTree$JCExpression);
  public static boolean isStatement(com.sun.tools.javac.tree.JCTree);
  public static boolean isStaticSelector(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.util.Names);
  public static boolean isNull(com.sun.tools.javac.tree.JCTree);
  public static boolean isInAnnotation(com.sun.tools.javac.comp.Env<?>, com.sun.tools.javac.tree.JCTree);
  public static java.lang.String getCommentText(com.sun.tools.javac.comp.Env<?>, com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.tree.DCTree$DCDocComment getCommentTree(com.sun.tools.javac.comp.Env<?>, com.sun.tools.javac.tree.JCTree);
  public static int firstStatPos(com.sun.tools.javac.tree.JCTree);
  public static int endPos(com.sun.tools.javac.tree.JCTree);
  public static int getStartPos(com.sun.tools.javac.tree.JCTree);
  public static int getEndPos(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.EndPosTable);
  public static com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition diagEndPos(com.sun.tools.javac.tree.JCTree);
  public static int finalizerPos(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.TreeInfo$PosKind);
  public static int positionFor(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition diagnosticPositionFor(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.tree.JCTree declarationFor(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> scopeFor(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public static com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> scopeFor(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> pathFor(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public static com.sun.tools.javac.tree.JCTree referencedStatement(com.sun.tools.javac.tree.JCTree$JCLabeledStatement);
  public static com.sun.tools.javac.tree.JCTree$JCExpression skipParens(com.sun.tools.javac.tree.JCTree$JCExpression);
  public static com.sun.tools.javac.tree.JCTree skipParens(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> types(com.sun.tools.javac.util.List<? extends com.sun.tools.javac.tree.JCTree>);
  public static com.sun.tools.javac.util.Name name(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.util.Name fullName(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.code.Symbol symbolFor(com.sun.tools.javac.tree.JCTree);
  public static boolean isDeclaration(com.sun.tools.javac.tree.JCTree);
  public static com.sun.tools.javac.code.Symbol symbol(com.sun.tools.javac.tree.JCTree);
  public static boolean nonstaticSelect(com.sun.tools.javac.tree.JCTree);
  public static void setSymbol(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol);
  public static long flags(com.sun.tools.javac.tree.JCTree);
  public static long firstFlag(long);
  public static java.lang.String flagNames(long);
  public static int opPrec(com.sun.tools.javac.tree.JCTree$Tag);
  static com.sun.source.tree.Tree$Kind tagToKind(com.sun.tools.javac.tree.JCTree$Tag);
  public static com.sun.tools.javac.tree.JCTree$JCExpression typeIn(com.sun.tools.javac.tree.JCTree$JCExpression);
  public static com.sun.tools.javac.tree.JCTree innermostType(com.sun.tools.javac.tree.JCTree, boolean);
  public static boolean containsTypeAnnotation(com.sun.tools.javac.tree.JCTree);
  public static boolean isModuleInfo(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public static com.sun.tools.javac.tree.JCTree$JCModuleDecl getModule(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public static boolean isPackageInfo(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
}
