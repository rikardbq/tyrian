Compiled from "TreeMaker.java"
public class com.sun.tools.javac.tree.TreeMaker implements com.sun.tools.javac.tree.JCTree$Factory {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.tree.TreeMaker> treeMakerKey;
  public int pos;
  public com.sun.tools.javac.tree.JCTree$JCCompilationUnit toplevel;
  com.sun.tools.javac.util.Names names;
  com.sun.tools.javac.code.Types types;
  com.sun.tools.javac.code.Symtab syms;
  com.sun.tools.javac.tree.TreeMaker$AnnotationBuilder annotationBuilder;
  public static com.sun.tools.javac.tree.TreeMaker instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.tree.TreeMaker(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.tree.TreeMaker(com.sun.tools.javac.tree.JCTree$JCCompilationUnit, com.sun.tools.javac.util.Names, com.sun.tools.javac.code.Types, com.sun.tools.javac.code.Symtab);
  public com.sun.tools.javac.tree.TreeMaker forToplevel(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public com.sun.tools.javac.tree.TreeMaker at(int);
  public com.sun.tools.javac.tree.TreeMaker at(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition);
  public com.sun.tools.javac.tree.JCTree$JCCompilationUnit TopLevel(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  public com.sun.tools.javac.tree.JCTree$JCPackageDecl PackageDecl(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCImport Import(com.sun.tools.javac.tree.JCTree, boolean);
  public com.sun.tools.javac.tree.JCTree$JCClassDecl ClassDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  public com.sun.tools.javac.tree.JCTree$JCMethodDecl MethodDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.util.Name, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCBlock, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCMethodDecl MethodDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.util.Name, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, com.sun.tools.javac.tree.JCTree$JCVariableDecl, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCBlock, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCVariableDecl VarDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.util.Name, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCVariableDecl ReceiverVarDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCSkip Skip();
  public com.sun.tools.javac.tree.JCTree$JCBlock Block(long, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>);
  public com.sun.tools.javac.tree.JCTree$JCDoWhileLoop DoLoop(com.sun.tools.javac.tree.JCTree$JCStatement, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCWhileLoop WhileLoop(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCStatement);
  public com.sun.tools.javac.tree.JCTree$JCForLoop ForLoop(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpressionStatement>, com.sun.tools.javac.tree.JCTree$JCStatement);
  public com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop ForeachLoop(com.sun.tools.javac.tree.JCTree$JCVariableDecl, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCStatement);
  public com.sun.tools.javac.tree.JCTree$JCLabeledStatement Labelled(com.sun.tools.javac.util.Name, com.sun.tools.javac.tree.JCTree$JCStatement);
  public com.sun.tools.javac.tree.JCTree$JCSwitch Switch(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCase>);
  public com.sun.tools.javac.tree.JCTree$JCCase Case(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCStatement>);
  public com.sun.tools.javac.tree.JCTree$JCSynchronized Synchronized(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCTry Try(com.sun.tools.javac.tree.JCTree$JCBlock, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCTry Try(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>, com.sun.tools.javac.tree.JCTree$JCBlock, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCatch>, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCCatch Catch(com.sun.tools.javac.tree.JCTree$JCVariableDecl, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCConditional Conditional(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCIf If(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCStatement, com.sun.tools.javac.tree.JCTree$JCStatement);
  public com.sun.tools.javac.tree.JCTree$JCExpressionStatement Exec(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCBreak Break(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.tree.JCTree$JCContinue Continue(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.tree.JCTree$JCReturn Return(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCThrow Throw(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCAssert Assert(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCMethodInvocation Apply(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCNewClass NewClass(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public com.sun.tools.javac.tree.JCTree$JCNewClass SpeculativeNewClass(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.tree.JCTree$JCClassDecl, boolean);
  public com.sun.tools.javac.tree.JCTree$JCNewArray NewArray(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCLambda Lambda(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.tree.JCTree$JCParens Parens(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCAssign Assign(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCAssignOp Assignop(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.tree.JCTree$JCUnary Unary(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCBinary Binary(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCTypeCast TypeCast(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCInstanceOf TypeTest(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.tree.JCTree$JCArrayAccess Indexed(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCFieldAccess Select(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.tree.JCTree$JCMemberReference Reference(com.sun.source.tree.MemberReferenceTree$ReferenceMode, com.sun.tools.javac.util.Name, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCIdent Ident(com.sun.tools.javac.util.Name);
  public com.sun.tools.javac.tree.JCTree$JCLiteral Literal(com.sun.tools.javac.code.TypeTag, java.lang.Object);
  public com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree TypeIdent(com.sun.tools.javac.code.TypeTag);
  public com.sun.tools.javac.tree.JCTree$JCArrayTypeTree TypeArray(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCTypeApply TypeApply(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCTypeUnion TypeUnion(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCTypeIntersection TypeIntersection(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCTypeParameter TypeParameter(com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCTypeParameter TypeParameter(com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>);
  public com.sun.tools.javac.tree.JCTree$JCWildcard Wildcard(com.sun.tools.javac.tree.JCTree$TypeBoundKind, com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.tree.JCTree$TypeBoundKind TypeBoundKind(com.sun.tools.javac.code.BoundKind);
  public com.sun.tools.javac.tree.JCTree$JCAnnotation Annotation(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCAnnotation TypeAnnotation(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCModifiers Modifiers(long, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>);
  public com.sun.tools.javac.tree.JCTree$JCModifiers Modifiers(long);
  public com.sun.tools.javac.tree.JCTree$JCModuleDecl ModuleDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.source.tree.ModuleTree$ModuleKind, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCDirective>);
  public com.sun.tools.javac.tree.JCTree$JCExports Exports(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCOpens Opens(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCProvides Provides(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCRequires Requires(boolean, boolean, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCUses Uses(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCAnnotatedType AnnotatedType(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCErroneous Erroneous();
  public com.sun.tools.javac.tree.JCTree$JCErroneous Erroneous(com.sun.tools.javac.util.List<? extends com.sun.tools.javac.tree.JCTree>);
  public com.sun.tools.javac.tree.JCTree$LetExpr LetExpr(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCClassDecl AnonymousClassDef(com.sun.tools.javac.tree.JCTree$JCModifiers, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  public com.sun.tools.javac.tree.JCTree$LetExpr LetExpr(com.sun.tools.javac.tree.JCTree$JCVariableDecl, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCIdent Ident(com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.tree.JCTree$JCExpression Select(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.tree.JCTree$JCExpression QualIdent(com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.tree.JCTree$JCExpression Ident(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> Idents(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl>);
  public com.sun.tools.javac.tree.JCTree$JCExpression This(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.tree.JCTree$JCExpression QualThis(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.tree.JCTree$JCExpression ClassLiteral(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public com.sun.tools.javac.tree.JCTree$JCExpression ClassLiteral(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.tree.JCTree$JCIdent Super(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol$TypeSymbol);
  public com.sun.tools.javac.tree.JCTree$JCMethodInvocation App(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCMethodInvocation App(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCExpression Create(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public com.sun.tools.javac.tree.JCTree$JCExpression Type(com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> Types(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public com.sun.tools.javac.tree.JCTree$JCVariableDecl VarDef(com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation> Annotations(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Attribute$Compound>);
  public com.sun.tools.javac.tree.JCTree$JCLiteral Literal(java.lang.Object);
  public com.sun.tools.javac.tree.JCTree$JCAnnotation Annotation(com.sun.tools.javac.code.Attribute);
  public com.sun.tools.javac.tree.JCTree$JCAnnotation TypeAnnotation(com.sun.tools.javac.code.Attribute);
  public com.sun.tools.javac.tree.JCTree$JCMethodDecl MethodDef(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCMethodDecl MethodDef(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.tree.JCTree$JCBlock);
  public com.sun.tools.javac.tree.JCTree$JCTypeParameter TypeParam(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Type$TypeVar);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter> TypeParams(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public com.sun.tools.javac.tree.JCTree$JCVariableDecl Param(com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> Params(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.tree.JCTree$JCStatement Call(com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCStatement Assignment(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCArrayAccess Indexed(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree$JCExpression);
  public com.sun.tools.javac.tree.JCTree$JCTypeCast TypeCast(com.sun.tools.javac.code.Type, com.sun.tools.javac.tree.JCTree$JCExpression);
  boolean isUnqualifiable(com.sun.tools.javac.code.Symbol);
  public com.sun.tools.javac.util.Name paramName(int);
  public com.sun.tools.javac.util.Name typaramName(int);
  static {};
}
