Compiled from "TreeCopier.java"
public class com.sun.tools.javac.tree.TreeCopier<P> implements com.sun.source.tree.TreeVisitor<com.sun.tools.javac.tree.JCTree, P> {
  public com.sun.tools.javac.tree.TreeCopier(com.sun.tools.javac.tree.TreeMaker);
  public <T extends com.sun.tools.javac.tree.JCTree> T copy(T);
  public <T extends com.sun.tools.javac.tree.JCTree> T copy(T, P);
  public <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> copy(com.sun.tools.javac.util.List<T>);
  public <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> copy(com.sun.tools.javac.util.List<T>, P);
  public com.sun.tools.javac.tree.JCTree visitAnnotatedType(com.sun.source.tree.AnnotatedTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitAnnotation(com.sun.source.tree.AnnotationTree, P);
  public com.sun.tools.javac.tree.JCTree visitAssert(com.sun.source.tree.AssertTree, P);
  public com.sun.tools.javac.tree.JCTree visitAssignment(com.sun.source.tree.AssignmentTree, P);
  public com.sun.tools.javac.tree.JCTree visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree, P);
  public com.sun.tools.javac.tree.JCTree visitBinary(com.sun.source.tree.BinaryTree, P);
  public com.sun.tools.javac.tree.JCTree visitBlock(com.sun.source.tree.BlockTree, P);
  public com.sun.tools.javac.tree.JCTree visitBreak(com.sun.source.tree.BreakTree, P);
  public com.sun.tools.javac.tree.JCTree visitCase(com.sun.source.tree.CaseTree, P);
  public com.sun.tools.javac.tree.JCTree visitCatch(com.sun.source.tree.CatchTree, P);
  public com.sun.tools.javac.tree.JCTree visitClass(com.sun.source.tree.ClassTree, P);
  public com.sun.tools.javac.tree.JCTree visitConditionalExpression(com.sun.source.tree.ConditionalExpressionTree, P);
  public com.sun.tools.javac.tree.JCTree visitContinue(com.sun.source.tree.ContinueTree, P);
  public com.sun.tools.javac.tree.JCTree visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree, P);
  public com.sun.tools.javac.tree.JCTree visitErroneous(com.sun.source.tree.ErroneousTree, P);
  public com.sun.tools.javac.tree.JCTree visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree, P);
  public com.sun.tools.javac.tree.JCTree visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree, P);
  public com.sun.tools.javac.tree.JCTree visitForLoop(com.sun.source.tree.ForLoopTree, P);
  public com.sun.tools.javac.tree.JCTree visitIdentifier(com.sun.source.tree.IdentifierTree, P);
  public com.sun.tools.javac.tree.JCTree visitIf(com.sun.source.tree.IfTree, P);
  public com.sun.tools.javac.tree.JCTree visitImport(com.sun.source.tree.ImportTree, P);
  public com.sun.tools.javac.tree.JCTree visitArrayAccess(com.sun.source.tree.ArrayAccessTree, P);
  public com.sun.tools.javac.tree.JCTree visitLabeledStatement(com.sun.source.tree.LabeledStatementTree, P);
  public com.sun.tools.javac.tree.JCTree visitLiteral(com.sun.source.tree.LiteralTree, P);
  public com.sun.tools.javac.tree.JCTree visitMethod(com.sun.source.tree.MethodTree, P);
  public com.sun.tools.javac.tree.JCTree visitMethodInvocation(com.sun.source.tree.MethodInvocationTree, P);
  public com.sun.tools.javac.tree.JCTree visitModifiers(com.sun.source.tree.ModifiersTree, P);
  public com.sun.tools.javac.tree.JCTree visitNewArray(com.sun.source.tree.NewArrayTree, P);
  public com.sun.tools.javac.tree.JCTree visitNewClass(com.sun.source.tree.NewClassTree, P);
  public com.sun.tools.javac.tree.JCTree visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree, P);
  public com.sun.tools.javac.tree.JCTree visitParenthesized(com.sun.source.tree.ParenthesizedTree, P);
  public com.sun.tools.javac.tree.JCTree visitReturn(com.sun.source.tree.ReturnTree, P);
  public com.sun.tools.javac.tree.JCTree visitMemberSelect(com.sun.source.tree.MemberSelectTree, P);
  public com.sun.tools.javac.tree.JCTree visitMemberReference(com.sun.source.tree.MemberReferenceTree, P);
  public com.sun.tools.javac.tree.JCTree visitEmptyStatement(com.sun.source.tree.EmptyStatementTree, P);
  public com.sun.tools.javac.tree.JCTree visitSwitch(com.sun.source.tree.SwitchTree, P);
  public com.sun.tools.javac.tree.JCTree visitSynchronized(com.sun.source.tree.SynchronizedTree, P);
  public com.sun.tools.javac.tree.JCTree visitThrow(com.sun.source.tree.ThrowTree, P);
  public com.sun.tools.javac.tree.JCTree visitCompilationUnit(com.sun.source.tree.CompilationUnitTree, P);
  public com.sun.tools.javac.tree.JCTree visitPackage(com.sun.source.tree.PackageTree, P);
  public com.sun.tools.javac.tree.JCTree visitTry(com.sun.source.tree.TryTree, P);
  public com.sun.tools.javac.tree.JCTree visitParameterizedType(com.sun.source.tree.ParameterizedTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitUnionType(com.sun.source.tree.UnionTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitIntersectionType(com.sun.source.tree.IntersectionTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitArrayType(com.sun.source.tree.ArrayTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitTypeCast(com.sun.source.tree.TypeCastTree, P);
  public com.sun.tools.javac.tree.JCTree visitPrimitiveType(com.sun.source.tree.PrimitiveTypeTree, P);
  public com.sun.tools.javac.tree.JCTree visitTypeParameter(com.sun.source.tree.TypeParameterTree, P);
  public com.sun.tools.javac.tree.JCTree visitInstanceOf(com.sun.source.tree.InstanceOfTree, P);
  public com.sun.tools.javac.tree.JCTree visitUnary(com.sun.source.tree.UnaryTree, P);
  public com.sun.tools.javac.tree.JCTree visitVariable(com.sun.source.tree.VariableTree, P);
  public com.sun.tools.javac.tree.JCTree visitWhileLoop(com.sun.source.tree.WhileLoopTree, P);
  public com.sun.tools.javac.tree.JCTree visitWildcard(com.sun.source.tree.WildcardTree, P);
  public com.sun.tools.javac.tree.JCTree visitModule(com.sun.source.tree.ModuleTree, P);
  public com.sun.tools.javac.tree.JCTree$JCExports visitExports(com.sun.source.tree.ExportsTree, P);
  public com.sun.tools.javac.tree.JCTree$JCOpens visitOpens(com.sun.source.tree.OpensTree, P);
  public com.sun.tools.javac.tree.JCTree$JCProvides visitProvides(com.sun.source.tree.ProvidesTree, P);
  public com.sun.tools.javac.tree.JCTree$JCRequires visitRequires(com.sun.source.tree.RequiresTree, P);
  public com.sun.tools.javac.tree.JCTree$JCUses visitUses(com.sun.source.tree.UsesTree, P);
  public com.sun.tools.javac.tree.JCTree visitOther(com.sun.source.tree.Tree, P);
  public java.lang.Object visitOther(com.sun.source.tree.Tree, java.lang.Object);
  public java.lang.Object visitUses(com.sun.source.tree.UsesTree, java.lang.Object);
  public java.lang.Object visitRequires(com.sun.source.tree.RequiresTree, java.lang.Object);
  public java.lang.Object visitProvides(com.sun.source.tree.ProvidesTree, java.lang.Object);
  public java.lang.Object visitOpens(com.sun.source.tree.OpensTree, java.lang.Object);
  public java.lang.Object visitExports(com.sun.source.tree.ExportsTree, java.lang.Object);
  public java.lang.Object visitModule(com.sun.source.tree.ModuleTree, java.lang.Object);
  public java.lang.Object visitWildcard(com.sun.source.tree.WildcardTree, java.lang.Object);
  public java.lang.Object visitWhileLoop(com.sun.source.tree.WhileLoopTree, java.lang.Object);
  public java.lang.Object visitVariable(com.sun.source.tree.VariableTree, java.lang.Object);
  public java.lang.Object visitUnary(com.sun.source.tree.UnaryTree, java.lang.Object);
  public java.lang.Object visitInstanceOf(com.sun.source.tree.InstanceOfTree, java.lang.Object);
  public java.lang.Object visitTypeParameter(com.sun.source.tree.TypeParameterTree, java.lang.Object);
  public java.lang.Object visitPrimitiveType(com.sun.source.tree.PrimitiveTypeTree, java.lang.Object);
  public java.lang.Object visitTypeCast(com.sun.source.tree.TypeCastTree, java.lang.Object);
  public java.lang.Object visitArrayType(com.sun.source.tree.ArrayTypeTree, java.lang.Object);
  public java.lang.Object visitIntersectionType(com.sun.source.tree.IntersectionTypeTree, java.lang.Object);
  public java.lang.Object visitUnionType(com.sun.source.tree.UnionTypeTree, java.lang.Object);
  public java.lang.Object visitParameterizedType(com.sun.source.tree.ParameterizedTypeTree, java.lang.Object);
  public java.lang.Object visitTry(com.sun.source.tree.TryTree, java.lang.Object);
  public java.lang.Object visitCompilationUnit(com.sun.source.tree.CompilationUnitTree, java.lang.Object);
  public java.lang.Object visitThrow(com.sun.source.tree.ThrowTree, java.lang.Object);
  public java.lang.Object visitSynchronized(com.sun.source.tree.SynchronizedTree, java.lang.Object);
  public java.lang.Object visitSwitch(com.sun.source.tree.SwitchTree, java.lang.Object);
  public java.lang.Object visitEmptyStatement(com.sun.source.tree.EmptyStatementTree, java.lang.Object);
  public java.lang.Object visitMemberReference(com.sun.source.tree.MemberReferenceTree, java.lang.Object);
  public java.lang.Object visitMemberSelect(com.sun.source.tree.MemberSelectTree, java.lang.Object);
  public java.lang.Object visitReturn(com.sun.source.tree.ReturnTree, java.lang.Object);
  public java.lang.Object visitParenthesized(com.sun.source.tree.ParenthesizedTree, java.lang.Object);
  public java.lang.Object visitPackage(com.sun.source.tree.PackageTree, java.lang.Object);
  public java.lang.Object visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree, java.lang.Object);
  public java.lang.Object visitNewClass(com.sun.source.tree.NewClassTree, java.lang.Object);
  public java.lang.Object visitNewArray(com.sun.source.tree.NewArrayTree, java.lang.Object);
  public java.lang.Object visitModifiers(com.sun.source.tree.ModifiersTree, java.lang.Object);
  public java.lang.Object visitMethod(com.sun.source.tree.MethodTree, java.lang.Object);
  public java.lang.Object visitLiteral(com.sun.source.tree.LiteralTree, java.lang.Object);
  public java.lang.Object visitLabeledStatement(com.sun.source.tree.LabeledStatementTree, java.lang.Object);
  public java.lang.Object visitArrayAccess(com.sun.source.tree.ArrayAccessTree, java.lang.Object);
  public java.lang.Object visitImport(com.sun.source.tree.ImportTree, java.lang.Object);
  public java.lang.Object visitIf(com.sun.source.tree.IfTree, java.lang.Object);
  public java.lang.Object visitIdentifier(com.sun.source.tree.IdentifierTree, java.lang.Object);
  public java.lang.Object visitForLoop(com.sun.source.tree.ForLoopTree, java.lang.Object);
  public java.lang.Object visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree, java.lang.Object);
  public java.lang.Object visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree, java.lang.Object);
  public java.lang.Object visitErroneous(com.sun.source.tree.ErroneousTree, java.lang.Object);
  public java.lang.Object visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree, java.lang.Object);
  public java.lang.Object visitContinue(com.sun.source.tree.ContinueTree, java.lang.Object);
  public java.lang.Object visitConditionalExpression(com.sun.source.tree.ConditionalExpressionTree, java.lang.Object);
  public java.lang.Object visitClass(com.sun.source.tree.ClassTree, java.lang.Object);
  public java.lang.Object visitCatch(com.sun.source.tree.CatchTree, java.lang.Object);
  public java.lang.Object visitCase(com.sun.source.tree.CaseTree, java.lang.Object);
  public java.lang.Object visitBreak(com.sun.source.tree.BreakTree, java.lang.Object);
  public java.lang.Object visitBlock(com.sun.source.tree.BlockTree, java.lang.Object);
  public java.lang.Object visitBinary(com.sun.source.tree.BinaryTree, java.lang.Object);
  public java.lang.Object visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree, java.lang.Object);
  public java.lang.Object visitAssignment(com.sun.source.tree.AssignmentTree, java.lang.Object);
  public java.lang.Object visitAssert(com.sun.source.tree.AssertTree, java.lang.Object);
  public java.lang.Object visitMethodInvocation(com.sun.source.tree.MethodInvocationTree, java.lang.Object);
  public java.lang.Object visitAnnotation(com.sun.source.tree.AnnotationTree, java.lang.Object);
  public java.lang.Object visitAnnotatedType(com.sun.source.tree.AnnotatedTypeTree, java.lang.Object);
}
