Compiled from "Resolve.java"
public class com.sun.tools.javac.comp.Resolve {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Resolve> resolveKey;
  com.sun.tools.javac.util.Names names;
  com.sun.tools.javac.util.Log log;
  com.sun.tools.javac.code.Symtab syms;
  com.sun.tools.javac.comp.Attr attr;
  com.sun.tools.javac.comp.DeferredAttr deferredAttr;
  com.sun.tools.javac.comp.Check chk;
  com.sun.tools.javac.comp.Infer infer;
  com.sun.tools.javac.code.ClassFinder finder;
  com.sun.tools.javac.code.ModuleFinder moduleFinder;
  com.sun.tools.javac.code.Types types;
  com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  public final boolean allowMethodHandles;
  public final boolean allowFunctionalInterfaceMostSpecific;
  public final boolean allowModules;
  public final boolean checkVarargsAccessAfterResolution;
  final java.util.EnumSet<com.sun.tools.javac.comp.Resolve$VerboseResolutionMode> verboseResolutionMode;
  com.sun.tools.javac.code.Scope$WriteableScope polymorphicSignatureScope;
  com.sun.tools.javac.code.Types$SimpleVisitor<java.lang.Void, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> accessibilityChecker;
  com.sun.tools.javac.comp.Resolve$MethodCheck nilMethodCheck;
  com.sun.tools.javac.comp.Resolve$MethodCheck arityMethodCheck;
  com.sun.tools.javac.comp.Resolve$MethodCheck resolveMethodCheck;
  com.sun.tools.javac.util.Warner noteWarner;
  com.sun.tools.javac.comp.Resolve$LogResolveHelper basicLogResolveHelper;
  com.sun.tools.javac.comp.Resolve$LogResolveHelper methodLogResolveHelper;
  com.sun.tools.javac.comp.Resolve$ReferenceChooser basicReferenceChooser;
  com.sun.tools.javac.comp.Resolve$ReferenceChooser structuralReferenceChooser;
  final com.sun.tools.javac.util.List<com.sun.tools.javac.comp.Resolve$MethodResolutionPhase> methodResolutionSteps;
  com.sun.tools.javac.comp.Resolve$MethodResolutionContext currentResolutionContext;
  protected com.sun.tools.javac.comp.Resolve(com.sun.tools.javac.util.Context);
  public static com.sun.tools.javac.comp.Resolve instance(com.sun.tools.javac.util.Context);
  void reportVerboseResolutionDiagnostic(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.util.JCDiagnostic getVerboseApplicableCandidateDiag(int, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.util.JCDiagnostic getVerboseInapplicableCandidateDiag(int, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic);
  protected static boolean isStatic(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  static boolean isInitializer(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$TypeSymbol);
  public boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$TypeSymbol, boolean);
  boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, boolean);
  public boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol);
  public boolean isAccessible(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, boolean);
  void checkAccessibleType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Type rawInstantiate(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean, com.sun.tools.javac.util.Warner) throws com.sun.tools.javac.comp.Infer$InferenceException;
  com.sun.tools.javac.code.Type checkMethod(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.Warner);
  com.sun.tools.javac.code.Type instantiate(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean, com.sun.tools.javac.util.Warner);
  com.sun.tools.javac.code.Symbol findField(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  public com.sun.tools.javac.code.Symbol$VarSymbol resolveInternalField(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.code.Symbol findVar(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.code.Symbol selectBest(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol, boolean, boolean);
  com.sun.tools.javac.code.Symbol mostSpecific(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, boolean);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> adjustArgs(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Symbol, int, boolean);
  com.sun.tools.javac.code.Symbol ambiguityError(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.code.Symbol findMethodInScope(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Scope, com.sun.tools.javac.code.Symbol, boolean, boolean, boolean);
  com.sun.tools.javac.code.Symbol findMethod(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean);
  java.lang.Iterable<com.sun.tools.javac.code.Symbol$TypeSymbol> superclasses(com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Symbol findFun(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean);
  com.sun.tools.javac.code.Symbol loadClass(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.comp.Resolve$RecoveryLoadClass);
  com.sun.tools.javac.code.Symbol lookupPackage(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.code.Symbol findImmediateMemberType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.code.Symbol findInheritedMemberType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.code.Symbol findMemberType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.code.Symbol findGlobalType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Scope, com.sun.tools.javac.util.Name, com.sun.tools.javac.comp.Resolve$RecoveryLoadClass);
  com.sun.tools.javac.code.Symbol findTypeVar(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, boolean);
  com.sun.tools.javac.code.Symbol findType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.code.Symbol findIdent(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol findIdentInternal(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol findIdentInPackage(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol findIdentInPackageInternal(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol findIdentInType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol findIdentInTypeInternal(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol accessInternal(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, boolean, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.comp.Resolve$LogResolveHelper);
  com.sun.tools.javac.code.Symbol accessMethod(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, boolean, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol accessMethod(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, boolean, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol accessBase(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, boolean);
  com.sun.tools.javac.code.Symbol accessBase(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, boolean);
  void checkNonAbstract(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.code.Symbol resolveIdent(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.code.Kinds$KindSelector);
  com.sun.tools.javac.code.Symbol resolveMethod(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol resolveQualifiedMethod(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol resolveQualifiedMethod(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol findPolymorphicSignatureInstance(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol findPolymorphicSignatureInstance(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.code.Symbol$MethodSymbol resolveInternalMethod(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol resolveConstructor(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public com.sun.tools.javac.code.Symbol$MethodSymbol resolveInternalConstructor(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol findConstructor(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean);
  com.sun.tools.javac.code.Symbol resolveDiamond(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.code.Symbol getMemberReference(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCMemberReference, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper makeReferenceLookupHelper(com.sun.tools.javac.tree.JCTree$JCMemberReference, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.comp.Resolve$MethodResolutionPhase);
  com.sun.tools.javac.util.Pair<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Resolve$ReferenceLookupHelper> resolveMemberReference(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCMemberReference, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Resolve$MethodCheck, com.sun.tools.javac.comp.InferenceContext, com.sun.tools.javac.comp.Resolve$ReferenceChooser);
  com.sun.tools.javac.code.Symbol lookupMethod(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Resolve$MethodCheck, com.sun.tools.javac.comp.Resolve$LookupHelper);
  com.sun.tools.javac.code.Symbol lookupMethod(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Resolve$MethodResolutionContext, com.sun.tools.javac.comp.Resolve$LookupHelper);
  com.sun.tools.javac.code.Symbol resolveSelf(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.util.Name);
  com.sun.tools.javac.code.Symbol resolveSelfContaining(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol, boolean);
  boolean enclosingInstanceMissing(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Type resolveImplicitThis(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Type resolveImplicitThis(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type, boolean);
  public void logAccessErrorInternal(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type);
  public java.lang.Object methodArguments(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.util.JCDiagnostic inaccessiblePackageReason(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$PackageSymbol);
  static {};
}
