Compiled from "LambdaToMethod.java"
public class com.sun.tools.javac.comp.LambdaToMethod extends com.sun.tools.javac.tree.TreeTranslator {
  public static final int FLAG_SERIALIZABLE;
  public static final int FLAG_MARKERS;
  public static final int FLAG_BRIDGES;
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.LambdaToMethod> unlambdaKey;
  public static com.sun.tools.javac.comp.LambdaToMethod instance(com.sun.tools.javac.util.Context);
  public <T extends com.sun.tools.javac.tree.JCTree> T translate(T);
  <T extends com.sun.tools.javac.tree.JCTree> T translate(T, com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext<?>);
  <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> translate(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.comp.LambdaToMethod$LambdaAnalyzerPreprocessor$TranslationContext<?>);
  public com.sun.tools.javac.tree.JCTree translateTopLevelClass(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.TreeMaker);
  public void visitClassDef(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public void visitLambda(com.sun.tools.javac.tree.JCTree$JCLambda);
  public void visitReference(com.sun.tools.javac.tree.JCTree$JCMemberReference);
  public void visitIdent(com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitSelect(com.sun.tools.javac.tree.JCTree$JCFieldAccess);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  public void visitVarDef(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  com.sun.tools.javac.tree.JCTree$JCNewClass makeNewClass(com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.tree.JCTree$JCNewClass makeNewClass(com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  static {};
}
