Compiled from "Infer.java"
public class com.sun.tools.javac.comp.Infer {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Infer> inferKey;
  com.sun.tools.javac.comp.Resolve rs;
  com.sun.tools.javac.comp.Check chk;
  com.sun.tools.javac.code.Symtab syms;
  com.sun.tools.javac.code.Types types;
  com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  com.sun.tools.javac.util.Log log;
  boolean allowGraphInference;
  public static final com.sun.tools.javac.code.Type anyPoly;
  com.sun.tools.javac.code.Types$TypeMapping<java.lang.Void> fromTypeVarFun;
  com.sun.tools.javac.comp.Infer$AbstractIncorporationEngine legacyEngine;
  com.sun.tools.javac.comp.Infer$AbstractIncorporationEngine graphEngine;
  static final int MAX_INCORPORATION_STEPS;
  java.util.Map<com.sun.tools.javac.comp.Infer$IncorporationBinaryOp, java.lang.Boolean> incorporationCache;
  final com.sun.tools.javac.comp.InferenceContext emptyContext;
  public static com.sun.tools.javac.comp.Infer instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.Infer(com.sun.tools.javac.util.Context);
  com.sun.tools.javac.comp.Infer$InferenceException error(com.sun.tools.javac.util.JCDiagnostic);
  com.sun.tools.javac.code.Type instantiateMethod(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type$MethodType, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, boolean, boolean, com.sun.tools.javac.comp.Resolve$MethodResolutionContext, com.sun.tools.javac.util.Warner) throws com.sun.tools.javac.comp.Infer$InferenceException;
  com.sun.tools.javac.code.Type generateReturnConstraints(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.code.Type$MethodType, com.sun.tools.javac.comp.InferenceContext);
  void instantiateAsUninferredVars(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.comp.InferenceContext);
  com.sun.tools.javac.code.Type instantiatePolymorphicSignatureInstance(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.comp.Resolve$MethodResolutionContext, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public com.sun.tools.javac.code.Type instantiateFunctionalInterface(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.comp.Check$CheckContext);
  com.sun.tools.javac.comp.Infer$AbstractIncorporationEngine incorporationEngine();
  void doIncorporation(com.sun.tools.javac.comp.InferenceContext, com.sun.tools.javac.util.Warner) throws com.sun.tools.javac.comp.Infer$InferenceException;
  boolean doIncorporationOp(com.sun.tools.javac.comp.Infer$IncorporationBinaryOpKind, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Warner);
  void reportInstError(com.sun.tools.javac.code.Type$UndetVar, com.sun.tools.javac.code.Type$UndetVar$InferenceBound);
  void reportBoundError(com.sun.tools.javac.code.Type$UndetVar, com.sun.tools.javac.code.Type$UndetVar$InferenceBound);
  void reportBoundError(com.sun.tools.javac.code.Type$UndetVar, com.sun.tools.javac.code.Type$UndetVar$InferenceBound, com.sun.tools.javac.code.Type$UndetVar$InferenceBound);
  com.sun.tools.javac.util.JCDiagnostic$Fragment getBoundFragment(com.sun.tools.javac.code.Type$UndetVar$InferenceBound, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  static {};
}
