Compiled from "ArgumentAttr.java"
public class com.sun.tools.javac.comp.ArgumentAttr extends com.sun.tools.javac.tree.JCTree$Visitor {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.ArgumentAttr> methodAttrKey;
  com.sun.tools.javac.code.Type result;
  java.util.Map<com.sun.tools.javac.comp.ArgumentAttr$UniquePos, com.sun.tools.javac.comp.ArgumentAttr$ArgumentType<?>> argumentTypeCache;
  public static com.sun.tools.javac.comp.ArgumentAttr instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.ArgumentAttr(com.sun.tools.javac.util.Context);
  void setResult(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Type checkSpeculative(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.code.Type checkSpeculative(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.comp.ArgumentAttr$LocalCacheContext withLocalCacheContext();
  com.sun.tools.javac.code.Type attribArg(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public void visitTree(com.sun.tools.javac.tree.JCTree);
  <T extends com.sun.tools.javac.tree.JCTree$JCExpression, Z extends com.sun.tools.javac.comp.ArgumentAttr$ArgumentType<T>> void processArg(T, java.util.function.Function<T, Z>);
  <T extends com.sun.tools.javac.tree.JCTree$JCExpression, Z extends com.sun.tools.javac.comp.ArgumentAttr$ArgumentType<T>> void processArg(T, java.util.function.Supplier<Z>);
  public void visitParens(com.sun.tools.javac.tree.JCTree$JCParens);
  public void visitConditional(com.sun.tools.javac.tree.JCTree$JCConditional);
  public void visitReference(com.sun.tools.javac.tree.JCTree$JCMemberReference);
  public void visitLambda(com.sun.tools.javac.tree.JCTree$JCLambda);
  public void visitApply(com.sun.tools.javac.tree.JCTree$JCMethodInvocation);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  static {};
}
