Compiled from "Attr.java"
public class com.sun.tools.javac.comp.Attr extends com.sun.tools.javac.tree.JCTree$Visitor {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Attr> attrKey;
  final com.sun.tools.javac.util.Names names;
  final com.sun.tools.javac.util.Log log;
  final com.sun.tools.javac.code.Symtab syms;
  final com.sun.tools.javac.comp.Resolve rs;
  final com.sun.tools.javac.comp.Operators operators;
  final com.sun.tools.javac.comp.Infer infer;
  final com.sun.tools.javac.comp.Analyzer analyzer;
  final com.sun.tools.javac.comp.DeferredAttr deferredAttr;
  final com.sun.tools.javac.comp.Check chk;
  final com.sun.tools.javac.comp.Flow flow;
  final com.sun.tools.javac.comp.MemberEnter memberEnter;
  final com.sun.tools.javac.comp.TypeEnter typeEnter;
  final com.sun.tools.javac.tree.TreeMaker make;
  final com.sun.tools.javac.comp.ConstFold cfolder;
  final com.sun.tools.javac.comp.Enter enter;
  final com.sun.tools.javac.jvm.Target target;
  final com.sun.tools.javac.code.Types types;
  final com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  final com.sun.tools.javac.code.TypeAnnotations typeAnnotations;
  final com.sun.tools.javac.code.DeferredLintHandler deferredLintHandler;
  final com.sun.tools.javac.comp.TypeEnvs typeEnvs;
  final com.sun.tools.javac.util.Dependencies dependencies;
  final com.sun.tools.javac.comp.Annotate annotate;
  final com.sun.tools.javac.comp.ArgumentAttr argumentAttr;
  boolean allowPoly;
  boolean allowTypeAnnos;
  boolean allowLambda;
  boolean allowDefaultMethods;
  boolean allowStaticInterfaceMethods;
  boolean useBeforeDeclarationWarning;
  boolean allowStringsInSwitch;
  java.lang.String sourceName;
  final com.sun.tools.javac.comp.Attr$ResultInfo statInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo varAssignmentInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo methodAttrInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo unknownExprInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo unknownTypeInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo unknownTypeExprInfo;
  final com.sun.tools.javac.comp.Attr$ResultInfo recoveryInfo;
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> env;
  com.sun.tools.javac.comp.Attr$ResultInfo resultInfo;
  com.sun.tools.javac.code.Type result;
  com.sun.tools.javac.tree.TreeTranslator removeClassParams;
  static final com.sun.tools.javac.code.TypeTag[] primitiveTags;
  com.sun.tools.javac.code.Types$MapVisitor<com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition> targetChecker;
  public static com.sun.tools.javac.comp.Attr instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.Attr(com.sun.tools.javac.util.Context);
  com.sun.tools.javac.code.Type check(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Kinds$KindSelector, com.sun.tools.javac.comp.Attr$ResultInfo);
  boolean isAssignableAsBlankFinal(com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  void checkAssignable(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  boolean isStaticReference(com.sun.tools.javac.tree.JCTree);
  static boolean isType(com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.code.Symbol thisSym(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.code.Symbol attribIdent(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public com.sun.tools.javac.code.Symbol attribIdent(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.code.Type coerce(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.code.Type attribType(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Symbol$TypeSymbol);
  public com.sun.tools.javac.code.Type attribImportQualifier(com.sun.tools.javac.tree.JCTree$JCImport, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> attribExprToTree(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> attribStatToTree(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree);
  com.sun.tools.javac.code.Type pt();
  com.sun.tools.javac.code.Kinds$KindSelector pkind();
  com.sun.tools.javac.code.Type attribTree(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> copyEnv(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.code.Scope$WriteableScope copyScope(com.sun.tools.javac.code.Scope$WriteableScope);
  public com.sun.tools.javac.code.Type attribExpr(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.code.Type attribExpr(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.code.Type attribType(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.code.Type attribType(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.code.Type attribStat(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> attribExprs(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  <T extends com.sun.tools.javac.tree.JCTree> void attribStats(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.code.Kinds$KindSelector attribArgs(com.sun.tools.javac.code.Kinds$KindSelector, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Type>);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> attribAnyTypes(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> attribTypes(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  void attribTypeVariables(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCTypeParameter>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  void attribAnnotationTypes(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCAnnotation>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public java.lang.Object attribLazyConstantValue(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCVariableDecl, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.code.Type attribBase(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, boolean, boolean, boolean);
  com.sun.tools.javac.code.Type checkBase(com.sun.tools.javac.code.Type, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, boolean, boolean, boolean);
  com.sun.tools.javac.code.Type attribIdentAsEnumType(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitClassDef(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public void visitMethodDef(com.sun.tools.javac.tree.JCTree$JCMethodDecl);
  public void visitVarDef(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  com.sun.tools.javac.util.JCDiagnostic$Fragment canInferLocalVarType(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  public void visitSkip(com.sun.tools.javac.tree.JCTree$JCSkip);
  public void visitBlock(com.sun.tools.javac.tree.JCTree$JCBlock);
  public void visitDoLoop(com.sun.tools.javac.tree.JCTree$JCDoWhileLoop);
  public void visitWhileLoop(com.sun.tools.javac.tree.JCTree$JCWhileLoop);
  public void visitForLoop(com.sun.tools.javac.tree.JCTree$JCForLoop);
  public void visitForeachLoop(com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop);
  public void visitLabelled(com.sun.tools.javac.tree.JCTree$JCLabeledStatement);
  public void visitSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  public void visitSynchronized(com.sun.tools.javac.tree.JCTree$JCSynchronized);
  public void visitTry(com.sun.tools.javac.tree.JCTree$JCTry);
  void checkAutoCloseable(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.code.Type);
  public void visitConditional(com.sun.tools.javac.tree.JCTree$JCConditional);
  boolean primitiveOrBoxed(com.sun.tools.javac.code.Type);
  com.sun.tools.javac.comp.Check$CheckContext conditionalContext(com.sun.tools.javac.comp.Check$CheckContext);
  com.sun.tools.javac.code.Type condType(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type);
  public void visitIf(com.sun.tools.javac.tree.JCTree$JCIf);
  public void visitExec(com.sun.tools.javac.tree.JCTree$JCExpressionStatement);
  public void visitBreak(com.sun.tools.javac.tree.JCTree$JCBreak);
  public void visitContinue(com.sun.tools.javac.tree.JCTree$JCContinue);
  public void visitReturn(com.sun.tools.javac.tree.JCTree$JCReturn);
  public void visitThrow(com.sun.tools.javac.tree.JCTree$JCThrow);
  public void visitAssert(com.sun.tools.javac.tree.JCTree$JCAssert);
  public void visitApply(com.sun.tools.javac.tree.JCTree$JCMethodInvocation);
  com.sun.tools.javac.code.Type adjustMethodReturnType(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.util.Name, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type);
  boolean checkFirstConstructorStat(com.sun.tools.javac.tree.JCTree$JCMethodInvocation, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.code.Type newMethodTemplate(com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  com.sun.tools.javac.comp.Check$CheckContext diamondContext(com.sun.tools.javac.tree.JCTree$JCNewClass, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.comp.Check$CheckContext);
  public com.sun.tools.javac.tree.JCTree$JCExpression makeNullCheck(com.sun.tools.javac.tree.JCTree$JCExpression);
  public void visitNewArray(com.sun.tools.javac.tree.JCTree$JCNewArray);
  public void visitLambda(com.sun.tools.javac.tree.JCTree$JCLambda);
  com.sun.tools.javac.comp.Attr$TargetInfo getTargetInfo(com.sun.tools.javac.tree.JCTree$JCPolyExpression, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  void preFlow(com.sun.tools.javac.tree.JCTree$JCLambda);
  com.sun.tools.javac.comp.Attr$ResultInfo lambdaBodyResult(com.sun.tools.javac.tree.JCTree$JCLambda, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Attr$ResultInfo);
  void checkLambdaCompatible(com.sun.tools.javac.tree.JCTree$JCLambda, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Check$CheckContext);
  public com.sun.tools.javac.code.Symbol$MethodSymbol removeClinit(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> lambdaEnv(com.sun.tools.javac.tree.JCTree$JCLambda, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public void visitReference(com.sun.tools.javac.tree.JCTree$JCMemberReference);
  com.sun.tools.javac.comp.Attr$ResultInfo memberReferenceQualifierResult(com.sun.tools.javac.tree.JCTree$JCMemberReference);
  void checkReferenceCompatible(com.sun.tools.javac.tree.JCTree$JCMemberReference, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Check$CheckContext, boolean);
  boolean checkExConstraints(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.comp.InferenceContext);
  public void visitParens(com.sun.tools.javac.tree.JCTree$JCParens);
  public void visitAssign(com.sun.tools.javac.tree.JCTree$JCAssign);
  public void visitAssignop(com.sun.tools.javac.tree.JCTree$JCAssignOp);
  public void visitUnary(com.sun.tools.javac.tree.JCTree$JCUnary);
  public void visitBinary(com.sun.tools.javac.tree.JCTree$JCBinary);
  public void visitTypeCast(com.sun.tools.javac.tree.JCTree$JCTypeCast);
  public void visitTypeTest(com.sun.tools.javac.tree.JCTree$JCInstanceOf);
  public void visitIndexed(com.sun.tools.javac.tree.JCTree$JCArrayAccess);
  public void visitIdent(com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitSelect(com.sun.tools.javac.tree.JCTree$JCFieldAccess);
  com.sun.tools.javac.code.Type checkId(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.code.Type checkMethodIdInternal(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.code.Type checkIdInternal(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.comp.Attr$ResultInfo);
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> enclosingInitEnv(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.code.Type checkMethod(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.comp.Attr$ResultInfo, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>);
  public void visitLiteral(com.sun.tools.javac.tree.JCTree$JCLiteral);
  com.sun.tools.javac.code.Type litType(com.sun.tools.javac.code.TypeTag);
  public void visitTypeIdent(com.sun.tools.javac.tree.JCTree$JCPrimitiveTypeTree);
  public void visitTypeArray(com.sun.tools.javac.tree.JCTree$JCArrayTypeTree);
  public void visitTypeApply(com.sun.tools.javac.tree.JCTree$JCTypeApply);
  public void visitTypeUnion(com.sun.tools.javac.tree.JCTree$JCTypeUnion);
  public void visitTypeIntersection(com.sun.tools.javac.tree.JCTree$JCTypeIntersection);
  public void visitTypeParameter(com.sun.tools.javac.tree.JCTree$JCTypeParameter);
  com.sun.tools.javac.code.Type checkIntersection(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  public void visitWildcard(com.sun.tools.javac.tree.JCTree$JCWildcard);
  public void visitAnnotation(com.sun.tools.javac.tree.JCTree$JCAnnotation);
  public void visitAnnotatedType(com.sun.tools.javac.tree.JCTree$JCAnnotatedType);
  public void visitErroneous(com.sun.tools.javac.tree.JCTree$JCErroneous);
  public void visitTree(com.sun.tools.javac.tree.JCTree);
  public void attrib(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public void attribTopLevel(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public void attribPackage(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$PackageSymbol);
  void attribPackage(com.sun.tools.javac.code.Symbol$PackageSymbol);
  public void attribModule(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$ModuleSymbol);
  void attribModule(com.sun.tools.javac.code.Symbol$ModuleSymbol);
  public void attribClass(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$ClassSymbol);
  void attribClass(com.sun.tools.javac.code.Symbol$ClassSymbol) throws com.sun.tools.javac.code.Symbol$CompletionFailure;
  public void visitImport(com.sun.tools.javac.tree.JCTree$JCImport);
  public void visitModuleDef(com.sun.tools.javac.tree.JCTree$JCModuleDecl);
  boolean isSerializable(com.sun.tools.javac.code.Type);
  public void validateTypeAnnotations(com.sun.tools.javac.tree.JCTree, boolean);
  public void postAttr(com.sun.tools.javac.tree.JCTree);
  public void setPackageSymbols(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Symbol);
  static {};
}
