Compiled from "TransTypes.java"
public class com.sun.tools.javac.comp.TransTypes extends com.sun.tools.javac.tree.TreeTranslator {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.TransTypes> transTypesKey;
  com.sun.tools.javac.code.Type returnType;
  public static com.sun.tools.javac.comp.TransTypes instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.TransTypes(com.sun.tools.javac.util.Context);
  com.sun.tools.javac.tree.JCTree$JCExpression cast(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  public com.sun.tools.javac.tree.JCTree$JCExpression coerce(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.tree.JCTree$JCExpression coerce(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.tree.JCTree$JCExpression retype(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type);
  <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> translateArgs(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type);
  public <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> translateArgs(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  void addBridge(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>);
  void addBridgeIfNeeded(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>);
  void addBridges(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>);
  void addBridges(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree>);
  public <T extends com.sun.tools.javac.tree.JCTree> T translate(T, com.sun.tools.javac.code.Type);
  public <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<T> translate(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.code.Type);
  public void visitClassDef(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public void visitMethodDef(com.sun.tools.javac.tree.JCTree$JCMethodDecl);
  public void visitVarDef(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  public void visitDoLoop(com.sun.tools.javac.tree.JCTree$JCDoWhileLoop);
  public void visitWhileLoop(com.sun.tools.javac.tree.JCTree$JCWhileLoop);
  public void visitForLoop(com.sun.tools.javac.tree.JCTree$JCForLoop);
  public void visitForeachLoop(com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop);
  public void visitLambda(com.sun.tools.javac.tree.JCTree$JCLambda);
  public void visitSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  public void visitCase(com.sun.tools.javac.tree.JCTree$JCCase);
  public void visitSynchronized(com.sun.tools.javac.tree.JCTree$JCSynchronized);
  public void visitTry(com.sun.tools.javac.tree.JCTree$JCTry);
  public void visitConditional(com.sun.tools.javac.tree.JCTree$JCConditional);
  public void visitIf(com.sun.tools.javac.tree.JCTree$JCIf);
  public void visitExec(com.sun.tools.javac.tree.JCTree$JCExpressionStatement);
  public void visitReturn(com.sun.tools.javac.tree.JCTree$JCReturn);
  public void visitThrow(com.sun.tools.javac.tree.JCTree$JCThrow);
  public void visitAssert(com.sun.tools.javac.tree.JCTree$JCAssert);
  public void visitApply(com.sun.tools.javac.tree.JCTree$JCMethodInvocation);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  public void visitNewArray(com.sun.tools.javac.tree.JCTree$JCNewArray);
  public void visitParens(com.sun.tools.javac.tree.JCTree$JCParens);
  public void visitAssign(com.sun.tools.javac.tree.JCTree$JCAssign);
  public void visitAssignop(com.sun.tools.javac.tree.JCTree$JCAssignOp);
  public void visitUnary(com.sun.tools.javac.tree.JCTree$JCUnary);
  public void visitBinary(com.sun.tools.javac.tree.JCTree$JCBinary);
  public void visitAnnotatedType(com.sun.tools.javac.tree.JCTree$JCAnnotatedType);
  public void visitTypeCast(com.sun.tools.javac.tree.JCTree$JCTypeCast);
  public void visitTypeTest(com.sun.tools.javac.tree.JCTree$JCInstanceOf);
  public void visitIndexed(com.sun.tools.javac.tree.JCTree$JCArrayAccess);
  public void visitAnnotation(com.sun.tools.javac.tree.JCTree$JCAnnotation);
  public void visitIdent(com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitSelect(com.sun.tools.javac.tree.JCTree$JCFieldAccess);
  public void visitReference(com.sun.tools.javac.tree.JCTree$JCMemberReference);
  public void visitTypeArray(com.sun.tools.javac.tree.JCTree$JCArrayTypeTree);
  public void visitTypeApply(com.sun.tools.javac.tree.JCTree$JCTypeApply);
  public void visitTypeIntersection(com.sun.tools.javac.tree.JCTree$JCTypeIntersection);
  void translateClass(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public com.sun.tools.javac.tree.JCTree translateTopLevelClass(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.TreeMaker);
  static {};
}
