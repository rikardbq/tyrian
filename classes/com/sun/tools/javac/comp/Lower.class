Compiled from "Lower.java"
public class com.sun.tools.javac.comp.Lower extends com.sun.tools.javac.tree.TreeTranslator {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Lower> lowerKey;
  com.sun.tools.javac.code.Symbol$ClassSymbol currentClass;
  com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree> translated;
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> attrEnv;
  com.sun.tools.javac.tree.EndPosTable endPosTable;
  java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.tree.JCTree$JCClassDecl> classdefs;
  public java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>> prunedTree;
  java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol> actualSymbols;
  com.sun.tools.javac.tree.JCTree$JCMethodDecl currentMethodDef;
  com.sun.tools.javac.code.Symbol$MethodSymbol currentMethodSym;
  com.sun.tools.javac.tree.JCTree$JCClassDecl outermostClassDef;
  com.sun.tools.javac.tree.JCTree outermostMemberDef;
  java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol> lambdaTranslationMap;
  com.sun.tools.javac.comp.Lower$ClassMap classMap;
  java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>> freevarCache;
  java.util.Map<com.sun.tools.javac.code.Symbol$TypeSymbol, com.sun.tools.javac.comp.Lower$EnumMapping> enumSwitchMap;
  com.sun.tools.javac.tree.JCTree$Visitor conflictsChecker;
  java.util.Map<com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol> proxies;
  com.sun.tools.javac.code.Scope$WriteableScope twrVars;
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol> outerThisStack;
  public static com.sun.tools.javac.comp.Lower instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.Lower(com.sun.tools.javac.util.Context);
  com.sun.tools.javac.tree.JCTree$JCClassDecl classDef(com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.code.Symbol$ClassSymbol ownerToCopyFreeVarsFrom(com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol> freevars(com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.comp.Lower$EnumMapping mapForEnum(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.tree.TreeMaker make_at(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition);
  com.sun.tools.javac.tree.JCTree$JCExpression makeLit(com.sun.tools.javac.code.Type, java.lang.Object);
  com.sun.tools.javac.tree.JCTree$JCExpression makeNull();
  com.sun.tools.javac.tree.JCTree$JCNewClass makeNewClass(com.sun.tools.javac.code.Type, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>);
  com.sun.tools.javac.tree.JCTree$JCUnary makeUnary(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCBinary makeBinary(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCAssignOp makeAssignop(com.sun.tools.javac.tree.JCTree$Tag, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree);
  com.sun.tools.javac.tree.JCTree$JCExpression makeString(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCClassDecl makeEmptyClass(long, com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.tree.JCTree$JCClassDecl makeEmptyClass(long, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.util.Name, boolean);
  void checkConflicts(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree>);
  void swapAccessConstructorTag(com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.util.Name accessName(int, int);
  com.sun.tools.javac.code.Symbol$MethodSymbol accessSymbol(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.JCTree, boolean, boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression accessBase(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol);
  boolean needsPrivateAccess(com.sun.tools.javac.code.Symbol);
  boolean needsProtectedAccess(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree);
  com.sun.tools.javac.code.Symbol$ClassSymbol accessClass(com.sun.tools.javac.code.Symbol, boolean, com.sun.tools.javac.tree.JCTree);
  com.sun.tools.javac.tree.JCTree$JCExpression access(com.sun.tools.javac.code.Symbol, com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression, boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression access(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.code.Symbol accessConstructor(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.code.Symbol$ClassSymbol accessConstructorTag();
  void makeAccessible(com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.tree.JCTree accessDef(int, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol$MethodSymbol, int);
  com.sun.tools.javac.tree.JCTree accessConstructorDef(int, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol$MethodSymbol);
  com.sun.tools.javac.util.Name proxyName(com.sun.tools.javac.util.Name, int);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> freevarDefs(int, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCVariableDecl> freevarDefs(int, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>, com.sun.tools.javac.code.Symbol, long);
  com.sun.tools.javac.util.Name outerThisName(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl outerThisDef(int, com.sun.tools.javac.code.Symbol$MethodSymbol);
  com.sun.tools.javac.tree.JCTree$JCVariableDecl outerThisDef(int, com.sun.tools.javac.code.Symbol$ClassSymbol);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> loadFreevars(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.util.List<com.sun.tools.javac.code.Symbol$VarSymbol>);
  com.sun.tools.javac.tree.JCTree$JCExpression loadFreevar(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$VarSymbol);
  com.sun.tools.javac.tree.JCTree$JCExpression makeThis(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.tree.JCTree makeTwrTry(com.sun.tools.javac.tree.JCTree$JCTry);
  com.sun.tools.javac.tree.JCTree$JCExpression makeOuterThis(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$TypeSymbol);
  com.sun.tools.javac.tree.JCTree$JCExpression makeOwnerThis(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, boolean);
  com.sun.tools.javac.tree.JCTree$JCExpression makeOwnerThisN(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol, boolean);
  com.sun.tools.javac.tree.JCTree$JCStatement initField(int, com.sun.tools.javac.code.Symbol, com.sun.tools.javac.code.Symbol);
  com.sun.tools.javac.tree.JCTree$JCStatement initOuterThis(int);
  com.sun.tools.javac.tree.JCTree$JCExpression abstractRval(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type, com.sun.tools.javac.comp.Lower$TreeBuilder);
  com.sun.tools.javac.tree.JCTree$JCExpression abstractRval(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.comp.Lower$TreeBuilder);
  com.sun.tools.javac.tree.JCTree$JCExpression abstractLval(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.comp.Lower$TreeBuilder);
  com.sun.tools.javac.tree.JCTree$JCExpression makeComma(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.tree.JCTree$JCExpression);
  public <T extends com.sun.tools.javac.tree.JCTree> T translate(T);
  public <T extends com.sun.tools.javac.tree.JCTree$JCExpression> T translate(T, com.sun.tools.javac.code.Type);
  public <T extends com.sun.tools.javac.tree.JCTree> T translate(T, com.sun.tools.javac.tree.JCTree$JCExpression);
  public <T extends com.sun.tools.javac.tree.JCTree$JCExpression> com.sun.tools.javac.util.List<T> translate(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.code.Type);
  public void visitPackageDef(com.sun.tools.javac.tree.JCTree$JCPackageDecl);
  public void visitModuleDef(com.sun.tools.javac.tree.JCTree$JCModuleDecl);
  public void visitClassDef(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public void visitMethodDef(com.sun.tools.javac.tree.JCTree$JCMethodDecl);
  public void visitTypeCast(com.sun.tools.javac.tree.JCTree$JCTypeCast);
  public void visitNewClass(com.sun.tools.javac.tree.JCTree$JCNewClass);
  public void visitConditional(com.sun.tools.javac.tree.JCTree$JCConditional);
  public void visitIf(com.sun.tools.javac.tree.JCTree$JCIf);
  public void visitAssert(com.sun.tools.javac.tree.JCTree$JCAssert);
  public void visitApply(com.sun.tools.javac.tree.JCTree$JCMethodInvocation);
  com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression> boxArgs(com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type>, com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCExpression>, com.sun.tools.javac.code.Type);
  <T extends com.sun.tools.javac.tree.JCTree$JCExpression> T boxIfNeeded(T, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.tree.JCTree$JCExpression boxPrimitive(com.sun.tools.javac.tree.JCTree$JCExpression);
  com.sun.tools.javac.tree.JCTree$JCExpression boxPrimitive(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  com.sun.tools.javac.tree.JCTree$JCExpression unbox(com.sun.tools.javac.tree.JCTree$JCExpression, com.sun.tools.javac.code.Type);
  public void visitParens(com.sun.tools.javac.tree.JCTree$JCParens);
  public void visitIndexed(com.sun.tools.javac.tree.JCTree$JCArrayAccess);
  public void visitAssign(com.sun.tools.javac.tree.JCTree$JCAssign);
  public void visitAssignop(com.sun.tools.javac.tree.JCTree$JCAssignOp);
  com.sun.tools.javac.tree.JCTree$JCExpression lowerBoxedPostop(com.sun.tools.javac.tree.JCTree$JCUnary);
  public void visitUnary(com.sun.tools.javac.tree.JCTree$JCUnary);
  public void visitBinary(com.sun.tools.javac.tree.JCTree$JCBinary);
  public void visitIdent(com.sun.tools.javac.tree.JCTree$JCIdent);
  public void visitForeachLoop(com.sun.tools.javac.tree.JCTree$JCEnhancedForLoop);
  public void visitVarDef(com.sun.tools.javac.tree.JCTree$JCVariableDecl);
  public void visitBlock(com.sun.tools.javac.tree.JCTree$JCBlock);
  public void visitDoLoop(com.sun.tools.javac.tree.JCTree$JCDoWhileLoop);
  public void visitWhileLoop(com.sun.tools.javac.tree.JCTree$JCWhileLoop);
  public void visitForLoop(com.sun.tools.javac.tree.JCTree$JCForLoop);
  public void visitReturn(com.sun.tools.javac.tree.JCTree$JCReturn);
  public void visitSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  public com.sun.tools.javac.tree.JCTree visitEnumSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  public com.sun.tools.javac.tree.JCTree visitStringSwitch(com.sun.tools.javac.tree.JCTree$JCSwitch);
  public void visitNewArray(com.sun.tools.javac.tree.JCTree$JCNewArray);
  public void visitSelect(com.sun.tools.javac.tree.JCTree$JCFieldAccess);
  public void visitLetExpr(com.sun.tools.javac.tree.JCTree$LetExpr);
  public void visitAnnotation(com.sun.tools.javac.tree.JCTree$JCAnnotation);
  public void visitTry(com.sun.tools.javac.tree.JCTree$JCTry);
  public com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree> translateTopLevelClass(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>, com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.tree.TreeMaker);
  static {};
}
