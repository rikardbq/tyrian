Compiled from "Enter.java"
public class com.sun.tools.javac.comp.Enter extends com.sun.tools.javac.tree.JCTree$Visitor {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javac.comp.Enter> enterKey;
  com.sun.tools.javac.comp.Annotate annotate;
  com.sun.tools.javac.util.Log log;
  com.sun.tools.javac.code.Symtab syms;
  com.sun.tools.javac.comp.Check chk;
  com.sun.tools.javac.tree.TreeMaker make;
  com.sun.tools.javac.comp.TypeEnter typeEnter;
  com.sun.tools.javac.code.Types types;
  com.sun.tools.javac.code.Lint lint;
  com.sun.tools.javac.util.Names names;
  javax.tools.JavaFileManager fileManager;
  com.sun.tools.javac.main.Option$PkgInfo pkginfoOpt;
  com.sun.tools.javac.comp.TypeEnvs typeEnvs;
  com.sun.tools.javac.comp.Modules modules;
  com.sun.tools.javac.util.JCDiagnostic$Factory diags;
  com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.code.Symbol$ClassSymbol> uncompleted;
  com.sun.tools.javac.util.ListBuffer<com.sun.tools.javac.tree.JCTree$JCCompilationUnit> unfinishedModules;
  protected com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> env;
  com.sun.tools.javac.code.Type result;
  public static com.sun.tools.javac.comp.Enter instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javac.comp.Enter(com.sun.tools.javac.util.Context);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> getEnv(com.sun.tools.javac.code.Symbol$TypeSymbol);
  public java.lang.Iterable<com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>> getEnvs();
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> getClassEnv(com.sun.tools.javac.code.Symbol$TypeSymbol);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> classEnv(com.sun.tools.javac.tree.JCTree$JCClassDecl, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> topLevelEnv(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> getTopLevelEnv(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  com.sun.tools.javac.code.Scope$WriteableScope enterScope(com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext> moduleEnv(com.sun.tools.javac.tree.JCTree$JCModuleDecl, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  com.sun.tools.javac.code.Type classEnter(com.sun.tools.javac.tree.JCTree, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  <T extends com.sun.tools.javac.tree.JCTree> com.sun.tools.javac.util.List<com.sun.tools.javac.code.Type> classEnter(com.sun.tools.javac.util.List<T>, com.sun.tools.javac.comp.Env<com.sun.tools.javac.comp.AttrContext>);
  public void visitTopLevel(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  public void visitClassDef(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  protected void duplicateClass(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition, com.sun.tools.javac.code.Symbol$ClassSymbol);
  public void visitTypeParameter(com.sun.tools.javac.tree.JCTree$JCTypeParameter);
  public void visitModuleDef(com.sun.tools.javac.tree.JCTree$JCModuleDecl);
  public void visitTree(com.sun.tools.javac.tree.JCTree);
  public void main(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>);
  public void complete(com.sun.tools.javac.util.List<com.sun.tools.javac.tree.JCTree$JCCompilationUnit>, com.sun.tools.javac.code.Symbol$ClassSymbol);
  public void newRound();
  static {};
}
