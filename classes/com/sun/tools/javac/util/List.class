Compiled from "List.java"
public class com.sun.tools.javac.util.List<A> extends java.util.AbstractCollection<A> implements java.util.List<A> {
  public A head;
  public com.sun.tools.javac.util.List<A> tail;
  com.sun.tools.javac.util.List(A, com.sun.tools.javac.util.List<A>);
  public static <A> com.sun.tools.javac.util.List<A> nil();
  public static <A> com.sun.tools.javac.util.List<A> filter(com.sun.tools.javac.util.List<A>, A);
  public com.sun.tools.javac.util.List<A> intersect(com.sun.tools.javac.util.List<A>);
  public com.sun.tools.javac.util.List<A> diff(com.sun.tools.javac.util.List<A>);
  public com.sun.tools.javac.util.List<A> take(int);
  public static <A> com.sun.tools.javac.util.List<A> of(A);
  public static <A> com.sun.tools.javac.util.List<A> of(A, A);
  public static <A> com.sun.tools.javac.util.List<A> of(A, A, A);
  public static <A> com.sun.tools.javac.util.List<A> of(A, A, A, A...);
  public static <A> com.sun.tools.javac.util.List<A> from(A[]);
  public static <A> com.sun.tools.javac.util.List<A> from(java.lang.Iterable<? extends A>);
  public static <A> com.sun.tools.javac.util.List<A> fill(int, A);
  public boolean isEmpty();
  public boolean nonEmpty();
  public int length();
  public int size();
  public com.sun.tools.javac.util.List<A> setTail(com.sun.tools.javac.util.List<A>);
  public com.sun.tools.javac.util.List<A> prepend(A);
  public com.sun.tools.javac.util.List<A> prependList(com.sun.tools.javac.util.List<A>);
  public com.sun.tools.javac.util.List<A> reverse();
  public com.sun.tools.javac.util.List<A> append(A);
  public com.sun.tools.javac.util.List<A> appendList(com.sun.tools.javac.util.List<A>);
  public com.sun.tools.javac.util.List<A> appendList(com.sun.tools.javac.util.ListBuffer<A>);
  public <T> T[] toArray(T[]);
  public java.lang.Object[] toArray();
  public java.lang.String toString(java.lang.String);
  public java.lang.String toString();
  public int hashCode();
  public boolean equals(java.lang.Object);
  public static boolean equals(com.sun.tools.javac.util.List<?>, com.sun.tools.javac.util.List<?>);
  public boolean contains(java.lang.Object);
  public A last();
  public <Z> com.sun.tools.javac.util.List<Z> map(java.util.function.Function<A, Z>);
  public static <T> com.sun.tools.javac.util.List<T> convert(java.lang.Class<T>, com.sun.tools.javac.util.List<?>);
  public java.util.Iterator<A> iterator();
  public A get(int);
  public boolean addAll(int, java.util.Collection<? extends A>);
  public A set(int, A);
  public void add(int, A);
  public A remove(int);
  public int indexOf(java.lang.Object);
  public int lastIndexOf(java.lang.Object);
  public java.util.ListIterator<A> listIterator();
  public java.util.ListIterator<A> listIterator(int);
  public java.util.List<A> subList(int, int);
  public static <Z> java.util.stream.Collector<Z, com.sun.tools.javac.util.ListBuffer<Z>, com.sun.tools.javac.util.List<Z>> collector();
  static {};
}
