Compiled from "ClassDocImpl.java"
public class com.sun.tools.javadoc.main.ClassDocImpl extends com.sun.tools.javadoc.main.ProgramElementDocImpl implements com.sun.javadoc.ClassDoc {
  public final com.sun.tools.javac.code.Type$ClassType type;
  public final com.sun.tools.javac.code.Symbol$ClassSymbol tsym;
  boolean isIncluded;
  public com.sun.tools.javadoc.main.ClassDocImpl(com.sun.tools.javadoc.main.DocEnv, com.sun.tools.javac.code.Symbol$ClassSymbol);
  public com.sun.tools.javadoc.main.ClassDocImpl(com.sun.tools.javadoc.main.DocEnv, com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.source.util.TreePath);
  public com.sun.javadoc.Type getElementType();
  protected long getFlags();
  static long getFlags(com.sun.tools.javac.code.Symbol$ClassSymbol);
  static boolean isAnnotationType(com.sun.tools.javac.code.Symbol$ClassSymbol);
  protected com.sun.tools.javac.code.Symbol$ClassSymbol getContainingClass();
  public boolean isClass();
  public boolean isOrdinaryClass();
  public boolean isEnum();
  public boolean isInterface();
  public boolean isException();
  public boolean isError();
  public boolean isThrowable();
  public boolean isAbstract();
  public boolean isSynthetic();
  public boolean isIncluded();
  public com.sun.javadoc.PackageDoc containingPackage();
  public java.lang.String name();
  public java.lang.String qualifiedName();
  public java.lang.String typeName();
  public java.lang.String qualifiedTypeName();
  public java.lang.String simpleTypeName();
  public java.lang.String toString();
  static java.lang.String getClassName(com.sun.tools.javac.code.Symbol$ClassSymbol, boolean);
  static java.lang.String classToString(com.sun.tools.javadoc.main.DocEnv, com.sun.tools.javac.code.Symbol$ClassSymbol, boolean);
  static boolean isGeneric(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public com.sun.javadoc.TypeVariable[] typeParameters();
  public com.sun.javadoc.ParamTag[] typeParamTags();
  public java.lang.String modifiers();
  public int modifierSpecifier();
  public com.sun.javadoc.ClassDoc superclass();
  public com.sun.javadoc.Type superclassType();
  public boolean subclassOf(com.sun.javadoc.ClassDoc);
  public com.sun.javadoc.ClassDoc[] interfaces();
  public com.sun.javadoc.Type[] interfaceTypes();
  public com.sun.javadoc.FieldDoc[] fields(boolean);
  public com.sun.javadoc.FieldDoc[] fields();
  public com.sun.javadoc.FieldDoc[] enumConstants();
  public com.sun.javadoc.MethodDoc[] methods(boolean);
  public com.sun.javadoc.MethodDoc[] methods();
  public com.sun.javadoc.ConstructorDoc[] constructors(boolean);
  public com.sun.javadoc.ConstructorDoc[] constructors();
  void addAllClasses(com.sun.tools.javac.util.ListBuffer<com.sun.tools.javadoc.main.ClassDocImpl>, boolean);
  public com.sun.javadoc.ClassDoc[] innerClasses(boolean);
  public com.sun.javadoc.ClassDoc[] innerClasses();
  public com.sun.javadoc.ClassDoc findClass(java.lang.String);
  public com.sun.tools.javadoc.main.MethodDocImpl findMethod(java.lang.String, java.lang.String[]);
  public com.sun.javadoc.ConstructorDoc findConstructor(java.lang.String, java.lang.String[]);
  public com.sun.javadoc.FieldDoc findField(java.lang.String);
  public com.sun.javadoc.ClassDoc[] importedClasses();
  public com.sun.javadoc.PackageDoc[] importedPackages();
  public java.lang.String dimension();
  public com.sun.javadoc.ClassDoc asClassDoc();
  public com.sun.javadoc.AnnotationTypeDoc asAnnotationTypeDoc();
  public com.sun.javadoc.ParameterizedType asParameterizedType();
  public com.sun.javadoc.TypeVariable asTypeVariable();
  public com.sun.javadoc.WildcardType asWildcardType();
  public com.sun.javadoc.AnnotatedType asAnnotatedType();
  public boolean isPrimitive();
  public boolean isSerializable();
  public boolean isExternalizable();
  public com.sun.javadoc.MethodDoc[] serializationMethods();
  public com.sun.javadoc.FieldDoc[] serializableFields();
  public boolean definesSerializableFields();
  boolean isRuntimeException();
  public com.sun.javadoc.SourcePosition position();
}
