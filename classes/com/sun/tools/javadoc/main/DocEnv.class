Compiled from "DocEnv.java"
public class com.sun.tools.javadoc.main.DocEnv {
  protected static final com.sun.tools.javac.util.Context$Key<com.sun.tools.javadoc.main.DocEnv> docEnvKey;
  com.sun.tools.javadoc.main.DocLocale doclocale;
  final com.sun.tools.javac.code.Symtab syms;
  final com.sun.tools.javac.comp.Enter enter;
  final com.sun.tools.javac.code.Symbol externalizableSym;
  protected com.sun.tools.javadoc.main.ModifierFilter showAccess;
  boolean breakiterator;
  boolean quiet;
  com.sun.tools.javac.comp.Check chk;
  com.sun.tools.javac.code.Types types;
  javax.tools.JavaFileManager fileManager;
  com.sun.tools.javac.util.Context context;
  com.sun.tools.doclint.DocLint doclint;
  com.sun.tools.javadoc.main.JavaScriptScanner javaScriptScanner;
  java.util.WeakHashMap<com.sun.tools.javac.tree.JCTree, com.sun.source.util.TreePath> treePaths;
  boolean docClasses;
  protected boolean legacyDoclet;
  protected com.sun.tools.javac.code.Source source;
  protected java.util.Map<com.sun.tools.javac.code.Symbol$PackageSymbol, com.sun.tools.javadoc.main.PackageDocImpl> packageMap;
  protected java.util.Map<com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.tools.javadoc.main.ClassDocImpl> classMap;
  protected java.util.Map<com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.tools.javadoc.main.FieldDocImpl> fieldMap;
  protected java.util.Map<com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.tools.javadoc.main.ExecutableMemberDocImpl> methodMap;
  java.util.Map<com.sun.source.tree.CompilationUnitTree, java.lang.Boolean> shouldCheck;
  static final boolean $assertionsDisabled;
  public static com.sun.tools.javadoc.main.DocEnv instance(com.sun.tools.javac.util.Context);
  protected com.sun.tools.javadoc.main.DocEnv(com.sun.tools.javac.util.Context);
  public void setSilent(boolean);
  public com.sun.tools.javadoc.main.ClassDocImpl lookupClass(java.lang.String);
  public com.sun.tools.javadoc.main.ClassDocImpl loadClass(java.lang.String);
  public com.sun.tools.javadoc.main.PackageDocImpl lookupPackage(java.lang.String);
  com.sun.tools.javac.code.Symbol$ClassSymbol getClassSymbol(java.lang.String);
  public void setLocale(java.lang.String);
  public boolean shouldDocument(com.sun.tools.javac.code.Symbol$VarSymbol);
  public boolean shouldDocument(com.sun.tools.javac.code.Symbol$MethodSymbol);
  public boolean shouldDocument(com.sun.tools.javac.code.Symbol$ClassSymbol);
  protected boolean isVisible(com.sun.tools.javac.code.Symbol$ClassSymbol);
  public void printError(java.lang.String);
  public void error(com.sun.tools.javadoc.main.DocImpl, java.lang.String);
  public void error(com.sun.javadoc.SourcePosition, java.lang.String);
  public void printError(com.sun.javadoc.SourcePosition, java.lang.String);
  public void error(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String);
  public void error(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String, java.lang.String);
  public void error(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void printWarning(java.lang.String);
  public void warning(com.sun.tools.javadoc.main.DocImpl, java.lang.String);
  public void printWarning(com.sun.javadoc.SourcePosition, java.lang.String);
  public void warning(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String);
  public void warning(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String, java.lang.String);
  public void warning(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void warning(com.sun.tools.javadoc.main.DocImpl, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void printNotice(java.lang.String);
  public void notice(java.lang.String);
  public void printNotice(com.sun.javadoc.SourcePosition, java.lang.String);
  public void notice(java.lang.String, java.lang.String);
  public void notice(java.lang.String, java.lang.String, java.lang.String);
  public void notice(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
  public void exit();
  public com.sun.tools.javadoc.main.PackageDocImpl getPackageDoc(com.sun.tools.javac.code.Symbol$PackageSymbol);
  void makePackageDoc(com.sun.tools.javac.code.Symbol$PackageSymbol, com.sun.source.util.TreePath);
  public com.sun.tools.javadoc.main.ClassDocImpl getClassDoc(com.sun.tools.javac.code.Symbol$ClassSymbol);
  protected void makeClassDoc(com.sun.tools.javac.code.Symbol$ClassSymbol, com.sun.source.util.TreePath);
  protected static boolean isAnnotationType(com.sun.tools.javac.code.Symbol$ClassSymbol);
  protected static boolean isAnnotationType(com.sun.tools.javac.tree.JCTree$JCClassDecl);
  public com.sun.tools.javadoc.main.FieldDocImpl getFieldDoc(com.sun.tools.javac.code.Symbol$VarSymbol);
  protected void makeFieldDoc(com.sun.tools.javac.code.Symbol$VarSymbol, com.sun.source.util.TreePath);
  protected void makeMethodDoc(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.source.util.TreePath);
  public com.sun.tools.javadoc.main.MethodDocImpl getMethodDoc(com.sun.tools.javac.code.Symbol$MethodSymbol);
  protected void makeConstructorDoc(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.source.util.TreePath);
  public com.sun.tools.javadoc.main.ConstructorDocImpl getConstructorDoc(com.sun.tools.javac.code.Symbol$MethodSymbol);
  protected void makeAnnotationTypeElementDoc(com.sun.tools.javac.code.Symbol$MethodSymbol, com.sun.source.util.TreePath);
  public com.sun.tools.javadoc.main.AnnotationTypeElementDocImpl getAnnotationTypeElementDoc(com.sun.tools.javac.code.Symbol$MethodSymbol);
  com.sun.tools.javadoc.main.ParameterizedTypeImpl getParameterizedType(com.sun.tools.javac.code.Type$ClassType);
  com.sun.source.util.TreePath getTreePath(com.sun.tools.javac.tree.JCTree$JCCompilationUnit);
  com.sun.source.util.TreePath getTreePath(com.sun.tools.javac.tree.JCTree$JCCompilationUnit, com.sun.tools.javac.tree.JCTree$JCPackageDecl);
  com.sun.source.util.TreePath getTreePath(com.sun.tools.javac.tree.JCTree$JCCompilationUnit, com.sun.tools.javac.tree.JCTree$JCClassDecl);
  com.sun.source.util.TreePath getTreePath(com.sun.tools.javac.tree.JCTree$JCCompilationUnit, com.sun.tools.javac.tree.JCTree$JCClassDecl, com.sun.tools.javac.tree.JCTree);
  public void setEncoding(java.lang.String);
  public java.lang.String getEncoding();
  static int translateModifiers(long);
  void initDoclint(java.util.Collection<java.lang.String>, java.util.Collection<java.lang.String>, java.lang.String);
  com.sun.tools.javadoc.main.JavaScriptScanner initJavaScriptScanner(boolean);
  boolean showTagMessages();
  boolean shouldCheck(com.sun.source.tree.CompilationUnitTree);
  static {};
}
