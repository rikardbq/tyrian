Compiled from "Attribute.java"
class com.sun.java.util.jar.pack.Attribute implements java.lang.Comparable<com.sun.java.util.jar.pack.Attribute> {
  com.sun.java.util.jar.pack.Attribute$Layout def;
  byte[] bytes;
  java.lang.Object fixups;
  static final byte EK_INT;
  static final byte EK_BCI;
  static final byte EK_BCO;
  static final byte EK_FLAG;
  static final byte EK_REPL;
  static final byte EK_REF;
  static final byte EK_UN;
  static final byte EK_CASE;
  static final byte EK_CALL;
  static final byte EK_CBLE;
  static final byte EF_SIGN;
  static final byte EF_DELTA;
  static final byte EF_NULL;
  static final byte EF_BACK;
  static final int NO_BAND_INDEX;
  static final boolean $assertionsDisabled;
  public java.lang.String name();
  public com.sun.java.util.jar.pack.Attribute$Layout layout();
  public byte[] bytes();
  public int size();
  public com.sun.java.util.jar.pack.ConstantPool$Entry getNameRef();
  public com.sun.java.util.jar.pack.Attribute(com.sun.java.util.jar.pack.Attribute$Layout, byte[], java.lang.Object);
  public com.sun.java.util.jar.pack.Attribute(com.sun.java.util.jar.pack.Attribute$Layout, byte[]);
  public com.sun.java.util.jar.pack.Attribute addContent(byte[], java.lang.Object);
  public com.sun.java.util.jar.pack.Attribute addContent(byte[]);
  public void finishRefs(com.sun.java.util.jar.pack.ConstantPool$Index);
  public boolean isCanonical();
  public int compareTo(com.sun.java.util.jar.pack.Attribute);
  public static java.util.List<com.sun.java.util.jar.pack.Attribute> getCanonList(java.util.List<com.sun.java.util.jar.pack.Attribute>);
  public static com.sun.java.util.jar.pack.Attribute find(int, java.lang.String, java.lang.String);
  public static com.sun.java.util.jar.pack.Attribute$Layout keyForLookup(int, java.lang.String);
  public static com.sun.java.util.jar.pack.Attribute lookup(java.util.Map<com.sun.java.util.jar.pack.Attribute$Layout, com.sun.java.util.jar.pack.Attribute>, int, java.lang.String);
  public static com.sun.java.util.jar.pack.Attribute define(java.util.Map<com.sun.java.util.jar.pack.Attribute$Layout, com.sun.java.util.jar.pack.Attribute>, int, java.lang.String, java.lang.String);
  public static java.lang.String contextName(int);
  void visitRefs(com.sun.java.util.jar.pack.Attribute$Holder, int, java.util.Collection<com.sun.java.util.jar.pack.ConstantPool$Entry>);
  public void parse(com.sun.java.util.jar.pack.Attribute$Holder, byte[], int, int, com.sun.java.util.jar.pack.Attribute$ValueStream);
  public java.lang.Object unparse(com.sun.java.util.jar.pack.Attribute$ValueStream, java.io.ByteArrayOutputStream);
  public java.lang.String toString();
  public static java.lang.String normalizeLayoutString(java.lang.String);
  static com.sun.java.util.jar.pack.Attribute$Layout$Element[] tokenizeLayout(com.sun.java.util.jar.pack.Attribute$Layout, int, java.lang.String);
  static void tokenizeLayout(com.sun.java.util.jar.pack.Attribute$Layout, int, java.lang.String, java.util.List<com.sun.java.util.jar.pack.Attribute$Layout$Element>);
  static java.lang.String[] splitBodies(java.lang.String);
  static int findCaseDash(java.lang.String, int);
  static int parseIntBefore(java.lang.String, int);
  static int parseIntAfter(java.lang.String, int);
  static java.lang.String expandCaseDashNotation(java.lang.String);
  static int parseUsing(com.sun.java.util.jar.pack.Attribute$Layout$Element[], com.sun.java.util.jar.pack.Attribute$Holder, byte[], int, int, com.sun.java.util.jar.pack.Attribute$ValueStream);
  static com.sun.java.util.jar.pack.Attribute$Layout$Element matchCase(com.sun.java.util.jar.pack.Attribute$Layout$Element, int);
  static void unparseUsing(com.sun.java.util.jar.pack.Attribute$Layout$Element[], java.lang.Object[], com.sun.java.util.jar.pack.Attribute$ValueStream, java.io.ByteArrayOutputStream);
  public int compareTo(java.lang.Object);
  static {};
}
