Compiled from "Package.java"
class com.sun.java.util.jar.pack.Package {
  int verbose;
  final int magic;
  int default_modtime;
  int default_options;
  com.sun.java.util.jar.pack.Package$Version defaultClassVersion;
  final com.sun.java.util.jar.pack.Package$Version minClassVersion;
  final com.sun.java.util.jar.pack.Package$Version maxClassVersion;
  final com.sun.java.util.jar.pack.Package$Version packageVersion;
  com.sun.java.util.jar.pack.Package$Version observedHighestClassVersion;
  com.sun.java.util.jar.pack.ConstantPool$IndexGroup cp;
  public static final com.sun.java.util.jar.pack.Attribute$Layout attrCodeEmpty;
  public static final com.sun.java.util.jar.pack.Attribute$Layout attrBootstrapMethodsEmpty;
  public static final com.sun.java.util.jar.pack.Attribute$Layout attrInnerClassesEmpty;
  public static final com.sun.java.util.jar.pack.Attribute$Layout attrSourceFileSpecial;
  public static final java.util.Map<com.sun.java.util.jar.pack.Attribute$Layout, com.sun.java.util.jar.pack.Attribute> attrDefs;
  java.util.ArrayList<com.sun.java.util.jar.pack.Package$Class> classes;
  java.util.ArrayList<com.sun.java.util.jar.pack.Package$File> files;
  java.util.List<com.sun.java.util.jar.pack.Package$InnerClass> allInnerClasses;
  java.util.Map<com.sun.java.util.jar.pack.ConstantPool$ClassEntry, com.sun.java.util.jar.pack.Package$InnerClass> allInnerClassesByThis;
  static final java.util.List<java.lang.Object> noObjects;
  static final java.util.List<com.sun.java.util.jar.pack.Package$Class$Field> noFields;
  static final java.util.List<com.sun.java.util.jar.pack.Package$Class$Method> noMethods;
  static final java.util.List<com.sun.java.util.jar.pack.Package$InnerClass> noInnerClasses;
  static final boolean $assertionsDisabled;
  public com.sun.java.util.jar.pack.Package();
  public com.sun.java.util.jar.pack.Package(com.sun.java.util.jar.pack.Package$Version, com.sun.java.util.jar.pack.Package$Version, com.sun.java.util.jar.pack.Package$Version);
  public void reset();
  com.sun.java.util.jar.pack.Package$Version getDefaultClassVersion();
  com.sun.java.util.jar.pack.Package$Version getHighestClassVersion();
  public java.util.List<com.sun.java.util.jar.pack.Package$Class> getClasses();
  void addClass(com.sun.java.util.jar.pack.Package$Class);
  public java.util.List<com.sun.java.util.jar.pack.Package$File> getFiles();
  public java.util.List<com.sun.java.util.jar.pack.Package$File> getClassStubs();
  com.sun.java.util.jar.pack.Package$File newStub(java.lang.String);
  void addFile(com.sun.java.util.jar.pack.Package$File);
  public java.util.List<com.sun.java.util.jar.pack.Package$InnerClass> getAllInnerClasses();
  public void setAllInnerClasses(java.util.Collection<com.sun.java.util.jar.pack.Package$InnerClass>);
  public com.sun.java.util.jar.pack.Package$InnerClass getGlobalInnerClass(com.sun.java.util.jar.pack.ConstantPool$Entry);
  static java.lang.String[] parseInnerClassName(java.lang.String);
  static java.lang.String getObviousSourceFile(java.lang.String);
  static com.sun.java.util.jar.pack.ConstantPool$Utf8Entry getRefString(java.lang.String);
  static com.sun.java.util.jar.pack.ConstantPool$LiteralEntry getRefLiteral(java.lang.Comparable<?>);
  void stripAttributeKind(java.lang.String);
  public void trimToSize();
  public void strip(java.lang.String);
  public void stripConstantFields();
  protected void visitRefs(int, java.util.Collection<com.sun.java.util.jar.pack.ConstantPool$Entry>);
  void reorderFiles(boolean, boolean);
  void trimStubs();
  void buildGlobalConstantPool(java.util.Set<com.sun.java.util.jar.pack.ConstantPool$Entry>);
  void ensureAllClassFiles();
  static {};
}
