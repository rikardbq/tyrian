Compiled from "Monitor.java"
public abstract class javax.management.monitor.Monitor extends javax.management.NotificationBroadcasterSupport implements javax.management.monitor.MonitorMBean,javax.management.MBeanRegistration {
  protected static final int capacityIncrement;
  protected int elementCount;
  protected int alreadyNotified;
  protected int[] alreadyNotifieds;
  protected javax.management.MBeanServer server;
  protected static final int RESET_FLAGS_ALREADY_NOTIFIED;
  protected static final int OBSERVED_OBJECT_ERROR_NOTIFIED;
  protected static final int OBSERVED_ATTRIBUTE_ERROR_NOTIFIED;
  protected static final int OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED;
  protected static final int RUNTIME_ERROR_NOTIFIED;
  protected java.lang.String dbgTag;
  final java.util.List<javax.management.monitor.Monitor$ObservedObject> observedObjects;
  static final int THRESHOLD_ERROR_NOTIFIED;
  static final java.lang.Integer INTEGER_ZERO;
  public javax.management.monitor.Monitor();
  public javax.management.ObjectName preRegister(javax.management.MBeanServer, javax.management.ObjectName) throws java.lang.Exception;
  public void postRegister(java.lang.Boolean);
  public void preDeregister() throws java.lang.Exception;
  public void postDeregister();
  public abstract void start();
  public abstract void stop();
  public synchronized javax.management.ObjectName getObservedObject();
  public synchronized void setObservedObject(javax.management.ObjectName) throws java.lang.IllegalArgumentException;
  public synchronized void addObservedObject(javax.management.ObjectName) throws java.lang.IllegalArgumentException;
  public synchronized void removeObservedObject(javax.management.ObjectName);
  public synchronized boolean containsObservedObject(javax.management.ObjectName);
  public synchronized javax.management.ObjectName[] getObservedObjects();
  public synchronized java.lang.String getObservedAttribute();
  public void setObservedAttribute(java.lang.String) throws java.lang.IllegalArgumentException;
  public synchronized long getGranularityPeriod();
  public synchronized void setGranularityPeriod(long) throws java.lang.IllegalArgumentException;
  public synchronized boolean isActive();
  void doStart();
  void doStop();
  synchronized java.lang.Object getDerivedGauge(javax.management.ObjectName);
  synchronized long getDerivedGaugeTimeStamp(javax.management.ObjectName);
  java.lang.Object getAttribute(javax.management.MBeanServerConnection, javax.management.ObjectName, java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.ReflectionException, java.io.IOException;
  java.lang.Comparable<?> getComparableFromAttribute(javax.management.ObjectName, java.lang.String, java.lang.Object) throws javax.management.AttributeNotFoundException;
  boolean isComparableTypeValid(javax.management.ObjectName, java.lang.String, java.lang.Comparable<?>);
  java.lang.String buildErrorNotification(javax.management.ObjectName, java.lang.String, java.lang.Comparable<?>);
  void onErrorNotification(javax.management.monitor.MonitorNotification);
  java.lang.Comparable<?> getDerivedGaugeFromComparable(javax.management.ObjectName, java.lang.String, java.lang.Comparable<?>);
  javax.management.monitor.MonitorNotification buildAlarmNotification(javax.management.ObjectName, java.lang.String, java.lang.Comparable<?>);
  boolean isThresholdTypeValid(javax.management.ObjectName, java.lang.String, java.lang.Comparable<?>);
  static java.lang.Class<? extends java.lang.Number> classForType(javax.management.monitor.Monitor$NumericalType);
  static boolean isValidForType(java.lang.Object, java.lang.Class<? extends java.lang.Number>);
  synchronized javax.management.monitor.Monitor$ObservedObject getObservedObject(javax.management.ObjectName);
  javax.management.monitor.Monitor$ObservedObject createObservedObject(javax.management.ObjectName);
  synchronized void createAlreadyNotified();
  synchronized void updateDeprecatedAlreadyNotified();
  synchronized void updateAlreadyNotified(javax.management.monitor.Monitor$ObservedObject, int);
  synchronized boolean isAlreadyNotified(javax.management.monitor.Monitor$ObservedObject, int);
  synchronized void setAlreadyNotified(javax.management.monitor.Monitor$ObservedObject, int, int, int[]);
  synchronized void resetAlreadyNotified(javax.management.monitor.Monitor$ObservedObject, int, int);
  synchronized void resetAllAlreadyNotified(javax.management.monitor.Monitor$ObservedObject, int, int[]);
  synchronized int computeAlreadyNotifiedIndex(javax.management.monitor.Monitor$ObservedObject, int, int[]);
  static {};
}
