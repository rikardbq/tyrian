Compiled from "InternationalFormatter.java"
public class javax.swing.text.InternationalFormatter extends javax.swing.text.DefaultFormatter {
  public javax.swing.text.InternationalFormatter();
  public javax.swing.text.InternationalFormatter(java.text.Format);
  public void setFormat(java.text.Format);
  public java.text.Format getFormat();
  public void setMinimum(java.lang.Comparable<?>);
  public java.lang.Comparable<?> getMinimum();
  public void setMaximum(java.lang.Comparable<?>);
  public java.lang.Comparable<?> getMaximum();
  public void install(javax.swing.JFormattedTextField);
  public java.lang.String valueToString(java.lang.Object) throws java.text.ParseException;
  public java.lang.Object stringToValue(java.lang.String) throws java.text.ParseException;
  public java.text.Format$Field[] getFields(int);
  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
  protected javax.swing.Action[] getActions();
  java.lang.Object stringToValue(java.lang.String, java.text.Format) throws java.text.ParseException;
  boolean isValidValue(java.lang.Object, boolean);
  java.util.Map<java.text.AttributedCharacterIterator$Attribute, java.lang.Object> getAttributes(int);
  int getAttributeStart(java.text.AttributedCharacterIterator$Attribute);
  java.text.AttributedCharacterIterator getIterator();
  void updateMaskIfNecessary();
  void updateMask();
  int getLiteralCountTo(int);
  boolean isLiteral(int);
  char getLiteral(int);
  boolean isNavigatable(int);
  void updateValue(java.lang.Object);
  void replace(javax.swing.text.DocumentFilter$FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet) throws javax.swing.text.BadLocationException;
  boolean canReplace(javax.swing.text.DefaultFormatter$ReplaceHolder);
  boolean replace(javax.swing.text.DefaultFormatter$ReplaceHolder) throws javax.swing.text.BadLocationException;
  char getBufferedChar(int);
  boolean isValidMask();
  boolean isLiteral(java.util.Map<?, ?>);
  boolean canIncrement(java.lang.Object, int);
  void selectField(java.lang.Object, int);
  java.lang.Object getAdjustField(int, java.util.Map<?, ?>);
  java.lang.Object adjustValue(java.lang.Object, java.util.Map<?, ?>, java.lang.Object, int) throws javax.swing.text.BadLocationException, java.text.ParseException;
  boolean getSupportsIncrement();
  void resetValue(java.lang.Object) throws javax.swing.text.BadLocationException, java.text.ParseException;
  javax.swing.text.DefaultFormatter$ReplaceHolder getReplaceHolder(javax.swing.text.DocumentFilter$FilterBypass, int, int, java.lang.String, javax.swing.text.AttributeSet);
  static javax.swing.JFormattedTextField access$000(javax.swing.text.InternationalFormatter);
  static javax.swing.JFormattedTextField access$100(javax.swing.text.InternationalFormatter);
  static javax.swing.JFormattedTextField access$200(javax.swing.text.InternationalFormatter);
  static void access$300(javax.swing.text.InternationalFormatter);
  static {};
}
