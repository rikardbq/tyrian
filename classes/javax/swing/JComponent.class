Compiled from "JComponent.java"
public abstract class javax.swing.JComponent extends java.awt.Container implements java.io.Serializable,javax.swing.TransferHandler$HasGetTransferHandler {
  static boolean DEBUG_GRAPHICS_LOADED;
  protected transient javax.swing.plaf.ComponentUI ui;
  protected javax.swing.event.EventListenerList listenerList;
  transient java.awt.Component paintingChild;
  public static final int WHEN_FOCUSED;
  public static final int WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
  public static final int WHEN_IN_FOCUSED_WINDOW;
  public static final int UNDEFINED_CONDITION;
  public static final java.lang.String TOOL_TIP_TEXT_KEY;
  static final sun.awt.RequestFocusController focusController;
  static java.awt.Graphics safelyGetGraphics(java.awt.Component);
  static java.awt.Graphics safelyGetGraphics(java.awt.Component, java.awt.Component);
  static void getGraphicsInvoked(java.awt.Component);
  static java.util.Set<javax.swing.KeyStroke> getManagingFocusForwardTraversalKeys();
  static java.util.Set<javax.swing.KeyStroke> getManagingFocusBackwardTraversalKeys();
  public void setInheritsPopupMenu(boolean);
  public boolean getInheritsPopupMenu();
  public void setComponentPopupMenu(javax.swing.JPopupMenu);
  public javax.swing.JPopupMenu getComponentPopupMenu();
  public javax.swing.JComponent();
  public void updateUI();
  public javax.swing.plaf.ComponentUI getUI();
  protected void setUI(javax.swing.plaf.ComponentUI);
  public java.lang.String getUIClassID();
  protected java.awt.Graphics getComponentGraphics(java.awt.Graphics);
  protected void paintComponent(java.awt.Graphics);
  protected void paintChildren(java.awt.Graphics);
  protected void paintBorder(java.awt.Graphics);
  public void update(java.awt.Graphics);
  public void paint(java.awt.Graphics);
  void paintForceDoubleBuffered(java.awt.Graphics);
  boolean isPainting();
  public void printAll(java.awt.Graphics);
  public void print(java.awt.Graphics);
  protected void printComponent(java.awt.Graphics);
  protected void printChildren(java.awt.Graphics);
  protected void printBorder(java.awt.Graphics);
  public boolean isPaintingTile();
  public final boolean isPaintingForPrint();
  public boolean isManagingFocus();
  public void setNextFocusableComponent(java.awt.Component);
  public java.awt.Component getNextFocusableComponent();
  public void setRequestFocusEnabled(boolean);
  public boolean isRequestFocusEnabled();
  public void requestFocus();
  public boolean requestFocus(boolean);
  public boolean requestFocusInWindow();
  protected boolean requestFocusInWindow(boolean);
  public void grabFocus();
  public void setVerifyInputWhenFocusTarget(boolean);
  public boolean getVerifyInputWhenFocusTarget();
  public java.awt.FontMetrics getFontMetrics(java.awt.Font);
  public void setPreferredSize(java.awt.Dimension);
  public java.awt.Dimension getPreferredSize();
  public void setMaximumSize(java.awt.Dimension);
  public java.awt.Dimension getMaximumSize();
  public void setMinimumSize(java.awt.Dimension);
  public java.awt.Dimension getMinimumSize();
  public boolean contains(int, int);
  public void setBorder(javax.swing.border.Border);
  public javax.swing.border.Border getBorder();
  public java.awt.Insets getInsets();
  public java.awt.Insets getInsets(java.awt.Insets);
  public float getAlignmentY();
  public void setAlignmentY(float);
  public float getAlignmentX();
  public void setAlignmentX(float);
  public void setInputVerifier(javax.swing.InputVerifier);
  public javax.swing.InputVerifier getInputVerifier();
  public java.awt.Graphics getGraphics();
  public void setDebugGraphicsOptions(int);
  public int getDebugGraphicsOptions();
  int shouldDebugGraphics();
  public void registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int);
  void componentInputMapChanged(javax.swing.ComponentInputMap);
  public void registerKeyboardAction(java.awt.event.ActionListener, javax.swing.KeyStroke, int);
  public void unregisterKeyboardAction(javax.swing.KeyStroke);
  public javax.swing.KeyStroke[] getRegisteredKeyStrokes();
  public int getConditionForKeyStroke(javax.swing.KeyStroke);
  public java.awt.event.ActionListener getActionForKeyStroke(javax.swing.KeyStroke);
  public void resetKeyboardActions();
  public final void setInputMap(int, javax.swing.InputMap);
  public final javax.swing.InputMap getInputMap(int);
  public final javax.swing.InputMap getInputMap();
  public final void setActionMap(javax.swing.ActionMap);
  public final javax.swing.ActionMap getActionMap();
  final javax.swing.InputMap getInputMap(int, boolean);
  final javax.swing.ActionMap getActionMap(boolean);
  public int getBaseline(int, int);
  public java.awt.Component$BaselineResizeBehavior getBaselineResizeBehavior();
  public boolean requestDefaultFocus();
  public void setVisible(boolean);
  public void setEnabled(boolean);
  public void setForeground(java.awt.Color);
  public void setBackground(java.awt.Color);
  public void setFont(java.awt.Font);
  public static java.util.Locale getDefaultLocale();
  public static void setDefaultLocale(java.util.Locale);
  protected void processComponentKeyEvent(java.awt.event.KeyEvent);
  protected void processKeyEvent(java.awt.event.KeyEvent);
  protected boolean processKeyBinding(javax.swing.KeyStroke, java.awt.event.KeyEvent, int, boolean);
  boolean processKeyBindings(java.awt.event.KeyEvent, boolean);
  static boolean processKeyBindingsForAllComponents(java.awt.event.KeyEvent, java.awt.Container, boolean);
  public void setToolTipText(java.lang.String);
  public java.lang.String getToolTipText();
  public java.lang.String getToolTipText(java.awt.event.MouseEvent);
  public java.awt.Point getToolTipLocation(java.awt.event.MouseEvent);
  public java.awt.Point getPopupLocation(java.awt.event.MouseEvent);
  public javax.swing.JToolTip createToolTip();
  public void scrollRectToVisible(java.awt.Rectangle);
  public void setAutoscrolls(boolean);
  public boolean getAutoscrolls();
  public void setTransferHandler(javax.swing.TransferHandler);
  public javax.swing.TransferHandler getTransferHandler();
  javax.swing.TransferHandler$DropLocation dropLocationForPoint(java.awt.Point);
  java.lang.Object setDropLocation(javax.swing.TransferHandler$DropLocation, java.lang.Object, boolean);
  void dndDone();
  protected void processMouseEvent(java.awt.event.MouseEvent);
  protected void processMouseMotionEvent(java.awt.event.MouseEvent);
  void superProcessMouseMotionEvent(java.awt.event.MouseEvent);
  void setCreatedDoubleBuffer(boolean);
  boolean getCreatedDoubleBuffer();
  public void enable();
  public void disable();
  public final java.lang.Object getClientProperty(java.lang.Object);
  public final void putClientProperty(java.lang.Object, java.lang.Object);
  void clientPropertyChanged(java.lang.Object, java.lang.Object, java.lang.Object);
  void setUIProperty(java.lang.String, java.lang.Object);
  public void setFocusTraversalKeys(int, java.util.Set<? extends java.awt.AWTKeyStroke>);
  public static boolean isLightweightComponent(java.awt.Component);
  public void reshape(int, int, int, int);
  public java.awt.Rectangle getBounds(java.awt.Rectangle);
  public java.awt.Dimension getSize(java.awt.Dimension);
  public java.awt.Point getLocation(java.awt.Point);
  public int getX();
  public int getY();
  public int getWidth();
  public int getHeight();
  public boolean isOpaque();
  public void setOpaque(boolean);
  boolean rectangleIsObscured(int, int, int, int);
  static final void computeVisibleRect(java.awt.Component, java.awt.Rectangle);
  public void computeVisibleRect(java.awt.Rectangle);
  public java.awt.Rectangle getVisibleRect();
  public void firePropertyChange(java.lang.String, boolean, boolean);
  public void firePropertyChange(java.lang.String, int, int);
  public void firePropertyChange(java.lang.String, char, char);
  protected void fireVetoableChange(java.lang.String, java.lang.Object, java.lang.Object) throws java.beans.PropertyVetoException;
  public synchronized void addVetoableChangeListener(java.beans.VetoableChangeListener);
  public synchronized void removeVetoableChangeListener(java.beans.VetoableChangeListener);
  public synchronized java.beans.VetoableChangeListener[] getVetoableChangeListeners();
  public java.awt.Container getTopLevelAncestor();
  public void addAncestorListener(javax.swing.event.AncestorListener);
  public void removeAncestorListener(javax.swing.event.AncestorListener);
  public javax.swing.event.AncestorListener[] getAncestorListeners();
  public <T extends java.util.EventListener> T[] getListeners(java.lang.Class<T>);
  public void addNotify();
  public void removeNotify();
  public void repaint(long, int, int, int, int);
  public void repaint(java.awt.Rectangle);
  public void revalidate();
  public boolean isValidateRoot();
  public boolean isOptimizedDrawingEnabled();
  protected boolean isPaintingOrigin();
  public void paintImmediately(int, int, int, int);
  public void paintImmediately(java.awt.Rectangle);
  boolean alwaysOnTop();
  void setPaintingChild(java.awt.Component);
  void _paintImmediately(int, int, int, int);
  void paintToOffscreen(java.awt.Graphics, int, int, int, int, int, int);
  boolean checkIfChildObscuredBySibling();
  static void setWriteObjCounter(javax.swing.JComponent, byte);
  static byte getWriteObjCounter(javax.swing.JComponent);
  public void setDoubleBuffered(boolean);
  public boolean isDoubleBuffered();
  public javax.swing.JRootPane getRootPane();
  void compWriteObjectNotify();
  protected java.lang.String paramString();
  public void hide();
  static javax.accessibility.AccessibleContext access$000(javax.swing.JComponent);
  static javax.accessibility.AccessibleContext access$100(javax.swing.JComponent);
  static javax.accessibility.AccessibleContext access$200(javax.swing.JComponent);
  static javax.accessibility.AccessibleContext access$300(javax.swing.JComponent);
  static {};
}
