Compiled from "BasicToolBarUI.java"
public class javax.swing.plaf.basic.BasicToolBarUI extends javax.swing.plaf.ToolBarUI implements javax.swing.SwingConstants {
  protected javax.swing.JToolBar toolBar;
  protected javax.swing.plaf.basic.BasicToolBarUI$DragWindow dragWindow;
  protected int focusedCompIndex;
  protected java.awt.Color dockingColor;
  protected java.awt.Color floatingColor;
  protected java.awt.Color dockingBorderColor;
  protected java.awt.Color floatingBorderColor;
  protected javax.swing.event.MouseInputListener dockingListener;
  protected java.beans.PropertyChangeListener propertyListener;
  protected java.awt.event.ContainerListener toolBarContListener;
  protected java.awt.event.FocusListener toolBarFocusListener;
  protected java.lang.String constraintBeforeFloating;
  protected javax.swing.KeyStroke upKey;
  protected javax.swing.KeyStroke downKey;
  protected javax.swing.KeyStroke leftKey;
  protected javax.swing.KeyStroke rightKey;
  public javax.swing.plaf.basic.BasicToolBarUI();
  public static javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent);
  public void installUI(javax.swing.JComponent);
  public void uninstallUI(javax.swing.JComponent);
  protected void installDefaults();
  protected void uninstallDefaults();
  protected void installComponents();
  protected void uninstallComponents();
  protected void installListeners();
  protected void uninstallListeners();
  protected void installKeyboardActions();
  javax.swing.InputMap getInputMap(int);
  static void loadActionMap(javax.swing.plaf.basic.LazyActionMap);
  protected void uninstallKeyboardActions();
  protected void navigateFocusedComp(int);
  protected javax.swing.border.Border createRolloverBorder();
  protected javax.swing.border.Border createNonRolloverBorder();
  protected javax.swing.JFrame createFloatingFrame(javax.swing.JToolBar);
  protected javax.swing.RootPaneContainer createFloatingWindow(javax.swing.JToolBar);
  protected javax.swing.plaf.basic.BasicToolBarUI$DragWindow createDragWindow(javax.swing.JToolBar);
  public boolean isRolloverBorders();
  public void setRolloverBorders(boolean);
  protected void installRolloverBorders(javax.swing.JComponent);
  protected void installNonRolloverBorders(javax.swing.JComponent);
  protected void installNormalBorders(javax.swing.JComponent);
  protected void setBorderToRollover(java.awt.Component);
  protected javax.swing.border.Border getRolloverBorder(javax.swing.AbstractButton);
  protected void setBorderToNonRollover(java.awt.Component);
  protected javax.swing.border.Border getNonRolloverBorder(javax.swing.AbstractButton);
  protected void setBorderToNormal(java.awt.Component);
  public void setFloatingLocation(int, int);
  public boolean isFloating();
  public void setFloating(boolean, java.awt.Point);
  public void setOrientation(int);
  public java.awt.Color getDockingColor();
  public void setDockingColor(java.awt.Color);
  public java.awt.Color getFloatingColor();
  public void setFloatingColor(java.awt.Color);
  public boolean canDock(java.awt.Component, java.awt.Point);
  protected void dragTo(java.awt.Point, java.awt.Point);
  protected void floatAt(java.awt.Point, java.awt.Point);
  protected java.awt.event.ContainerListener createToolBarContListener();
  protected java.awt.event.FocusListener createToolBarFocusListener();
  protected java.beans.PropertyChangeListener createPropertyListener();
  protected javax.swing.event.MouseInputListener createDockingListener();
  protected java.awt.event.WindowListener createFrameListener();
  protected void paintDragWindow(java.awt.Graphics);
  static {};
}
